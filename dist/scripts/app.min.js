(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({"E:\\angualarjslibs\\app\\activites\\activites.route.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
/* @ngInject */
module.exports = function activitesRoutes(Router) {
    Router.configureRoutes([
        {
            name: "root.pre_location",
            config: {
                url: '/pre_location',
                views: {
                    '@': {
                        templateUrl: "app/activites/pre_location/pre_location.html",
                        controller: "PreLocationController as $ctrl"
                    }
                },
                params: {
                    permisstion: "ALLUSER",
                    result:null,
                    activityType:"LOCATION"
                },
                title: 'pre_location'
            }
        },
        {
            name: "root.pre_education",
            config: {
                url: '/pre_education',
                views: {
                    '@': {
                        templateUrl: "app/activites/pre_location/pre_location.html",
                        controller: "PreLocationController as $ctrl"
                    }
                },
                params: {
                    permisstion: "ALLUSER",
                    result:null,
                    activityType:"EDUCATION"
                },
                title: 'pre_education'
            }
        },
        {
            name: "root.pre_occupation",
            config: {
                url: '/pre_occupation',
                views: {
                    '@': {
                        templateUrl: "app/activites/pre_location/pre_location.html",
                        controller: "PreLocationController as $ctrl"
                    }
                },
                params: {
                    permisstion: "ALLUSER",
                    result:null,
                    activityType:"OCCUPATION"
                },
                title: 'pre_occupation'
            }
        },
        {
            name: "root.viewed_profiles",
            config: {
                url: '/viewed_profiles',
                views: {
                    '@': {
                        templateUrl: "app/activites/pre_location/pre_location.html",
                        controller: "PreLocationController as $ctrl"
                    }
                },
                params: {
                    permisstion: "ALLUSER",
                    result:null,
                    activityType:"VIEWED_PROFILE"
                },
                title: 'viewed_profiles'
            }
        },{
            name: "root.liked_profiles",
            config: {
                url: '/liked_profiles',
                views: {
                    '@': {
                        templateUrl: "app/activites/pre_location/pre_location.html",
                        controller: "PreLocationController as $ctrl"
                    }
                },
                params: {
                    permisstion: "ALLUSER",
                    result:null,
                    activityType:"LIKED"
                },
                title: 'liked_profiles'
            }
        },
        {
            name: "root.visitor_profiles",
            config: {
                url: '/visitor_profiles',
                views: {
                    '@': {
                        templateUrl: "app/activites/pre_location/pre_location.html",
                        controller: "PreLocationController as $ctrl"
                    }
                },
                params: {
                    permisstion: "ALLUSER",
                    result:null,
                    activityType:"VISITOR"
                },
                title: 'visitor_profiles'
            }
        },
        {
            name: "root.blocked_profiles",
            config: {
                url: '/blocked_profiles',
                views: {
                    '@': {
                        templateUrl: "app/activites/pre_location/pre_location.html",
                        controller: "PreLocationController as $ctrl"
                    }
                },
                params: {
                    permisstion: "ALLUSER",
                    result:null,
                    activityType:"BLOCKED"
                },
                title: 'blocked_profiles'
            }
        }
    ]);
};
module.exports.$inject = ["Router"];
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/app\\activites\\activites.route.js","/app\\activites")

},{"_process":"E:\\angualarjslibs\\node_modules\\process\\browser.js","buffer":"E:\\angualarjslibs\\node_modules\\buffer\\index.js"}],"E:\\angualarjslibs\\app\\activites\\index.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
'use strict';

var angular = require('angular');
var activitesRoutes = require('./activites.route');
//var matchescomponents = require('./components');
var PreLocationController = require('./pre_location/pre.location.ctrl');

var activitesService = require('./service');
module.exports = angular.module('app.ui.activites', [activitesService.name])
    .run(activitesRoutes)
    .controller('PreLocationController', PreLocationController);
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/app\\activites\\index.js","/app\\activites")

},{"./activites.route":"E:\\angualarjslibs\\app\\activites\\activites.route.js","./pre_location/pre.location.ctrl":"E:\\angualarjslibs\\app\\activites\\pre_location\\pre.location.ctrl.js","./service":"E:\\angualarjslibs\\app\\activites\\service\\index.js","_process":"E:\\angualarjslibs\\node_modules\\process\\browser.js","angular":"angular","buffer":"E:\\angualarjslibs\\node_modules\\buffer\\index.js"}],"E:\\angualarjslibs\\app\\activites\\pre_location\\pre.location.ctrl.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
/* @ngInject */
module.exports = function PreLocationController($state,$stateParams, $location, searchService, $scope, useractions, $timeout, $rootScope, loginservice, matcheservice) {
    var controller = this;
    controller.result = $state.params.result;
    controller.activityType=$stateParams.activityType;
    console.log( controller.activityType)
    controller.fields = {};
    controller.limit = 10;
    controller.total = 0;
    controller.page = 1;
    controller.pages = 0;
    controller.maxSize = 5;
    controller.userIds = [];
    controller.start = 0;
    controller.end = 0;
    var req = {
        page: controller.page,
        limit: controller.limit,
        gender: $rootScope.login_user_gender,
        fields: controller.fields
    };

    controller.pageChanged = function () {

        controller.selectedAll = false;

        controller.page = controller.page;

        req.page = controller.page;
        controller.loadViewType();

    };

    controller.loadViewType = function () {

        searchService.getSearchResult(req, function (result) {

            setUserData(result)
        }, function (error) { });

        //     if(controller.fields){
        //         serachResult();
        //     }


        //    else{
        //     searchService.getSearch({ user_id: $rootScope.login_user_id }, function (result) {
        //         if (result) {
        //             req.fields=result;
        //             controller.fields=result;
        //             req.gender=$rootScope.login_user_gender;
        //             serachResult();
        //         }

        //             },function(error){});
        //    }

    };


    function setUserData(result) {

        controller.pages = result.pages;
        controller.total = result.total;
        controller.users = result.users;

        controller.start = (controller.page - 1) * controller.limit + 1;
        controller.end = controller.start + result.users.length - 1;
    }

    function loadDefualt() {
        useractions.get_default_search_config(controller.activityType,"LOGIN_USER",function (fields) {
           

            req.fields = fields;
            controller.loadViewType();
        });


    }
    if (controller.result) {
        setUserData(controller.result);
    } else {
        loadDefualt();
    }

};
module.exports.$inject = ["$state", "$stateParams", "$location", "searchService", "$scope", "useractions", "$timeout", "$rootScope", "loginservice", "matcheservice"];
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/app\\activites\\pre_location\\pre.location.ctrl.js","/app\\activites\\pre_location")

},{"_process":"E:\\angualarjslibs\\node_modules\\process\\browser.js","buffer":"E:\\angualarjslibs\\node_modules\\buffer\\index.js"}],"E:\\angualarjslibs\\app\\activites\\service\\activites.service.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
/* @ngInject */
module.exports = function ($http,toastr, $sessionStorage, $localStorage, ServiceUrls, $location, $uibModal, $rootScope) {
var service={

    send_message: function (data, success, error) {
        $http.post(ServiceUrls.BASEURL + ServiceUrls.SEND_MESSAGE, data).success(success).error(error);
    },
   get_messages: function (data, success, error) {
        $http.post(ServiceUrls.BASEURL + ServiceUrls.GET_MESSAGES, data).success(success).error(error);
    },
readMsg:function(config,msgId){

    var req = {
        ids: [msgId],
        fields: {
            message_status: "READ"
        }


    };
    var main=this;
    main.update_message_status(req, function (result) {
        if (result.success) {
            main.composemail(config);
            $rootScope.$broadcast('userMessageReadBroadcast', {});
            
        }


    }, function () {});
},
    update_message_status: function (data, success, error) {
        $http.post(ServiceUrls.BASEURL + ServiceUrls.CHANGE_MESSAGE_STATUS, data).success(success).error(error);
    },
    get_messages_count: function (data, success, error) {
        $http.post(ServiceUrls.BASEURL + ServiceUrls.GET_MESSAGES_COUNT, data).success(success).error(error);
    },
    get_requests_count: function (data, success, error) {
        $http.post(ServiceUrls.BASEURL + ServiceUrls.GET_REQUESTS_COUNT, data).success(success).error(error);
    },
    get_requests: function (data, success, error) {
        $http.post(ServiceUrls.BASEURL + ServiceUrls.GET_REQUESTS, data).success(success).error(error);
    },
    update_requests: function (data, success, error) {
        $http.post(ServiceUrls.BASEURL + ServiceUrls.UPDATE_REQUESTS, data).success(success).error(error);
    },
    check_user_currentuser: function (data, success, error) {
        $http.post(ServiceUrls.BASEURL + ServiceUrls.CHECK_USER_CURRENTUSER, data).success(success).error(error);
    },
    getParameterByName:function(name, url) {
        if (!url) {url = window.location.href};
        name = name.replace(/[\[\]]/g, "\\$&");
        var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),
            results = regex.exec(url);
        if (!results) {return null};
        if (!results[2]) {return ''};
        return decodeURIComponent(results[2].replace(/\+/g, " "));
    },
toaster_msg:function(msg){
    toastr.success(msg);

},
toaster_msg_error:function(msg){
    toastr.error(msg);

},
    composemail:function (config) {
        var modalInstance = $uibModal.open({
        animation: true,
       
        templateUrl: './app/messages/components/compose.mail.html',
        controller: 'composeMailController',
        controllerAs: '$ctrl',
        size: "lg",
        backdrop: 'static',
        keyboard: false,
        resolve: {
            config: function () {
                return config;
            }
        }
    
   });
 }


}
return service;

}
module.exports.$inject = ["$http", "toastr", "$sessionStorage", "$localStorage", "ServiceUrls", "$location", "$uibModal", "$rootScope"];    
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/app\\activites\\service\\activites.service.js","/app\\activites\\service")

},{"_process":"E:\\angualarjslibs\\node_modules\\process\\browser.js","buffer":"E:\\angualarjslibs\\node_modules\\buffer\\index.js"}],"E:\\angualarjslibs\\app\\activites\\service\\index.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
'use strict';
var angular = require('angular');

//services//
var activitesservice=require('./activites.service');

module.exports = angular.module('app.ui.activites.service', [])

.factory("activitesservice",activitesservice);
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/app\\activites\\service\\index.js","/app\\activites\\service")

},{"./activites.service":"E:\\angualarjslibs\\app\\activites\\service\\activites.service.js","_process":"E:\\angualarjslibs\\node_modules\\process\\browser.js","angular":"angular","buffer":"E:\\angualarjslibs\\node_modules\\buffer\\index.js"}],"E:\\angualarjslibs\\app\\admin\\admin.route.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
/* @ngInject */
module.exports = function adminRoutes(Router) {
    Router.configureRoutes([{
            name: "root.admindashboard",
            config: {
                url: '/admin',
                views: {
                    '@': {
                        templateUrl: "app/admin/home/dashboard/dashboard.html",
                        controller: "adminDashboardController as ctrl"
                    }
                },
                params: {
                    permisstion: "ADMIN"
                },
                title: ' Admin Dashboard'
            }
        },
        {
            name: "root.adduser",
            config: {
                url: '/adduser',
                views: {
                    '@': {
                        templateUrl: "app/admin/user/adduser/adduser.html",
                        controller: "addUserController as ctrl"
                    }
                },
                params: {
                    permisstion: "ADMIN"
                },
                title: ' User'
            }
        },
        {
            name: "root.viewusers",
            config: {
                url: '/viewusers',
                views: {
                    '@': {
                        templateUrl: "app/admin/user/viewuser/viewuser.html",
                        controller: "viewUserController as ctrl"
                    }
                },
                params: {
                    permisstion: "ADMIN",
                    userLoadType:null
                },
                title: 'view user'
            }
        },
        {
            name: "root.newuser",
            config: {
                url: '/newuser',
                views: {
                    '@': {
                        templateUrl: "app/admin/user/newuser.html",
                        controller: "newUserController as ctrl"
                    }
                },
                params: {
                    permisstion: "ADMIN"
                },
                title: 'New User'
            }
        },
        {
            name: "root.photoverificationuser",
            config: {
                url: '/pverification',
                views: {
                    '@': {
                        templateUrl: "app/admin/user/newuser.html",
                        controller: "PhotoVrController as ctrl"
                    }
                },
                params: {
                    permisstion: "ADMIN"
                },
                title: 'Photo Verification'
            }
        }
    ]);
};
module.exports.$inject = ["Router"];
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/app\\admin\\admin.route.js","/app\\admin")

},{"_process":"E:\\angualarjslibs\\node_modules\\process\\browser.js","buffer":"E:\\angualarjslibs\\node_modules\\buffer\\index.js"}],"E:\\angualarjslibs\\app\\admin\\home\\dashboard\\dashboard.ctrl.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
/* @ngInject */
module.exports = function adminDashboardController($viewusers, $translate,$location, $state) {
  var vm = this;

  vm.labels = [];

  vm.colors = ['#191ae2', '#75FF33', '#FF5733', '#FFBD33', '#DE8827', '#DBFF33', '#F05B05', '#14A23D', '#46BFBD', '#FF9999'];
  vm.data = [];
  vm.options = {
    legend: {
      display: false,
      position: 'top',
    },
    cutoutPercentage: 60,
    tooltipEvents: [],
    tooltipCaretSize: 0,
    showTooltips: true,
    onAnimationComplete: function () {
      self.showTooltip(self.segments, true);
    }
  };
  $viewusers.get_all_users_status_count(function (result) {
    vm.userStatusList = result[0];
    var graphCounts = result[0];
    for (var key in graphCounts) {
      if (key !== "_id") {
        var lab = $translate.instant(key);
        vm.labels.push(lab);
        vm.data.push(graphCounts[key]);
      }


    }




  }, function () {

  });
  vm.loadurl=function(key){

 $state.go('root.viewusers',{"userLoadType":key});
         // this.$router.navigate(['/viewusers']);

  };
};
module.exports.$inject = ["$viewusers", "$translate", "$location", "$state"];
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/app\\admin\\home\\dashboard\\dashboard.ctrl.js","/app\\admin\\home\\dashboard")

},{"_process":"E:\\angualarjslibs\\node_modules\\process\\browser.js","buffer":"E:\\angualarjslibs\\node_modules\\buffer\\index.js"}],"E:\\angualarjslibs\\app\\admin\\index.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
'use strict';
var angular = require('angular');
var adminroutes = require('./admin.route');
var adminDashboardController = require('./home/dashboard/dashboard.ctrl');
var addUserController = require('./user/adduser/addUser.ctrl');
var viewUserController = require('./user/viewuser/viewUser.ctrl');
var rejectController = require('./reject-modal/reject.ctrl');
var adminServices = require('./services');
var viewUserDirCtrl = require('./user/viewuser/viewUserDir.ctrl');
var userViewDirective = require('./user/viewuser/user-view-directive');
var editUserDir = require('./user/viewuser/edit.user.directive');
var editUserDirCtrl = require('./user/viewuser/edit.user.ctrl');
module.exports = angular.module('app.ui.admin', [adminServices.name])
    .run(adminroutes)
    .controller('adminDashboardController', adminDashboardController)
    .controller('addUserController', addUserController)
    .controller('viewUserController', viewUserController)
    .controller('rejectController', rejectController)
    .controller('viewUserDirCtrl', viewUserDirCtrl)
    .directive('userViewDirective', userViewDirective)
    .controller('editUserDirCtrl', editUserDirCtrl)
    .directive('editUserDirective', editUserDir);
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/app\\admin\\index.js","/app\\admin")

},{"./admin.route":"E:\\angualarjslibs\\app\\admin\\admin.route.js","./home/dashboard/dashboard.ctrl":"E:\\angualarjslibs\\app\\admin\\home\\dashboard\\dashboard.ctrl.js","./reject-modal/reject.ctrl":"E:\\angualarjslibs\\app\\admin\\reject-modal\\reject.ctrl.js","./services":"E:\\angualarjslibs\\app\\admin\\services\\index.js","./user/adduser/addUser.ctrl":"E:\\angualarjslibs\\app\\admin\\user\\adduser\\addUser.ctrl.js","./user/viewuser/edit.user.ctrl":"E:\\angualarjslibs\\app\\admin\\user\\viewuser\\edit.user.ctrl.js","./user/viewuser/edit.user.directive":"E:\\angualarjslibs\\app\\admin\\user\\viewuser\\edit.user.directive.js","./user/viewuser/user-view-directive":"E:\\angualarjslibs\\app\\admin\\user\\viewuser\\user-view-directive.js","./user/viewuser/viewUser.ctrl":"E:\\angualarjslibs\\app\\admin\\user\\viewuser\\viewUser.ctrl.js","./user/viewuser/viewUserDir.ctrl":"E:\\angualarjslibs\\app\\admin\\user\\viewuser\\viewUserDir.ctrl.js","_process":"E:\\angualarjslibs\\node_modules\\process\\browser.js","angular":"angular","buffer":"E:\\angualarjslibs\\node_modules\\buffer\\index.js"}],"E:\\angualarjslibs\\app\\admin\\reject-modal\\reject.ctrl.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
/* @ngInject */
module.exports = function rejectController($uibModal, $uibModalInstance, user, $rootScope) {

    var controller = this;
    controller.cancel = function () {
        $uibModalInstance.dismiss('cancel');
    };
    controller.user = user;

    controller.reasons = [
        {
            name: "Photo not clear",
            value: "PHOTO_NOT_CLEAR"

        },
        {
            name: "Photo uploaded but only side face is visible",
            value: "ONLY_SIDE_FACE_IS_VISIBLE"

        },
        {
            name: "Photo uploaded but watermarked with other sites",
            value: "WATERMARKED_WITH_OTHER_SITES"

        },
        {
            name: "Celebrity/cartoon/other photos uploaded by the user",
            value: "WRONG_PHOTO"

        },
        {
            name: "Other reason",
            value: "OTHER"

        }
    ];
controller.submit=function(form){

     $rootScope.$broadcast('rejectPhoto',user);
        controller.cancel();
};
    // controller.comunicateRegisterForm=function(type){

    //     if(type==="SKIP"){
    //      $rootScope.$emit('comRegViaGoMoreInfoMl',{
    //         type:"SKIP",
    //         user_id:user.user_id
    //     });
    //     }
    //     if(type==="ADDMOREINFO"){
    //      $rootScope.$emit('comRegViaGoMoreInfoMl', {
    //         type:"ADDMOREINFO",
    //         user_id:user.user_id
    //     });
    //     }
    //  controller.cancel();
    // };



};
module.exports.$inject = ["$uibModal", "$uibModalInstance", "user", "$rootScope"];
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/app\\admin\\reject-modal\\reject.ctrl.js","/app\\admin\\reject-modal")

},{"_process":"E:\\angualarjslibs\\node_modules\\process\\browser.js","buffer":"E:\\angualarjslibs\\node_modules\\buffer\\index.js"}],"E:\\angualarjslibs\\app\\admin\\services\\admin.task.service.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
/* @ngInject */
module.exports =function($http,ServiceUrls,$uibModal){
       
    return {
            acceptPhoto: function(data,success, error) {
                $http.post(ServiceUrls.BASEURL + ServiceUrls.ADMIN_ACCEPT_PHOTO,data).success(success).error(error);
            },
            openRejectModal:function(user){
                  var modalInstance = $uibModal.open({
                         animation: true,
                         windowClass: "login-model",
                         templateUrl: './app/admin/reject-modal/reject.modal.html',
                         controller: 'rejectController',
                         controllerAs: 'ctrl',
                         size: "lg",
                         backdrop: 'static',
                         keyboard: false,
                         resolve: {
                             user: function () {
                              return user;
                                }
                             }

        });
            }
            
        };
    };
    module.exports.$inject = ["$http", "ServiceUrls", "$uibModal"];
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/app\\admin\\services\\admin.task.service.js","/app\\admin\\services")

},{"_process":"E:\\angualarjslibs\\node_modules\\process\\browser.js","buffer":"E:\\angualarjslibs\\node_modules\\buffer\\index.js"}],"E:\\angualarjslibs\\app\\admin\\services\\index.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
'use strict';
var angular = require('angular');
var viewUsers=require('./view.users.service');
var admintaskservice=require('./admin.task.service');
module.exports = angular.module('app.ui.admin.services', [])
.factory("$viewusers",viewUsers)
.factory("$admintaskservice",admintaskservice);
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/app\\admin\\services\\index.js","/app\\admin\\services")

},{"./admin.task.service":"E:\\angualarjslibs\\app\\admin\\services\\admin.task.service.js","./view.users.service":"E:\\angualarjslibs\\app\\admin\\services\\view.users.service.js","_process":"E:\\angualarjslibs\\node_modules\\process\\browser.js","angular":"angular","buffer":"E:\\angualarjslibs\\node_modules\\buffer\\index.js"}],"E:\\angualarjslibs\\app\\admin\\services\\view.users.service.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
/* @ngInject */
module.exports =function($http,ServiceUrls){
       
    return {
         getUser: function(data,success, error) {
                $http.post(ServiceUrls.BASEURL + ServiceUrls.GET_USER,data).success(success).error(error);
            },
            getUsers: function(data,success, error) {
                $http.post(ServiceUrls.BASEURL + ServiceUrls.GET_USERS,data).success(success).error(error);
            },
             get_all_users_status_count: function(success, error) {
                $http.get(ServiceUrls.BASEURL + ServiceUrls.GET_ALL_USERS_STATUS_COUNT).success(success).error(error);
            },
             getallinActiveUsers: function(data,success, error) {
                $http.post(ServiceUrls.BASEURL + ServiceUrls.GETALL_ACTIVE_USERS,data).success(success).error(error);
            },
             getAllUsersGroupByPhotoStatus: function(data,success, error) {
                $http.post(ServiceUrls.BASEURL + ServiceUrls.GETALLUSERS_GROUPBY_PHOTO_STATUS,data).success(success).error(error);
            },
            getAllUsersGroupByPhotoStatusCount: function(success, error) {
                $http.get(ServiceUrls.BASEURL + ServiceUrls.GETALLUSERS_GROUPBY_PHOTO_STATUS_COUNT).success(success).error(error);
            },
            getAllUsersGroupByEmailVr: function(data,success, error) {
                $http.post(ServiceUrls.BASEURL + ServiceUrls.GETALLUSERS_GROUPBY_PENDING_EMAIL_VR,data).success(success).error(error);
            },
            getAllUsersGroupByEmailVrCount: function(success, error) {
                $http.get(ServiceUrls.BASEURL + ServiceUrls.GETALLUSERS_GROUPBY_PENDING_EMAIL_VR_COUNT).success(success).error(error);
            },
             pendingProfilesCount: function(success, error) {
                $http.get(ServiceUrls.BASEURL + ServiceUrls.PENDING_PROFILES_COUNT).success(success).error(error);
            },
            accept: function(data,success, error) {
                $http.post(ServiceUrls.BASEURL + ServiceUrls.ADMIN_ACCEPT,data).success(success).error(error);
            }
            
        };
    };
    module.exports.$inject = ["$http", "ServiceUrls"];
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/app\\admin\\services\\view.users.service.js","/app\\admin\\services")

},{"_process":"E:\\angualarjslibs\\node_modules\\process\\browser.js","buffer":"E:\\angualarjslibs\\node_modules\\buffer\\index.js"}],"E:\\angualarjslibs\\app\\admin\\user\\adduser\\addUser.ctrl.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
/* @ngInject */
module.exports = function addUserController(toastr, $state,$rootScope,$location) {
var controller=this;
controller.showRegisForm=true;
controller.showMoreInfodir=false;

 //toastr.success('I don\'t need a title to live');

        //listen from gotomorinfo modal
            $rootScope.$on('comRegViaGoMoreInfoMl', listenComRegViaGoMoreInfoMl);

  function listenComRegViaGoMoreInfoMl($event, msg){
      controller.user_id=msg.user_id;

         if(msg.type==="SKIP"){
          $state.go("root.viewusers");
        }
        if(msg.type==="ADDMOREINFO"){
           controller.showRegisForm=false;
           controller.showMoreInfodir=true;
        }

    
  }
};
module.exports.$inject = ["toastr", "$state", "$rootScope", "$location"];
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/app\\admin\\user\\adduser\\addUser.ctrl.js","/app\\admin\\user\\adduser")

},{"_process":"E:\\angualarjslibs\\node_modules\\process\\browser.js","buffer":"E:\\angualarjslibs\\node_modules\\buffer\\index.js"}],"E:\\angualarjslibs\\app\\admin\\user\\viewuser\\edit.user.ctrl.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
/* @ngInject */
module.exports = function editUserDirCtrl($scope, $rootScope, $viewusers, loginservice, $admintaskservice, toastr) {

    var controller = this;
};
module.exports.$inject = ["$scope", "$rootScope", "$viewusers", "loginservice", "$admintaskservice", "toastr"];
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/app\\admin\\user\\viewuser\\edit.user.ctrl.js","/app\\admin\\user\\viewuser")

},{"_process":"E:\\angualarjslibs\\node_modules\\process\\browser.js","buffer":"E:\\angualarjslibs\\node_modules\\buffer\\index.js"}],"E:\\angualarjslibs\\app\\admin\\user\\viewuser\\edit.user.directive.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
/* @ngInject */
module.exports = function ($http) {
    return {
        restrict: 'EA',
        scope:{
             viewType:"="
        },
        templateUrl: './app/admin/user/viewuser/edit.user.html',
        controller: 'editUserDirCtrl',
        controllerAs:'ctrl',
        link:function($scope, $element, $attrs){




        }
    };
};
module.exports.$inject = ["$http"];
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/app\\admin\\user\\viewuser\\edit.user.directive.js","/app\\admin\\user\\viewuser")

},{"_process":"E:\\angualarjslibs\\node_modules\\process\\browser.js","buffer":"E:\\angualarjslibs\\node_modules\\buffer\\index.js"}],"E:\\angualarjslibs\\app\\admin\\user\\viewuser\\user-view-directive.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
/* @ngInject */
module.exports = function () {
    return {
        restrict: 'EA',
        scope:{
             viewType:"="
        },
        templateUrl: './app/admin/user/viewuser/viewUserDir.html',
        controller: 'viewUserDirCtrl',
        controllerAs:'ctrl',
        link:function($scope, $element, $attrs){




        }
    };
};
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/app\\admin\\user\\viewuser\\user-view-directive.js","/app\\admin\\user\\viewuser")

},{"_process":"E:\\angualarjslibs\\node_modules\\process\\browser.js","buffer":"E:\\angualarjslibs\\node_modules\\buffer\\index.js"}],"E:\\angualarjslibs\\app\\admin\\user\\viewuser\\viewUser.ctrl.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
/* @ngInject */
module.exports = function viewUserController($rootScope, $viewusers, loginservice, $admintaskservice, toastr, $stateParams) {
    var controller = this;

    controller.actionCountPR = 0;
    controller.actionCountRP = 0;
    controller.actionCountAP = 0;
    controller.actionCountPEV = 0;
    controller.userStatusList = [];

controller.isEditUser=false;
    if ($stateParams.userLoadType) {
        controller.loadUserStatusType = $stateParams.userLoadType;
    }
    else {
        controller.loadUserStatusType = "TOTAL_USERS";
    }
    controller.loadusersCountList = function () {


        $viewusers.get_all_users_status_count(function (result) {

            controller.userStatusList = result[0];


        }, function () {

        });
    };
    controller.loadusersCountList();
    controller.setUserType = function (userStatus) {
        controller.loadUserStatusType = userStatus;
        controller.isEditUser=false;


    };
    controller.activeClass = function (type) {
        if (type === controller.loadUserStatusType) {
            return "active-list";
        }

    };
    
    var backUserFromEditMode = $rootScope.$on('backUserFromEditMode', function ($event, userId) {

       controller.editUserId="";
       controller.isEditUser=false;
       //controller.loadusersCountList();
      // controller.loadUserStatusType=controller.loadUserStatusType;
       

    });
    var userEditBoradcast = $rootScope.$on('userEditBoradcast', function ($event, userId) {

       controller.editUserId=userId;
       controller.isEditUser=true;
       

    });

    var updateUserListCountEmit = $rootScope.$on('updateUserListCountEmit', function ($event, actionTypeCount) {

        controller.loadusersCountList();


    });
    $rootScope.$on('$destroy', function () {

        updateUserListCountEmit();
        userEditBoradcast();
        backUserFromEditMode();
    });
};
module.exports.$inject = ["$rootScope", "$viewusers", "loginservice", "$admintaskservice", "toastr", "$stateParams"];
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/app\\admin\\user\\viewuser\\viewUser.ctrl.js","/app\\admin\\user\\viewuser")

},{"_process":"E:\\angualarjslibs\\node_modules\\process\\browser.js","buffer":"E:\\angualarjslibs\\node_modules\\buffer\\index.js"}],"E:\\angualarjslibs\\app\\admin\\user\\viewuser\\viewUserDir.ctrl.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
/* @ngInject */
module.exports = function viewUserDirCtrl($scope, $rootScope, $viewusers, loginservice, $admintaskservice, toastr) {

    var controller = this;
    controller.limit = 10;
    controller.total = 0;
    controller.page = 1;
    controller.pages = 0;
    controller.maxSize = 5;
    controller.userIds = [];
    controller.start = 0;
    controller.end = 0;
    var req = {
        page: controller.page,
        limit: controller.limit,
        searchType: ""
    };

    $scope.$watch('viewType', function (n, v) {
        if (!n) { return; }
        controller.viewType = n;
        req.searchType = n;
        req.page = 1;
        controller.loadViewType();
    });
    controller.loadViewType = function () {
        console.log("load userlist");
        controller.userIds = [];
        controller.selectedAll = false;


        $viewusers.getUsers(req, function (result) {

            setUserData(result);

        }, function () {

        });

    };


    controller.pageChanged = function () {

        controller.selectedAll = false;

        controller.page = controller.page;

        req.page = controller.page;
        controller.loadViewType();

    };


    function setUserData(result) {
        controller.users = [];
        controller.pages = result.pages;
        controller.total = result.total;
        controller.users = result.docs;

        controller.start = (controller.page - 1) * controller.limit + 1;
        controller.end = controller.start + result.docs.length - 1;
    }
    controller.checkAll = function () {
        controller.userIds = [];
        if (controller.selectedAll) {
            controller.selectedAll = true;
        } else {
            controller.selectedAll = false;
        }
        angular.forEach(controller.users, function (user) {
            user.Selected = controller.selectedAll;
            if (user.Selected) {
                controller.userIds.push(user.user_id);
            }

        });

    };
    controller.checkBoxSelect = function () {
        controller.userIds = [];
        angular.forEach(controller.users, function (user) {
            if (user.Selected) {
                controller.userIds.push(user.user_id);
            }


        });

    };


    var reqApprove = {
        loginuserid:$rootScope.login_user_id,
        user_ids: [],
        photo_type: "PROFILE",
        photo_vr: true,
        photo_approved_on: new Date(),
        photo_vr_msg: "APPROVED",

    };
    controller.accept = function (user) {

        reqApprove.user_ids = [user.user_id];
        acceptPhotoToServer(reqApprove, [user.user_id], "SINGLE", user.reffresh);


    };
    controller.acceptAll = function () {

        reqApprove.user_ids = controller.userIds;
        acceptPhotoToServer(reqApprove, controller.userIds, "ALL", true);


    };
    function acceptPhotoToServer(reqData, users, type, reffresh) {

        $admintaskservice.acceptPhoto(reqData, function (res) {


            if (res.result.nModified) {

                if (reqData.photo_vr_msg === "APPROVED") {
                    toastr.success('Successfully accepted');
                }
                if (reqData.photo_vr_msg === "REJECTED") {
                    toastr.success('Successfully rejected');
                }
                if (reffresh) {
                    controller.loadViewType();
                }

                $rootScope.$broadcast('updateUserListCountEmit', {});

            }

        }, function () { });
    }
    function resetUserList(usersIds, type) {
        controller.loadViewType();

        // angular.forEach(usersIds, function (user_ID) {

        //     controller.users = $.grep(controller.users, function (e) {

        //         return e.user_id !== user_ID;
        //     });
        //     controller.end = controller.end - 1;


        // });
        if (type === "ALL") {
            controller.userIds = [];
        }


    }

    controller.reject = function (user) {
        $admintaskservice.openRejectModal(user);

    };
    controller.toFeet = function (ft) {
        if (!ft) { return ""; }
        var inches = (ft * 0.393700787 * 30.48).toFixed(0);
        var feet = Math.floor(inches / 12);
        inches %= 12;

        return feet + " feet " + inches + ' Inc. ';
    };
    controller.openImageUploadWindow = function (user) {
        loginservice.openCropPopup(user);

    };

    controller.configScollBar = {
        autoHideScrollbar: true,
        theme: 'rounded-dark',
        axis: 'y',
        setHeight: 473,
        scrollInertia: 0,
        scrollButtons: {
            scrollAmount: 'auto', // scroll amount when button pressed 
            enable: true // enable scrolling buttons by default 
        },
        advanced: {
            updateOnContentResize: true
        }
    };

    controller.photoView = {
        pos: "top",
        templateUrl: './app/admin/user/viewuser/photo.view.html'

    };

    controller.popImg = function (index) {

        controller.ImgIndex = index;

    };
    controller.edit = function (user_ID) {

        $rootScope.$broadcast('userEditBoradcast', user_ID);

    };
    var backUserFromEditMode = $rootScope.$on('backUserFromEditMode', function ($event, user) {
        controller.loadViewType();

    });
    var userPhotoApprove = $rootScope.$on('userPhotoApprove', function ($event, user) {
        controller.accept(user);

    });
    var rejectPhoto = $rootScope.$on('rejectPhoto', function ($event, user) {
        var reqData = {
            loginuserid:$rootScope.login_user_id,
            user_ids: [user.user_id],
            photo_type: "PROFILE",
            photo_vr: false,
            photo_approved_on: new Date(),
            photo_vr_msg: "REJECTED",

        };
        console.log("reject Photo");
        acceptPhotoToServer(reqData, [user.user_id], "SINGLE", user.reffresh);


    });

    $rootScope.$on('$destroy', function () {

        rejectPhoto();
        backUserFromEditMode();
        userPhotoApprove();
    });

};
module.exports.$inject = ["$scope", "$rootScope", "$viewusers", "loginservice", "$admintaskservice", "toastr"];
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/app\\admin\\user\\viewuser\\viewUserDir.ctrl.js","/app\\admin\\user\\viewuser")

},{"_process":"E:\\angualarjslibs\\node_modules\\process\\browser.js","buffer":"E:\\angualarjslibs\\node_modules\\buffer\\index.js"}],"E:\\angualarjslibs\\app\\app.module.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
// Import angular dependencies
var angular = require('angular');
var uiRouter = require('angular-ui-router');
var ngCookies = require('angular-cookies');
var ngAnimate = require('angular-animate');
var ngMessages = require('angular-messages');
var moment = window.moment = require('moment');

require('ui-router-extras');
require('../node_modules/@iamadamjowett/angular-click-outside/clickoutside.directive');
require('moment-range');
require('ng-device-detector');
require('ng-idle');
require('ng-mask');
require('angular-ui-switch');
require('angular-ui-bootstrap');
require('angular-sanitize');
require('ui-select');
require('angularjs-toaster');
require('ng-scrollbars');
require('ngstorage');
require('ng-file-upload');
require('angular-chart.js');
require('angular-filter');
require('ng-image-gallery');
// App UI modules
var LoadingBarModule = require('./loading-bar');
var routerModule = require('./router');
var publicModule = require('./public');
var layoutsModule = require('./layouts');
var translateModule = require('./translate');
var myHomeModule = require('./my-home');
var registrationLoginModule = require('./registration-login');
var adminModule = require('./admin');
var matchesModule = require('./matches');
var messages = require('./messages');
var common = require('./common');
var search = require('./search');
var activites = require('./activites');
angular.module('app.ui', [
    uiRouter,
    ngCookies,
    ngAnimate,
    ngMessages,
    'ui.bootstrap',
    'ngSanitize',
    'ui.select',
    'toaster',
    'angular-click-outside',
    'ct.ui.router.extras',
    'ng.deviceDetector',
    'ngIdle',
    'ngMask',
    'uiSwitch',
    'ngScrollbars',
    'ngStorage',
    'ngFileUpload',
    'chart.js',
    'angular.filter',
    'thatisuday.ng-image-gallery',
    LoadingBarModule.name,
    translateModule.name,
    routerModule.name,
    publicModule.name,
    layoutsModule.name,
    common.name,
    myHomeModule.name,
    registrationLoginModule.name,
    adminModule.name,
    matchesModule.name,
    messages.name,
    search.name,
    activites.name

  
]).run(
    ['$rootScope', '$state', '$stateParams',
      function ($rootScope, $state, $stateParams) {
          $rootScope.$state = $state;
          $rootScope.$stateParams = $stateParams;
          
      }
    ]).config(['$cryptoProvider', function($cryptoProvider){
    $cryptoProvider.setCryptographyKey('DHOLBAAJE.COM');
}]).provider('$crypto', function CryptoKeyProvider() {
    var cryptoKey;

    this.setCryptographyKey = function(value) {
        cryptoKey = value;
    };

    this.$get = [function(){
        return {
            getCryptoKey: function() {
                return cryptoKey
            },

            encrypt: function(message, key) {

                if (key === undefined) {
                    key = cryptoKey;
                }

                return CryptoJS.AES.encrypt(message, key ).toString();
            },

            decrypt: function(message, key) {

                if (key === undefined) {
                    key = cryptoKey;
                }

                return CryptoJS.AES.decrypt(message, key).toString(CryptoJS.enc.Utf8)
            }
        }
    }];
});
// angular.element(document).ready(function() {
//     angular.bootstrap(document, ['app.ui']);
// });
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/app\\app.module.js","/app")

},{"../node_modules/@iamadamjowett/angular-click-outside/clickoutside.directive":"E:\\angualarjslibs\\node_modules\\@iamadamjowett\\angular-click-outside\\clickoutside.directive.js","./activites":"E:\\angualarjslibs\\app\\activites\\index.js","./admin":"E:\\angualarjslibs\\app\\admin\\index.js","./common":"E:\\angualarjslibs\\app\\common\\index.js","./layouts":"E:\\angualarjslibs\\app\\layouts\\index.js","./loading-bar":"E:\\angualarjslibs\\app\\loading-bar\\index.js","./matches":"E:\\angualarjslibs\\app\\matches\\index.js","./messages":"E:\\angualarjslibs\\app\\messages\\index.js","./my-home":"E:\\angualarjslibs\\app\\my-home\\index.js","./public":"E:\\angualarjslibs\\app\\public\\index.js","./registration-login":"E:\\angualarjslibs\\app\\registration-login\\index.js","./router":"E:\\angualarjslibs\\app\\router\\index.js","./search":"E:\\angualarjslibs\\app\\search\\index.js","./translate":"E:\\angualarjslibs\\app\\translate\\index.js","_process":"E:\\angualarjslibs\\node_modules\\process\\browser.js","angular":"angular","angular-animate":"angular-animate","angular-chart.js":"angular-chart.js","angular-cookies":"angular-cookies","angular-filter":"angular-filter","angular-messages":"angular-messages","angular-sanitize":"angular-sanitize","angular-ui-bootstrap":"angular-ui-bootstrap","angular-ui-router":"angular-ui-router","angular-ui-switch":"angular-ui-switch","angularjs-toaster":"angularjs-toaster","buffer":"E:\\angualarjslibs\\node_modules\\buffer\\index.js","moment":"moment","moment-range":"moment-range","ng-device-detector":"ng-device-detector","ng-file-upload":"ng-file-upload","ng-idle":"ng-idle","ng-image-gallery":"ng-image-gallery","ng-mask":"ng-mask","ng-scrollbars":"ng-scrollbars","ngstorage":"ngstorage","ui-router-extras":"ui-router-extras","ui-select":"ui-select"}],"E:\\angualarjslibs\\app\\common\\common.routes.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
/* @ngInject */
module.exports = function commonroutes(Router) {
    Router.configureRoutes([
        {
            name: "root.notifications",
            config: {
                url: '/notifications',
                views: {
                    '@': {
                        templateUrl: "app/common/notifications/notifications.html",
                        controller: "notificationController as $ctrl"
                    }
                },
                params: {
                    permisstion: "ALLUSER"
                },
                title: 'notifications'
            }
        },
        {
            name: "root.fullprofile",
            config: {
                url: '/fullprofile/:id',
                views: {
                    '@': {
                        templateUrl: "app/common/fullprofile/fullprofile.html",
                        controller: "fullprofileController as $ctrl"
                    }
                },
                params: {
                    permisstion: "ALLUSER",
                    isblock:false,
                },
                title: 'fullprofile'
            }
        },
        {
            name: "root.settings",
            config: {
                url: '/settings',
                views: {
                    '@': {
                        templateUrl: "app/common/settings/settings.html",
                        controller: "AccountSettingsController as $ctrl"
                    }
                },
                params: {
                    permisstion: "ALLUSER"
                },
                title: 'settings'
            }
        }
    ]);
};
module.exports.$inject = ["Router"];
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/app\\common\\common.routes.js","/app\\common")

},{"_process":"E:\\angualarjslibs\\node_modules\\process\\browser.js","buffer":"E:\\angualarjslibs\\node_modules\\buffer\\index.js"}],"E:\\angualarjslibs\\app\\common\\fullprofile\\fullprofile.ctrl.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
/* @ngInject */
module.exports = function fullprofileController($crypto,countryService, $state, useractions, searchService, $location, useractions, $scope, $timeout, $rootScope, loginservice, messagesservice) {
    var controller = this;

    var id = $crypto.decrypt($state.params.id);
  if(!id){
    $state.go("root.404");
    return;  
  }
    function loadCoun(array) {
        countryService.getCountries(function (res) {

            var arr = [];
            for (var i = 0; i < array.length; i++) {
                var itm = array[i];

                for (var j = 0; j < res.length; j++) {

                    if (itm === res[j].id) {

                        arr.push(res[j]);
                    }
                }

            }
            var prop = "name";

            controller.countries = (!!prop ? arr.map(function (item) {
                return item[prop];
            }) : arr).join(", ");
        }, function () { });
    }
    var req = {
        page: 1,
        limit: 1,
        gender: $rootScope.login_user_gender,
        search_user_id: id,
        fields: {

            user_id: $rootScope.login_user_id,
            blockprofile:($state.params.isblock==="BLOCK" ? true : false)
        }
    };
    controller.formdata = loginservice.getFiledsData();
    var pic = loginservice.getProfilePic();

    controller.loginuser = {
        pic: {
            displaypic: pic.profile
        }
    };
 
    var hindu = controller.formdata.rhindu;
    var muslim = controller.formdata.rmuslim;
    var christian = controller.formdata.rchristian;

    controller.casteData = [];
    controller.loadCaste = function (rel) {

        if (rel === "HINDU") {
            controller.casteData = hindu;
            return;
        }
        if (rel === "ISLAM") {
            controller.casteData = muslim;
            return;
        }
        if (rel === "CHR") {
            controller.casteData = christian;
            return;
        }

        controller.casteData = [{

            name: "Other",
            value: rel + "OTH"

        }];

    };
    controller.LoginUser = $rootScope.current_user_de_all;
  controller.matchCount=0;
    controller.getMatchCount = function (value, field) {
        if (!value) {
            return false;
        }
        if (field === "age") {


            if (value.from < controller.LoginUser.age && value.to > controller.LoginUser.age) {
                controller.matchCount++;
                return true;
            }

        }
        if (field === "height") {

            if (value.from < controller.LoginUser.userintrests[0].height && value.to > controller.LoginUser.userintrests[0].height) {
                controller.matchCount++;
                return true;
            }

        }
        if (field === "maritialstatus") {

            for (var m = 0; m < value.length; m++) {

                if (value[m] === controller.LoginUser.basicinfos[0].maritialstatus) {
                    controller.matchCount++;
                    return true;

                }

            }

        }
        if (field === "mothertounge") {

            for (var m = 0; m < value.length; m++) {

                if (value[m] === controller.LoginUser.basicinfos[0].mothertounge) {
                    controller.matchCount++;
                    return true;

                }

            }

        } if (field === "religion") {

            for (var m = 0; m < value.length; m++) {

                if (value[m] === controller.LoginUser.basicinfos[0].religion) {
                    controller.matchCount++;
                    return true;

                }

            }

        }
        if (field === "caste") {

            for (var m = 0; m < value.length; m++) {

                if (value[m].value === controller.LoginUser.basicinfos[0].caste) {
                    controller.matchCount++;
                    return true;

                }

            }

        }
        if (field === "country") {

            for (var m = 0; m < value.length; m++) {

                if (value[m] === controller.LoginUser.basicinfos[0].country) {
                    controller.matchCount++;
                    return true;

                }

            }

        }
        if (field === "state") {

            for (var m = 0; m < value.length; m++) {

                if (value[m].id === controller.LoginUser.basicinfos[0].state) {
                    controller.matchCount++;
                    return true;

                }

            }

        }
        if (field === "city") {

            for (var m = 0; m < value.length; m++) {

                if (value[m].id === controller.LoginUser.basicinfos[0].city) {
                    controller.matchCount++;
                    return true;

                }

            }

        } if (field === "physical_status") {

            for (var m = 0; m < value.length; m++) {

                if (value[m] === controller.LoginUser.userintrests[0].physical_status) {
                    controller.matchCount++;
                    return true;

                }

            }

        }
        if (field === "physical_status") {

            for (var m = 0; m < value.length; m++) {

                if (value[m] === controller.LoginUser.userintrests[0].physical_status) {
                    controller.matchCount++;
                    return true;

                }

            }

        }
        if (field === "high_edu") {

            for (var m = 0; m < value.length; m++) {

                if (value[m] === controller.LoginUser.usereducations[0].high_edu) {
                    controller.matchCount++;
                    return true;

                }

            }

        }
        if (field === "occupation") {

            for (var m = 0; m < value.length; m++) {

                if (value[m] === controller.LoginUser.usereducations[0].occupation) {
                    controller.matchCount++;
                    return true;

                }

            }

        }
        return false;
    };
    controller.getCalss = function (value, field) {
        if (!value) {
            return false;
        }
        if (field === "age") {


            if (value.from < controller.LoginUser.age && value.to > controller.LoginUser.age) {
                return true;
            }

        }
        if (field === "height") {

            if (value.from < controller.LoginUser.userintrests[0].height && value.to > controller.LoginUser.userintrests[0].height) {
                return true;
            }

        }
        if (field === "maritialstatus") {

            for (var m = 0; m < value.length; m++) {

                if (value[m] === controller.LoginUser.basicinfos[0].maritialstatus) {
                    return true;

                }

            }

        }
        if (field === "mothertounge") {

            for (var m = 0; m < value.length; m++) {

                if (value[m] === controller.LoginUser.basicinfos[0].mothertounge) {
                    return true;

                }

            }

        } if (field === "religion") {

            for (var m = 0; m < value.length; m++) {

                if (value[m] === controller.LoginUser.basicinfos[0].religion) {
                    return true;

                }

            }

        }
        if (field === "caste") {

            for (var m = 0; m < value.length; m++) {

                if (value[m].value === controller.LoginUser.basicinfos[0].caste) {
                    return true;

                }

            }

        }
        if (field === "country") {

            for (var m = 0; m < value.length; m++) {

                if (value[m] === controller.LoginUser.basicinfos[0].country) {
                    return true;

                }

            }

        }
        if (field === "state") {

            for (var m = 0; m < value.length; m++) {

                if (value[m].id === controller.LoginUser.basicinfos[0].state) {
                    return true;

                }

            }

        }
        if (field === "city") {

            for (var m = 0; m < value.length; m++) {

                if (value[m].id === controller.LoginUser.basicinfos[0].city) {
                    return true;

                }

            }

        } if (field === "physical_status") {

            for (var m = 0; m < value.length; m++) {

                if (value[m] === controller.LoginUser.userintrests[0].physical_status) {
                    return true;

                }

            }

        }
        if (field === "physical_status") {

            for (var m = 0; m < value.length; m++) {

                if (value[m] === controller.LoginUser.userintrests[0].physical_status) {
                    return true;

                }

            }

        }
        if (field === "high_edu") {

            for (var m = 0; m < value.length; m++) {

                if (value[m] === controller.LoginUser.usereducations[0].high_edu) {
                    return true;

                }

            }

        }
        if (field === "occupation") {

            for (var m = 0; m < value.length; m++) {

                if (value[m] === controller.LoginUser.usereducations[0].occupation) {
                    return true;

                }

            }

        }
        return false;
    };
    searchService.getSearchResult(req, function (result) {
        if(result.users.length===0){

            $state.go("root.404");
            return;
        }
        else{
            controller.user = result.users[0];
           
            var reqViewed= {
                user_id: $rootScope.login_user_id,
                request_user_id: controller.user.user_id,
                request_type: "VIEWED_PROFILE",
                request_status: (controller.user.is_user_by_block ==="BLOCK" ? "BLOCK" : "UNREAD")
        
              };
        if(!controller.user.is_viewed_profile){
            useractions.send_request(reqViewed, function (result) {}, function (error) { }); 
        }
              
        }
       
       useractions.genarateAlbumPics(controller.user.userinfo.albums,function(albums){

        controller.albums=albums;
        });
        
        controller.loadCaste(controller.user.religion);

        if (controller.user.userinfo.partner_pre) {
            controller.fieldPartnerPre = controller.user.userinfo.partner_pre.fields;
            loadCoun(controller.fieldPartnerPre.country);
            for(var key in  controller.fieldPartnerPre){
               
                controller.getMatchCount(controller.fieldPartnerPre[key],key);
            }
        }
        else {
           
            useractions.get_default_search_config("DEFAULT_PARTNER_PRE", controller.user, function (fields) {
              
                controller.fieldPartnerPre = fields;
                loadCoun(controller.fieldPartnerPre.country);
                for(var key in  controller.fieldPartnerPre){
                    controller.getMatchCount(controller.fieldPartnerPre[key],key);
                }
            });
        }
       
       

    }, function (error) { });
};
module.exports.$inject = ["$crypto", "countryService", "$state", "useractions", "searchService", "$location", "useractions", "$scope", "$timeout", "$rootScope", "loginservice", "messagesservice"];    
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/app\\common\\fullprofile\\fullprofile.ctrl.js","/app\\common\\fullprofile")

},{"_process":"E:\\angualarjslibs\\node_modules\\process\\browser.js","buffer":"E:\\angualarjslibs\\node_modules\\buffer\\index.js"}],"E:\\angualarjslibs\\app\\common\\index.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
'use strict';
var angular = require('angular');
var routes = require('./common.routes');
//services//
var userAction=require('./user.actions.service');
var socket=require('./socket.service');
var toastr=require('./toaster.service.js');
var notificationText=require('./notification-text');
var userImg=require('./user-img');
var notiAction=require('./noti-action');
var searchBy=require('./searchby.dir.js');
var AccountSettingsController = require('./settings/settings.ctrl');
var notificationController = require('./notifications/notifications.ctrl');
var fullprofileController = require('./fullprofile/fullprofile.ctrl');
var serachByController = require('./serachby.dir.ctrl');
var noinformation = require('./noinformation');
module.exports = angular.module('app.ui.common', [])
.run(routes)
.directive('notificationText', notificationText)
.directive('userImg', userImg)
.directive('notiAction', notiAction)
.directive('searchBy', searchBy)
.directive('noinformation', noinformation)
.controller('AccountSettingsController', AccountSettingsController)
.controller('notificationController', notificationController)  
.controller('fullprofileController', fullprofileController) 
.controller('serachByControllerDir', serachByController) 
.factory("useractions",userAction)
.factory("socket",socket)
.factory('toastr',toastr)
.directive('dontFill', function() {
    
      return {
    
        restrict: 'A',
    
        link: function link(scope, el, attrs) {
          // password fields need one of the same type above it (firefox)
          var type = el.attr('type') || 'text';
          // chrome tries to act smart by guessing on the name.. so replicate a shadow name
          var name = el.attr('name') || '';
          var shadowName = name + '_shadow';
          // trick the browsers to fill this innocent silhouette
          var shadowEl = angular.element('<input type="' + type + '" name="' + shadowName + '" style="display: none">');
    
          // insert before
          el.parent()[0].insertBefore(shadowEl[0], el[0]);
        }
    
      };
    
    });
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/app\\common\\index.js","/app\\common")

},{"./common.routes":"E:\\angualarjslibs\\app\\common\\common.routes.js","./fullprofile/fullprofile.ctrl":"E:\\angualarjslibs\\app\\common\\fullprofile\\fullprofile.ctrl.js","./noinformation":"E:\\angualarjslibs\\app\\common\\noinformation.js","./noti-action":"E:\\angualarjslibs\\app\\common\\noti-action.js","./notification-text":"E:\\angualarjslibs\\app\\common\\notification-text.js","./notifications/notifications.ctrl":"E:\\angualarjslibs\\app\\common\\notifications\\notifications.ctrl.js","./searchby.dir.js":"E:\\angualarjslibs\\app\\common\\searchby.dir.js","./serachby.dir.ctrl":"E:\\angualarjslibs\\app\\common\\serachby.dir.ctrl.js","./settings/settings.ctrl":"E:\\angualarjslibs\\app\\common\\settings\\settings.ctrl.js","./socket.service":"E:\\angualarjslibs\\app\\common\\socket.service.js","./toaster.service.js":"E:\\angualarjslibs\\app\\common\\toaster.service.js","./user-img":"E:\\angualarjslibs\\app\\common\\user-img.js","./user.actions.service":"E:\\angualarjslibs\\app\\common\\user.actions.service.js","_process":"E:\\angualarjslibs\\node_modules\\process\\browser.js","angular":"angular","buffer":"E:\\angualarjslibs\\node_modules\\buffer\\index.js"}],"E:\\angualarjslibs\\app\\common\\noinformation.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
/* @ngInject */
module.exports = function () {
    return {
        restrict: 'E',
        templateUrl:'./app/common/noinformation.html',
        controllerAs:'$ctrl',
        scope:{
           type:"@"
        },
        
        controller: [
            '$scope',
            '$element',
            '$attrs',
            function ($scope, $element, $attrs) {
                var controller=this;
                $scope.$watch('type', function (newVal, oldVal) {
                    if (!newVal) {
                        return;
                    }
                    
                    controller.type = newVal;
                });
                

            }]
        }
    };
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/app\\common\\noinformation.js","/app\\common")

},{"_process":"E:\\angualarjslibs\\node_modules\\process\\browser.js","buffer":"E:\\angualarjslibs\\node_modules\\buffer\\index.js"}],"E:\\angualarjslibs\\app\\common\\noti-action.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
/* @ngInject */
module.exports = function () {
    return {
        restrict: 'E',
        templateUrl:'./app/common/noti-action.html',
        controllerAs:'$ctrl',
        scope:{
            data:"=",
            whoSent:"="
           

        },
        
        controller: [
            '$scope',
            '$element',
            '$attrs',
            function ($scope, $element, $attrs) {
                var controller=this;
                controller.noti=$scope.data;
                controller.whoSent=$scope.whoSent;
                

            }]
        }
    };
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/app\\common\\noti-action.js","/app\\common")

},{"_process":"E:\\angualarjslibs\\node_modules\\process\\browser.js","buffer":"E:\\angualarjslibs\\node_modules\\buffer\\index.js"}],"E:\\angualarjslibs\\app\\common\\notification-text.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
/* @ngInject */
module.exports = function () {
    return {
        restrict: 'E',
        templateUrl:'./app/common/notification-text.html',
        controllerAs:'$ctrl',
        scope:{
            notification:"=",
            whoSent:"=",
            section:"="

        },
        
        controller: [
            '$scope',
            '$element',
            '$attrs',
            function ($scope, $element, $attrs) {
                var controller=this;
              
               controller.notification=$scope.notification;
               controller.whoSent=$scope.whoSent;
               controller.section=$scope.section;
            }]
        }
    }
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/app\\common\\notification-text.js","/app\\common")

},{"_process":"E:\\angualarjslibs\\node_modules\\process\\browser.js","buffer":"E:\\angualarjslibs\\node_modules\\buffer\\index.js"}],"E:\\angualarjslibs\\app\\common\\notifications\\notifications.ctrl.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
/* @ngInject */
module.exports = function notificationController($location,useractions,$scope,$timeout,$rootScope,loginservice,messagesservice) {
    var controller = this;
    controller.limit = 10;
    controller.total = 0;
    controller.page = 1;
    controller.pages = 0;
    controller.maxSize = 5;
    controller.requestIds = [];
    controller.start = 0;
    controller.end = 0;
    var req = {
        user_id: $rootScope.login_user_id,
        page: controller.page,
        limit: controller.limit,
        status: "READ"
       
    };
    controller.loadViewType = function () {
        
        controller.requestIds = [];
        controller.selectedAll = false;


        useractions.get_notifications(req, function (notifications) {

            setMessagesData(notifications);

        }, function () {

        });

    };

    controller.loadViewType();
    controller.pageChanged = function () {

        controller.selectedAll = false;

        controller.page = controller.page;

        req.page = controller.page;
        controller.loadViewType();

    };


    function setMessagesData(result) {
        controller.notificatins = [];
        controller.pages = result.pages;
        controller.total = result.total;
        controller.notificatins = result.docs;

        controller.start = (controller.page - 1) * controller.limit + 1;
        controller.end = controller.start + result.docs.length - 1;
    }
    



    controller.configScollBar = {
        autoHideScrollbar: true,
        theme: 'rounded-dark',
        axis: 'y',
        setHeight: 473,
        scrollInertia: 0,
        scrollButtons: {
            scrollAmount: 'auto', // scroll amount when button pressed 
            enable: true // enable scrolling buttons by default 
        },
        advanced: {
            updateOnContentResize: true
        }
    };

    

    function broadcastComplete() {
        controller.loadViewType();
        $rootScope.$broadcast('userRequestsBroadcastUpdate', {});
    }
    controller.action = function (target,ids) {
        var req = {
            ids: ids,
            update_type:"UPDATE",
            request_type:$scope.requestType,
            fields: {}


        };

        if (target === "ACCEPTED") {
            req.fields = {
                "request_action": "ACCEPTED",
                "recived_on":new Date()

            }
        }
        if (target === "PENDING") {
            req.fields = {
                "request_action": "PENDING",
                "recived_on":new Date()

            }
        }
        if (target === "REJECTED") {
            req.fields = {
                "request_action": "REJECTED",
                "recived_on":new Date()

            }
        }
        if (target === "DELETEFOREVRYONE") {
            req.fields = {
                "creater_response": "DELETEFOREVRYONE",
                "recived_on":new Date()

            }
        }
        if (target === "DELETEFORME") {
            req.fields = {
                "creater_response": "DELETEFORME",
                "recived_on":new Date()

            }
        }

        if (target === "DELETE") {


            req.fields = {
                "reciver_response": "DELETE",
                "recived_on":new Date()

            }
        }

        var modalInstance = $uibModal.open({
            animation: true,
            windowClass: "",
            templateUrl: './app/popuptemplates/delete.modal.html',
            controller: ["$scope", function ($scope) {
                var main = this;
                main.type="PROCEED";
                main.yes = function () {
                    finalaction();
                }
                main.no = function () {
                    modalInstance.dismiss('cancel');
                }


            }],
            controllerAs: '$ctrl',
            size: "lg",
            backdrop: 'static',
            keyboard: false,
            resolve: {

            }

        });

        function finalaction() {
            messagesservice.update_requests(req, function (result) {
                if (result.success) {
                    messagesservice.toaster_msg("Successfully updated");
                    modalInstance.dismiss('cancel');
                    broadcastComplete();
                }


            }, function () {

            });

        }

    }
   
    controller.openReq=function(noti){
        useractions.openReq(noti);
    
    };

};
module.exports.$inject = ["$location", "useractions", "$scope", "$timeout", "$rootScope", "loginservice", "messagesservice"];
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/app\\common\\notifications\\notifications.ctrl.js","/app\\common\\notifications")

},{"_process":"E:\\angualarjslibs\\node_modules\\process\\browser.js","buffer":"E:\\angualarjslibs\\node_modules\\buffer\\index.js"}],"E:\\angualarjslibs\\app\\common\\searchby.dir.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
/* @ngInject */
module.exports = function () {
    return {
        restrict: 'E',
        templateUrl:function(elem,attrs){
          
if(attrs.type==="SM"){
    return './app/common/search.sm.html';
}if(attrs.type==="LG"){
    return './app/common/searchby.lg.html';
}
           
        },
        controllerAs:'$ctrl',
        scope:{
           
         getFields:"&",
         type:"@",
         fields:"=",
         partnerPre:"="
        },
        
        controller: "serachByControllerDir"
        }
    }
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/app\\common\\searchby.dir.js","/app\\common")

},{"_process":"E:\\angualarjslibs\\node_modules\\process\\browser.js","buffer":"E:\\angualarjslibs\\node_modules\\buffer\\index.js"}],"E:\\angualarjslibs\\app\\common\\serachby.dir.ctrl.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
/* @ngInject */
module.exports = function serachByControllerDir($scope, $state,$rootScope, countryService, loginservice, searchService) {
    var controller = this;
    controller.user = $rootScope.current_user_de_all;
    controller.partnerPre=$scope.partnerPre;
    controller.serachModel = {
        user_id: $rootScope.login_user_id,
        age: {

            from: 0,
            to: 0
        },
        height: {

            from: 0,
            to: 0
        },
        maritialstatus: [],
        mothertounge: [],
        religion: [],
        caste: [],
        country: [],
        state: [],
        city: [],
        physical_status: ["ANY"],
        complexion: ["ANY"],
        occupation: ["ANY"],
        aincome: ["ANY"],
        expectation: ["ANY"],
        high_edu: ["ANY"],
        body_type: ["ANY"],
        horoscope: ["ANY"],
        showprofile: ["ANY_1"],
        created_by: ["ANY_2"],
        dontshow: ["ANY_3"]
    };
    controller.showProfile = [
        {
            id: "0",
            value: "ANY_1",
            name: "Doesn't matter"

        },
        {

            value: "WITHPHOTO",
            name: "With Photo"
        },
        {

            value: "ONLINE",
            name: "Online Right Now"
        },
        {

            value: "GOLDUSER",
            name: "Premium Members"
        }

    ];
    controller.PostedBy = [
        {
            id: "1",
            value: "ANY_2",
            name: "Doesn't matter"

        }
    ];
    controller.dontShow = [
        {
            id: "1",
            value: "ANY_3",
            name: "Doesn't matter"

        },
        {

            value: "VIEWED_PROFILE",
            name: "Viewed Profiles"
        },
        {

            value: "LIKED",
            name: "Liked Profiles"
        }

    ];

    function setLocation() {
        var country = $rootScope.current_user_de_all.basicinfos[0].country;
        var state = $rootScope.current_user_de_all.basicinfos[0].state;
        var city = $rootScope.current_user_de_all.basicinfos[0].city;
        var loc = {
            cn: country,
            st: state,
            ci: city
        };
        controller.serachModel.country = [country];
        countryService.getUserLoc(loc, function (result) {

            var coun = {
                id: result.id,
                name: result.name,
                sortname: result.sortname
            };
            loadST(coun);
            controller.serachModel.state = [{
                id: result.state.id,
                name: result.state.name,
                country_id: result.id,
                cname: result.name
            }];
            var st = {
                id: result.state.id,
                name: result.state.name,
                country_id: result.id

            };
            loadCT(st);
            controller.serachModel.city = [{
                id: result.city.id,
                name: result.city.name,
                country_id: result.id,
                state_id: result.state.id,
                sname: result.state.name
            }];
        }, function () { });
    }
    function setUserAgeHeightInformation() {
        //age and height//
        var age = controller.user.age;
        var height = controller.user.userintrests[0].height;
        if (controller.user.gender === "MALE") {
            controller.serachModel.age.from = 18;
            controller.serachModel.age.to = age;
            controller.serachModel.height.from = 4;
            controller.serachModel.height.to = height;


        }
        if (controller.user.gender === "FEMALE") {
            controller.serachModel.age.from = age;
            controller.serachModel.age.to = 60;
            controller.serachModel.height.from = height;
            controller.serachModel.height.to = 6.11;


        }
    }
    function setUserBasciInfo() {
        var basic = controller.user.basicinfos[0];

        controller.serachModel.maritialstatus = [basic.maritialstatus];
        controller.serachModel.mothertounge = [basic.mothertounge];
        controller.serachModel.religion = [basic.religion];
        setRelegionAndCaste(basic.religion, basic.caste, true);


    }
    function setRelegionAndCaste(rel, caste, type) {
        angular.forEach(controller.formdata.religions, function (item, value) {

            if (item.value === rel) {

                controller.loadCaste(item);
                if (type) {
                    setCasteValue(caste, item);
                }

            }

        });
    }
    function setCasteValue(caste, rel) {

        if (rel.value === "HINDU") {
            angular.forEach(controller.formdata.rhindu, function (item, value) {
                if (item.value === caste) {

                    controller.serachModel.caste = [{
                        rname: rel.name,
                        religion: rel.value,
                        name: item.name,
                        value: item.value

                    }];
                    return;
                }

            });


        }
        if (rel.value === "ISLAM") {
            angular.forEach(controller.formdata.rmuslim, function (item, value) {
                if (item.value === caste) {

                    controller.serachModel.caste = [{
                        rname: rel.name,
                        religion: rel.value,
                        name: item.name,
                        value: item.value

                    }];
                    return;
                }

            });
        }
        if (rel.value === "CHR") {
            angular.forEach(controller.formdata.rchristian, function (item, value) {
                if (item.value === caste) {

                    controller.serachModel.caste = [{
                        rname: rel.name,
                        religion: rel.value,
                        name: item.name,
                        value: item.value

                    }];
                    return;
                }

            });
        }

        if (rel.value + "OTH" === caste) {
            controller.serachModel.caste = [{
                rname: rel.name,
                religion: rel.value,
                name: "Other",
                value: caste

            }];

        }


    }
    function setOtherInfo() {
        var edu = controller.user.usereducations[0];
        var interest = controller.user.userintrests[0];
        var family = controller.user.userfamilies[0];
        //education//
        controller.serachModel.high_edu = [edu.high_edu];
        controller.serachModel.occupation = [edu.occupation];
        // interest//

        controller.serachModel.complexion = interest.complexion ? [interest.complexion] : ["ANY"];
        controller.serachModel.physical_status = [interest.physical_status];
        controller.serachModel.body_type = interest.body_type ? [interest.body_type] : ["ANY"];
        controller.serachModel.expectation = interest.expectation ? [interest.expectation] : ["ANY"];
        //family//
        controller.serachModel.horoscope = family.horoscope ? [family.horoscope] : ["ANY"];
        controller.serachModel.aincome = family.aincome ? [family.aincome] : ["ANY"];

    }

    controller.check = function (item1, data, any) {

        if (item1.value === any && item1.selected) {
            angular.forEach(data, function (item) {

                if (item.value != any) {
                    item.selected = false;

                }

            });
        }

        else {
            angular.forEach(data, function (item) {

                if (item.value === any) {
                    item.selected = false;

                }

            });
        }

        if (any === "ANY_1") {
            controller.serachModel.showprofile = [];
            angular.forEach(data, function (item, value) {

                if (item.selected) {
                    controller.serachModel.showprofile.push(item.value);

                }

            });

        }

        if (any === "ANY_2") {
            controller.serachModel.created_by = [];
            angular.forEach(data, function (item, value) {

                if (item.selected) {
                    controller.serachModel.created_by.push(item.value);

                }

            });

        }
        if (any === "ANY_3") {
            controller.serachModel.dontshow = [];
            angular.forEach(data, function (item, value) {

                if (item.selected) {
                    controller.serachModel.dontshow.push(item.value);

                }

            });

        }

    };
    var empty = [{
        name: "Doesn't matter",
        value: "ANY"
    }];
    var empty2 = [{
        name: "Doesn't matter",
        id: "ANY"
    }];
    var allObj = {
        name: "Doesn't matter",
        id: "ANY"
    };
    function isInArray(value, array) {
        return array.indexOf(value) > -1;
    }
    var formdata = loginservice.getFiledsData();
    controller.formdata = angular.copy(formdata);
    controller.PostedBy=controller.PostedBy.concat(controller.formdata.created_by);
    controller.formdata.hobbies = empty.concat(controller.formdata.hobbies);
    controller.formdata.zodiac = empty.concat(controller.formdata.zodiac);
    controller.formdata.mother_tongues = empty.concat(controller.formdata.mother_tongues);
    controller.formdata.religions = empty.concat(controller.formdata.religions);
    controller.formdata.educations = empty.concat(controller.formdata.educations);
    controller.formdata.studies = empty.concat(controller.formdata.studies);
    controller.formdata.MaritialStatus = empty.concat(controller.formdata.MaritialStatus);
    controller.formdata.complexion = empty.concat(controller.formdata.complexion);
    controller.formdata.BodyType = empty.concat(controller.formdata.BodyType);
    controller.formdata.PhysicalStatus = empty.concat(controller.formdata.PhysicalStatus);
    controller.formdata.occupations = empty.concat(controller.formdata.occupations);
    controller.formdata.Expectation = empty.concat(controller.formdata.Expectation);
    controller.formdata.Horoscope = empty.concat(controller.formdata.Horoscope);
    controller.formdata.aincome = empty.concat(controller.formdata.aincome);

    controller.onSelectCallback = function (item, model, g) {

        if (model === "ANY") {
            controller.serachModel[g] = ["ANY"]
        }
        else {

            if (isInArray("ANY", controller.serachModel[g])) {
                var index = controller.serachModel[g].indexOf("ANY");
                controller.serachModel[g].splice(index, 1);
            }
        }



    };

    //location//
    controller.countrys = [];
    controller.states = [];
    controller.cities = [];
    controller.DisabledState = true;
    controller.DisabledCity = true;
    function loadCountries(){
        countryService.getCountries(function (res) {
            controller.countrys = empty2.concat(res);
            controller.states = empty2.concat([]);
            controller.cities = empty2.concat([]);
        }, function () { });
    }
    
    controller.onSelectCallbackCounry = function (item, model, g) {

        if (model === "ANY") {
            controller.serachModel[g] = ["ANY"];
            controller.serachModel.state = [allObj];
            controller.serachModel.city = [allObj];
            controller.DisabledState = true;
            controller.DisabledCity = true;
        }
        else {

            if (isInArray("ANY", controller.serachModel[g])) {
                var index = controller.serachModel[g].indexOf("ANY");
                controller.serachModel[g].splice(index, 1);

            }


            loadST(item);
        }
    };
    controller.removedCountry = function (item, model, g) {
        if (g === "country") {
            removeState(item);
        }
        if (g === "state") {
            removeCity(item);
        }

    };
    function removeState(item) {
        controller.states = $.grep(controller.states, function (e) {
            return e.country_id != item.id;
        });
        controller.serachModel.state = $.grep(controller.serachModel.state, function (e) {
            return e.country_id != item.id;
        });
        controller.cities = $.grep(controller.cities, function (e) {
            return e.country_id != item.id;
        });
        controller.serachModel.city = $.grep(controller.serachModel.city, function (e) {
            return e.country_id != item.id;
        });
        if (controller.serachModel.country.length === 0) {
            controller.DisabledState = true;
            controller.DisabledCity = true;
            controller.serachModel.state = [];
            controller.serachModel.city = [];
        }
    }
    function removeCity(item) {
        controller.cities = $.grep(controller.cities, function (e) {
            return e.state_id != item.id;
        });
        controller.serachModel.city = $.grep(controller.serachModel.city, function (e) {
            return e.state_id != item.id;
        });


        if (controller.serachModel.state.length === 0) {

            controller.DisabledCity = true;
            controller.serachModel.city = [];
        }
    }
    controller.onSelectCallbackState = function (item, model, g) {
        if (item.id === "ANY") {
            controller.serachModel[g] = [allObj];
            // controller.serachModel.state = ["ANY"];
            controller.serachModel.city = [allObj];
            // controller.DisabledState=true;
            controller.DisabledCity = true;


        }
        else {

            controller.serachModel.state = $.grep(controller.serachModel.state, function (e) {
                return e.id != "ANY";
            });




            loadCT(item);
        }


    };

    function loadST(target) {
      
       
        if (controller.serachModel.country.length === 0) {
            controller.DisabledState = true;
            controller.DisabledCity = true;
            controller.serachModel.state = [];
            controller.serachModel.city = [];
            return;
        }else{
            controller.DisabledState = false;
            controller.DisabledCity = false;
        }

        if (controller.serachModel.state.length === 0 ) {
            controller.DisabledCity = true;
        }
        else{
            controller.DisabledCity = false;
        }
        var code = target.id;
        var cname = target.name;
     
        countryService.getStates(code, function (res) {

            if (res.length > 0) {
                for (var key in res) {
                    res[key].cname = cname;

                }
            }

            controller.states = controller.states.concat(res);


        }, function () { });


    }
    function loadCT(target) {

        if (controller.serachModel.state.length === 0) {
            controller.DisabledCity = true;
            controller.serachModel.city = [];
            return;
        }else{
            controller.DisabledCity = false;
        }
       
        var code = target.id;
        var sname = target.name;
        var country_code = target.country_id;
        countryService.getCities(code, function (res) {
            if (res.length > 0) {
                for (var key in res) {
                    res[key].sname = sname;
                    res[key].country_id = country_code;
                }
            }

            controller.cities = controller.cities.concat(res);
        }, function () { });



    }
    controller.onSelectCallbackCity = function (item, model, g) {

        if (item.id === "ANY") {
            controller.serachModel[g] = [allObj];
        }
        else {

            controller.serachModel.city = $.grep(controller.serachModel.city, function (e) {
                return e.id != "ANY";
            });


        }

    };
    //relegion caste//
    controller.casteDisabled = true;
    controller.onSelectCallbackRelgion = function (item, model, g) {

        if (model === "ANY") {
            controller.serachModel[g] = ["ANY"];
            controller.serachModel.caste = empty.concat([]);
            controller.casteDisabled = true;
        }
        else {

            if (isInArray("ANY", controller.serachModel[g])) {
                var index = controller.serachModel[g].indexOf("ANY");
                controller.serachModel[g].splice(index, 1);
            }

            controller.loadCaste(item);

        }



    };
    controller.removedRL = function (item, model, g) {

        controller.casteData = $.grep(controller.casteData, function (e) {
            return e.religion != model;
        });
        controller.serachModel.caste = $.grep(controller.serachModel.caste, function (e) {
            return e.religion != model;
        });


        if (controller.serachModel.religion.length === 0) {
            controller.casteDisabled = true;
            controller.serachModel.caste = [];
        }

    };
    var hindu = controller.formdata.rhindu;
    var muslim = controller.formdata.rmuslim;
    var christian = controller.formdata.rchristian;
    controller.casteData = empty.concat([]);
    controller.loadCaste = function (item) {
        controller.casteData = empty.concat([]);
        if (controller.serachModel.religion.length === 0) {
            controller.casteDisabled = true;
            return;
        }
        controller.casteDisabled = false;
        var arr = load(item.value, item.name);
        controller.casteData = controller.casteData.concat(arr);


        function load(rel, rname) {
            var temp = [];
            if (rel === "HINDU") {

                for (var key in hindu) {
                    hindu[key].rname = rname;
                    hindu[key].religion = rel;
                }
                temp = hindu;
                return temp;
            }
            if (rel === "ISLAM") {
                for (var key in muslim) {
                    muslim[key].rname = rname;
                    muslim[key].religion = rel;
                }
                temp = muslim;
                return temp;
            }
            if (rel === "CHR") {
                for (var key in christian) {
                    christian[key].rname = rname;
                    christian[key].religion = rel;
                }
                temp = christian;
                return temp;
            }

            return [{
                rname: rname,
                religion: rel,
                name: "Other",
                value: rel + "OTH"

            }];

        }


    };
    controller.onSelectCallbackCaste = function (item, model, g) {

        if (item.value === "ANY") {

            controller.serachModel.caste = empty.concat([]);
        }
        else {

            controller.serachModel.caste = $.grep(controller.serachModel.caste, function (e) {

                return e.value != "ANY";

            });


        }

    };
    function setMore() {
        angular.forEach(controller.PostedBy, function (itm, value) {

            itm.selected = false;
        });
        angular.forEach(controller.serachModel.created_by, function (item, value) {
            angular.forEach(controller.PostedBy, function (itm, value) {

                if (itm.value === item) {
                    itm.selected = true;

                }
                else {
                    //  itm.selected=false;
                }

            });


        });
        angular.forEach(controller.showProfile, function (itm, value) {

            itm.selected = false;
        });
        angular.forEach(controller.serachModel.showprofile, function (item, value) {
            angular.forEach(controller.showProfile, function (itm, value) {

                if (itm.value === item) {
                    itm.selected = true

                } else {
                    //  itm.selected=false;
                }

            });


        });
        angular.forEach(controller.dontShow, function (itm, value) {

            itm.selected = false;
        });
        angular.forEach(controller.serachModel.dontshow, function (item, value) {
            angular.forEach(controller.dontShow, function (itm, value) {

                if (itm.value === item) {
                    itm.selected = true

                }
                else {
                    //  itm.selected=false;
                }
            });


        });
    }
   
    function loadlocationAndCaste() {
       for(var kj=0;kj<controller.serachModel.religion.length;kj++) {
           var itm=controller.serachModel.religion[kj];
            if(itm==="ANY"){
               
                controller.casteDisabled = true;
            }
else{
    setRelegionAndCaste(itm, "", false);
}
           

        }
        countryService.getCountries(function (res) {
            controller.countrys = empty2.concat(res);
            controller.states = empty2.concat([]);
            controller.cities = empty2.concat([]);
            controller.DisabledState = false;
            function getStateForCountry(cid){
            for(var j=0;j<res.length;j++) {
                var item=res[j];

              if (item.id === cid) {
                  var coun = {
                      id: item.id,
                      name: item.name,
                      sortname: item.sortname
                  };
                 
                  loadST(coun);
                 
              }

          }
        }
          for(var i=0;i<controller.serachModel.country.length;i++) {
            var cn=controller.serachModel.country[i];
            if(cn==="ANY"){
            
                controller.DisabledState = true;
                controller.DisabledCity = true;
             
            }

               else{
                getStateForCountry(cn);
        }
        }
        }, function () { });
       
       
       for(var k=0;k<controller.serachModel.state.length;k++) {
           var state=controller.serachModel.state[k];
            if(state.id==="ANY"){
                
                    controller.DisabledState = false;
                    controller.DisabledCity = true;
                  
                }else{
                    loadCT(state);
                }
           

        }


    }
   
    controller.search = function () {
        
    if(controller.partnerPre){
        $scope.getFields({fields:controller.serachModel});
    }
    else{
        searchService.saveSearch(controller.serachModel,function(result){
            if($state.current.name!=="root.search_result"){
                $state.go('root.search_result', {fields:controller.serachModel});
              }else{
                $scope.getFields({fields:controller.serachModel});
              }
               
            },function(error){});
    }
      

    }

    controller.reset = function () {
        controller.serachModel = {
            user_id: $rootScope.login_user_id,
            age: {

                from: 18,
                to: 60
            },
            height: {

                from: 4,
                to: 6.11
            },
            maritialstatus: ["ANY"],
            mothertounge: ["ANY"],
            religion: ["ANY"],
            caste: empty,
            country: ["ANY"],
            state: empty2,
            city: empty2,
            physical_status: ["ANY"],
            complexion: ["ANY"],
            occupation: ["ANY"],
            aincome: ["ANY"],
            expectation: ["ANY"],
            high_edu: ["ANY"],
            body_type: ["ANY"],
            horoscope: ["ANY"],
            showprofile: ["ANY_1"],
            created_by: ["ANY_2"],
            dontshow: ["ANY_3"]
        };
        setMore();
        controller.DisabledState = true;
        controller.DisabledCity = true;
        controller.casteDisabled = true;
    };

    $scope.$watch('fields', function (n, v) {
        
        if (!n) { return; }
        if(n==="FIRST"){
            loadCountries();
            setUserAgeHeightInformation();
            setUserBasciInfo();
            setOtherInfo();
            setLocation();
           

        }

        if(n==="PARTNER_PRE_FIRST" && controller.partnerPre){
            loadCountries();
            setUserAgeHeightInformation();
            setUserBasciInfo();
            //setOtherInfo();
            setLocation();
           // setMore();
          

        }
        if(n !== null && typeof n === 'object'){
            
            controller.serachModel = n;
            loadlocationAndCaste();

        }
        if(!controller.partnerPre){
            setMore();
        }
               
            });
    // searchService.getSearch({ user_id: $rootScope.login_user_id }, function (result) {

    //     if (result) {

    //         controller.serachModel = result;
    //         setMore();
    //         loadlocationAndCaste();



    //     }
    //     else {
    //         loadCountries();
    //         setUserAgeHeightInformation();
    //         setUserBasciInfo();
    //         setOtherInfo();
    //         setLocation();
    //         setMore();

    //     }
    // }, function (error) { });

}
module.exports.$inject = ["$scope", "$state", "$rootScope", "countryService", "loginservice", "searchService"];
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/app\\common\\serachby.dir.ctrl.js","/app\\common")

},{"_process":"E:\\angualarjslibs\\node_modules\\process\\browser.js","buffer":"E:\\angualarjslibs\\node_modules\\buffer\\index.js"}],"E:\\angualarjslibs\\app\\common\\settings\\settings.ctrl.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
/* @ngInject */
module.exports = function AccountSettingsController($location,useractions,$scope,$timeout,$rootScope,loginservice,messagesservice) {

var controller=this;


    
    //   var aa=$scope.$watch('$ctrl.setting', function(newVal, oldVal){
    //         console.log(newVal);
    //         // useractions.save_settings(newVal,function(res){
        
    //         //     console.log(res);
    //         // },function(error){});
        
        
    //     }, true);
    
controller.save=function(){
useractions.save_settings(controller.setting,function(res){
        
    messagesservice.toaster_msg('Successfully saved');
            },function(error){});

};
controller.setting={
    user_id:$rootScope.login_user_id,
    message:true,
    photo:true,
    contact:true,
    email:true,
    notification:true

};
useractions.get_settings({user_id:$rootScope.login_user_id},function(res){
    
          
           
           if(res.settings){
            controller.setting=res.settings;
           }
           
        },function(error){});

};
module.exports.$inject = ["$location", "useractions", "$scope", "$timeout", "$rootScope", "loginservice", "messagesservice"];
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/app\\common\\settings\\settings.ctrl.js","/app\\common\\settings")

},{"_process":"E:\\angualarjslibs\\node_modules\\process\\browser.js","buffer":"E:\\angualarjslibs\\node_modules\\buffer\\index.js"}],"E:\\angualarjslibs\\app\\common\\socket.service.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
/* @ngInject */
module.exports =function($http,ServiceUrls, $rootScope){
    let socket = null;
   // io.connect('http://localhost:4000');
 return {
    connect: function(user_id){
       
        socket = io.connect(ServiceUrls.BASEURL,{query: `user_id=${user_id}`});
    },
    on: function (eventName, callback) {
        socket.on(eventName, function () {  
            var args = arguments;
            $rootScope.$apply(function () {
                  callback.apply(socket, args);
            });
          });
    },
    emit: function (eventName, data, callback) {
          socket.emit(eventName, data, function () {
            var args = arguments;
            $rootScope.$apply(function () {
                  if (callback) {
                    callback.apply(socket, args);
                  }
            });
          })
    },
      getUser: function(data,success, error) {
             $http.post(ServiceUrls.BASEURL + ServiceUrls.GET_USER,data).success(success).error(error);
         }
         
         
     };
 };
 module.exports.$inject = ["$http", "ServiceUrls", "$rootScope"];
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/app\\common\\socket.service.js","/app\\common")

},{"_process":"E:\\angualarjslibs\\node_modules\\process\\browser.js","buffer":"E:\\angualarjslibs\\node_modules\\buffer\\index.js"}],"E:\\angualarjslibs\\app\\common\\toaster.service.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
/* @ngInject */
module.exports =function(toaster){
   
 return {
    success: function(msg){
     
       
        toaster.success(msg);
    },
    error:function(msg){
        
         toaster.error(msg);
     },
}
};
module.exports.$inject = ["toaster"];
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/app\\common\\toaster.service.js","/app\\common")

},{"_process":"E:\\angualarjslibs\\node_modules\\process\\browser.js","buffer":"E:\\angualarjslibs\\node_modules\\buffer\\index.js"}],"E:\\angualarjslibs\\app\\common\\user-img.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
/* @ngInject */
module.exports = function () {
    return {
        restrict: 'E',
        templateUrl:'./app/common/user-img.html',
        controllerAs:'$ctrl',
        scope:{
            isNoti:"@",
            user:"="

        },
        
        controller: [
            '$scope',
            '$element',
            '$attrs',
            function ($scope, $element, $attrs) {
                var controller=this;
                $scope.$watch('user', function (newVal, oldVal) {
                    if (!newVal) {
                        return;
                    }
                    controller.user=$scope.user;
                    controller.isNoti=$scope.isNoti;
                    controller.pic=controller.user.pic;
                });
               
             


            }]
        }
    }
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/app\\common\\user-img.js","/app\\common")

},{"_process":"E:\\angualarjslibs\\node_modules\\process\\browser.js","buffer":"E:\\angualarjslibs\\node_modules\\buffer\\index.js"}],"E:\\angualarjslibs\\app\\common\\user.actions.service.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
/* @ngInject */
module.exports = function ($rootScope, countryService, loginservice, $http, toastr, $state, ServiceUrls) {
    var service = {

        send_request: function (data, success, error) {
            $http.post(ServiceUrls.BASEURL + ServiceUrls.SEND_REQUEST, data).success(success).error(error);
        },
        update_request: function (data, success, error) {
            $http.post(ServiceUrls.BASEURL + ServiceUrls.UPDATE_REQUEST, data).success(success).error(error);
        },
        create_user_block: function (data, success, error) {
            $http.post(ServiceUrls.BASEURL + ServiceUrls.CREATE_USER_BLOCK, data).success(success).error(error);
        },
        update_user_block: function (data, success, error) {
            $http.post(ServiceUrls.BASEURL + ServiceUrls.UPDATE_USER_BLOCK, data).success(success).error(error);
        },
        get_notifications: function (data, success, error) {
            $http.post(ServiceUrls.BASEURL + ServiceUrls.GET_NOTIFICATIONS, data).success(success).error(error);
        },
        update_notifications: function (data, success, error) {
            $http.post(ServiceUrls.BASEURL + ServiceUrls.UPDATE_NOTIFICATIONS, data).success(success).error(error);
        },
       get_contactno: function (data, success, error) {
            $http.post(ServiceUrls.BASEURL + ServiceUrls.GET_CONTACTNO, data).success(success).error(error);
        },
         save_settings: function (data, success, error) {
            $http.post(ServiceUrls.BASEURL + ServiceUrls.SAVE_SETTINGS, data).success(success).error(error);
        },
        get_settings: function (data, success, error) {
            $http.post(ServiceUrls.BASEURL + ServiceUrls.GET_SETTINGS, data).success(success).error(error);
        },
        genarateAlbumPics:function(pics,success){
            var imgs = [];
            if(pics.length===0){
                success(imgs);
                return imgs;
            }
            angular.forEach(pics, function (v, i) {

                var imgUrl = ServiceUrls.BASEURL + ServiceUrls.USER_PROFILE_PHOTO_DISPLAY_PATH + v.photo_path;
                var img = {
                    id: v._id,
                    url: imgUrl

                };
                imgs.push(img);



            });
            success(imgs);
        },
        get_default_search_config: function (target,who,calback) {
            var formdata = loginservice.getFiledsData();
            var user ={};
            var basic={};
            var edu={};
            var interest={};
            if(who==="LOGIN_USER"){
               user = $rootScope.current_user_de_all;
               basic = user.basicinfos[0];
               edu = user.usereducations[0];
               interest = user.userintrests[0];
               user.gender=user.gender;
            }
            if(who !== null && typeof who === 'object'){
                user=who;
                basic = user.userinfo.basic;
                edu = user.userinfo.education;
                interest = user.userinfo.interest;
                user.gender=user.gender;
            }
           
            
            var serachModel = {
                user_id: user.user_id,
                age: {

                    from: 0,
                    to: 0
                },
                height: {

                    from: 0,
                    to: 0
                },
                maritialstatus: [],
                mothertounge: [],
                religion: [],
                caste: [],
                country: [],
                state: [],
                city: [],
                physical_status: [],
                occupation: [],
                complexion: ["ANY"],
                aincome: ["ANY"],
                expectation: ["ANY"],
                high_edu: ["ANY"],
                body_type: ["ANY"],
                horoscope: ["ANY"],
                showprofile: ["ANY_1"],
                created_by: ["ANY_2"],
                dontshow: ["ANY_3"]

            };

            var age = user.age;
            var height = interest.height;
            if (user.gender === "MALE") {
                serachModel.age.from = 18;
                serachModel.age.to = age;
                serachModel.height.from = 4;
                serachModel.height.to = height;


            }
            if (user.gender === "FEMALE") {
                serachModel.age.from = age;
                serachModel.age.to = 60;
                serachModel.height.from = height;
                serachModel.height.to = 6.11;


            }
            function setLocation(otherinfo, success) {
                var country = basic.country;
                var state = basic.state;
                var city = basic.city;
                var loc = {
                    cn: country,
                    st: state,
                    ci: city
                };
                serachModel.country = [country];
                countryService.getUserLoc(loc, function (result) {


                    serachModel.state = [{
                        id: result.state.id,
                        name: result.state.name,
                        country_id: result.id,
                        cname: result.name
                    }];


                    serachModel.city = [{
                        id: result.city.id,
                        name: result.city.name,
                        country_id: result.id,
                        state_id: result.state.id,
                        sname: result.state.name
                    }];
                    if (otherinfo) {
                        setUserBasciInfo();
                    }

                    success();
                }, function () { });
            }
            function setUserBasciInfo() {

                serachModel.maritialstatus = [basic.maritialstatus];
                serachModel.mothertounge = [basic.mothertounge];
                serachModel.religion = [basic.religion];
                serachModel.high_edu = [edu.high_edu];
                serachModel.occupation = [edu.occupation];
                serachModel.physical_status = [interest.physical_status];
                setRelegionAndCaste(basic.religion, basic.caste);


            }
            function setRelegionAndCaste(rel, caste, type) {
                angular.forEach(formdata.religions, function (item, value) {

                    if (item.value === rel) {

                        setCasteValue(caste, item);

                    }

                });
            }
            function setCasteValue(caste, rel) {

                if (rel.value === "HINDU") {
                    angular.forEach(formdata.rhindu, function (item, value) {
                        if (item.value === caste) {

                            serachModel.caste = [{
                                rname: rel.name,
                                religion: rel.value,
                                name: item.name,
                                value: item.value

                            }];
                            return;
                        }

                    });


                }
                if (rel.value === "ISLAM") {
                    angular.forEach(formdata.rmuslim, function (item, value) {
                        if (item.value === caste) {

                            serachModel.caste = [{
                                rname: rel.name,
                                religion: rel.value,
                                name: item.name,
                                value: item.value

                            }];
                            return;
                        }

                    });
                }
                if (rel.value === "CHR") {
                    angular.forEach(formdata.rchristian, function (item, value) {
                        if (item.value === caste) {

                            serachModel.caste = [{
                                rname: rel.name,
                                religion: rel.value,
                                name: item.name,
                                value: item.value

                            }];
                            return;
                        }

                    });
                }

                if (rel.value + "OTH" === caste) {
                    serachModel.caste = [{
                        rname: rel.name,
                        religion: rel.value,
                        name: "Other",
                        value: caste

                    }];

                }


            }
            if (target === "DEFAULT_PARTNER_PRE") {
                setLocation(true, function () {

                    calback(serachModel);


                });

            }
            if (target === "LOCATION") {
                setLocation(false, function () {
                    var location = {
                        user_id: user.user_id,
                        country: serachModel.country,
                        state: serachModel.state,
                        city: serachModel.city,
                    };
                    calback(location);


                });


            }
            if (target === "EDUCATION") {

                var EDUCATION = {
                    user_id: user.user_id,
                    high_edu: [edu.high_edu],
                };
                calback(EDUCATION);
            }
            if (target === "OCCUPATION") {

                var OCCUPATION = {
                    user_id: user.user_id,
                    occupation: [edu.occupation],
                };
                calback(OCCUPATION);
            }
            if (target === "VIEWED_PROFILE") {

                var VIEWED_PROFILE = {
                    user_id: user.user_id,
                    showprofile: ["VIEWED_PROFILE"],
                };
                calback(VIEWED_PROFILE);
            }
            if (target === "LIKED") {

                var LIKED = {
                    user_id: user.user_id,
                    showprofile: ["LIKED"],
                };
                calback(LIKED);
            }
            if (target === "VISITOR") {
                
                                var VISITOR = {
                                    user_id: user.user_id,
                                    showprofile: ["VISITOR"],
                                };
                                calback(VISITOR);
                            }
                            if (target === "BLOCKED") {
                                
                                                var BLOCKED = {
                                                    user_id: user.user_id,
                                                    blockprofile: true,
                                                };
                                                calback(BLOCKED);
                                            }
        },
        openReq: function (noti) {
            if (noti.request_type === "MESSAGE") {
                if (noti.whosent === "SENT") {
                    $state.go('root.message_request', { 'requestType': "MESSAGE", 'viewType': 'SENT' });
                }
                else if (noti.request_action) {
                    $state.go('root.message_request', { 'requestType': "MESSAGE", 'viewType': noti.request_action });
                }
                else {
                    $state.go('root.message_request', { 'requestType': "MESSAGE", 'viewType': 'RECEIVED' });
                }


            }
            if (noti.request_type === "PHOTO") {
                if (noti.whosent === "SENT") {
                    $state.go('root.photo_request', { 'requestType': "PHOTO", 'viewType': 'SENT' })
                }
                else if (noti.request_action) {
                    $state.go('root.photo_request', { 'requestType': "PHOTO", 'viewType': noti.request_action });
                }
                else {
                    $state.go('root.photo_request', { 'requestType': "PHOTO", 'viewType': 'RECEIVED' });
                }
            }
            if (noti.request_type === "CONTACT") {
                if (noti.whosent === "SENT") {
                    $state.go('root.contact_request', { 'requestType': "CONTACT", 'viewType': 'SENT' })
                }
                else if (noti.request_action) {
                    $state.go('root.contact_request', { 'requestType': "CONTACT", 'viewType': noti.request_action });
                }
                else {
                    $state.go('root.contact_request', { 'requestType': "CONTACT", 'viewType': 'RECEIVED' });
                }
            }
        },
        toaster_msg: function (msg) {
            toastr.success(msg);

        },


    }
    return service;

}
module.exports.$inject = ["$rootScope", "countryService", "loginservice", "$http", "toastr", "$state", "ServiceUrls"];
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/app\\common\\user.actions.service.js","/app\\common")

},{"_process":"E:\\angualarjslibs\\node_modules\\process\\browser.js","buffer":"E:\\angualarjslibs\\node_modules\\buffer\\index.js"}],"E:\\angualarjslibs\\app\\layouts\\components\\dateParse.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
/* @ngInject */
module.exports = function () {
    return {
        restrict: 'E',
        template:'<i class="fa fa-clock-o" aria-hidden="true"></i> {{$ctrl.date}}',
        controllerAs:'$ctrl',
        scope:{
            date:"="

        },
        
        controller: [
            '$scope',
            '$element',
            '$attrs',
            function ($scope, $element, $attrs) {
                var controller=this;
                
                moment.fn.fromNowOrNow = function (a) {
                    if (Math.abs(moment().diff(this)) < 25000) { // 25 seconds before or after now
                        return 'just now';
                    }
                    return this.fromNow(a);
                }
                $scope.$watch('date', function (newVal, oldVal) {

                    if(!newVal){
                        return;
                    }
                   
                    controller.date=moment(newVal).fromNowOrNow();

                });

               
               

            }]
        }
    }
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/app\\layouts\\components\\dateParse.js","/app\\layouts\\components")

},{"_process":"E:\\angualarjslibs\\node_modules\\process\\browser.js","buffer":"E:\\angualarjslibs\\node_modules\\buffer\\index.js"}],"E:\\angualarjslibs\\app\\layouts\\components\\headerNotificationsMsg.directive.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
/* @ngInject */
module.exports = function (loginservice, $location) {
    return {
        restrict: 'E',
        templateUrl:'./app/layouts/components/header-notifications-msg.html',
        controllerAs:'hdnm',
        controller: 'headerNotiController',
    };
};
module.exports.$inject = ["loginservice", "$location"];
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/app\\layouts\\components\\headerNotificationsMsg.directive.js","/app\\layouts\\components")

},{"_process":"E:\\angualarjslibs\\node_modules\\process\\browser.js","buffer":"E:\\angualarjslibs\\node_modules\\buffer\\index.js"}],"E:\\angualarjslibs\\app\\layouts\\components\\header_noti_controller.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
/* @ngInject */
module.exports = function headerNotiController($scope,socket, $state,toaster, $location, $uibModal, $rootScope, useractions, messagesservice, loginservice) {

    var controller = this;
controller.goState=function(state){
    $state.go(state);

};
    controller.notifn = {
        notiUrl: './app/layouts/components/noti.html',
        msgUrl: "./app/layouts/components/msg.html",
        proUrl: './app/layouts/components/profileDropDown.html',
        position: 'bottom',
        proPos: 'bottom'
    };
    controller.profileSettingsData = [{
        name: "",
        translateKey: "MY_PROFILE",
        route: "root.myprofile",
        icon: "glyphicon glyphicon-user"
    },
    {
        name: "",
        translateKey: "ADD_PHOTO",
        route: "root.addphotos",
        
        icon: "glyphicon glyphicon-picture"
    },
    {
        name: "",
        translateKey: "ACCOUNT_SETTINGS",
        route: "root.settings",
        icon: "glyphicon glyphicon-cog"
    },
    {
        name: "",
        translateKey: "CHANGE_PASSWORD",
        route: "root.changepassword",
        icon: "glyphicon glyphicon-lock"
    },
    // {
    //     name: "",
    //     translateKey: "WHO_CAN_VIEW_MY_PROFILE",
    //     route: "",
    //     icon: "glyphicon glyphicon-eye-open"
    // },
    // {
    //     name: "",
    //     translateKey: "COMPLETE_YOUR_PROFILE",
    //     route: "",
    //     icon: "glyphicon glyphicon-star"
    // },
    {
        name: "",
        translateKey: "LOG_OUT",
        route: "root.logout",

        icon: "glyphicon glyphicon-log-out"
    }

    ];
    controller.logout = function () {
        loginservice.logout(function (res) {

            if (res) {
                $state.go('login');
            }

        });
    };
    controller.configScollBar = {
        autoHideScrollbar: false,
        theme: 'rounded-dark',
        axis: 'y',
        setHeight: "250px",

        scrollButtons: {
            scrollAmount: 'auto', // scroll amount when button pressed 
            enable: true // enable scrolling buttons by default 
        },
        advanced: {
            updateOnContentResize: true
        }
    };
  
    controller.getUnreadMessages = function () {

        var reqMsg = {
            page: 1,
            limit: 10,
            user_id: $rootScope.login_user_id,
            dataType: "UNREADMSG",
            searchType: "INBOX"
        }
        messagesservice.get_messages(reqMsg, function (messages) {

            controller.messages = messages;

        }, function () {

        });


    };
    controller.getnotifications = function () {

        var reqNoti = {
            page: 1,
            limit: 10,
            user_id: $rootScope.login_user_id,
            status: "UNREAD"
        }
        useractions.get_notifications(reqNoti, function (notifications) {


            controller.notifications = notifications;




        }, function (error) {


        });


    };
    controller.getnotifications();
    controller.getUnreadMessages();
    var pics = loginservice.getProfilePic();

    controller.pic = pics.profile;
    controller.isOpenNoti = false;
    controller.isOpenMsg = false;

    controller.isOpenMsgBox = function () {

        if (controller.messages.total === 0) {
            $state.go("root.mail");
            controller.isOpenMsg = false;
        }
        else {
            controller.isOpenMsg = true;


        }

    };
    controller.isOpenNotiBox = function () {
        var req = {
            user_id: $rootScope.login_user_id
        };
        if (controller.notifications.total === 0) {
            $state.go("root.notifications");
            controller.isOpenNoti = false;
        }
        else {
           
            useractions.update_notifications(req, function (notifications) {
                controller.isOpenNoti = true;
                controller.notifications.total = 0;
            }, function (error) { });

        }

    };
    controller.viewall = function (TYPE) {
        if (TYPE === "NOTI") {
            $state.go("root.notifications");

        }
        if (TYPE === "MSG") {

            $state.go("root.mail");

        }

        controller.isOpenNoti = false;
    };
    controller.openReq = function (noti) {
        useractions.openReq(noti);

    };
    controller.viewMessage = function (config, msgId) {
        controller.isOpenMsg = false;

        messagesservice.readMsg(config, msgId);
    };
    controller.sounds = {};
    
    controller.play = function(){
    };
    
  
  
  controller.open=function(data){
  
    toaster.pop({
        type: 'custom',
        body:JSON.stringify({
            template: 'app/layouts/components/alert.html', 
            data:data
        
        }),
        
        bodyOutputType: 'templateWithData',
        timeout: 3000
  })

  //  toaster.pop('custom', "", "{template: './app/layouts/components/alert.html', data: 'MyData'}", 900000, 'templateWithData',"toast-top-center");

  }
      //$scope.sounds.sound.play();
    socket.on($rootScope.login_user_id+"MSG",function(data){
    //    console.log(data)
     //   controller.getUnreadMessages();
     controller.messages.docs.unshift(data);
     controller.messages.total++;
     controller.open(data);
        controller.sounds.sound.play();
       
      //  toastr.pop('info', "Hi ", "{template: './app/layouts/components/alert.html', data: 'MyData'}", 15000, 'templateWithData');

    });
    var userMessageReadBroadcast = $rootScope.$on('userMessageReadBroadcast', function ($event, get_messages_count) {

        controller.getUnreadMessages();


    });
    var updateNotificationsCount = $rootScope.$on('updateNotificationsCount', function ($event, get_messages_count) {

        controller.getnotifications();

    });
    var userPhotoBoradcastToDisplay = $rootScope.$on('userPhotoBoradcastToDisplay', function ($event, msg) {
        
        controller.pic=msg;
        
            })
    
    $rootScope.$on('$destroy', function () {

        userPhotoBoradcastToDisplay();
        userMessageReadBroadcast();
        updateNotificationsCount();
    });

};
module.exports.$inject = ["$scope", "socket", "$state", "toaster", "$location", "$uibModal", "$rootScope", "useractions", "messagesservice", "loginservice"];
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/app\\layouts\\components\\header_noti_controller.js","/app\\layouts\\components")

},{"_process":"E:\\angualarjslibs\\node_modules\\process\\browser.js","buffer":"E:\\angualarjslibs\\node_modules\\buffer\\index.js"}],"E:\\angualarjslibs\\app\\layouts\\components\\index.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
var angular = require('angular');
var headerNotificationsMsg = require('./headerNotificationsMsg.directive');
var langSelect = require('./language.dropdown');
var waterMark = require('./watermark.photo');
var headerNotiController = require('./header_noti_controller');
var dateParse = require('./dateParse');
module.exports = angular.module('app.ui.headercomponents',[])
   .directive('headerNotificationsMsg', headerNotificationsMsg)
   .directive('dateParse', dateParse)
   .directive('langSelect', langSelect)
   .controller('headerNotiController', headerNotiController)
   .directive('waterMark', waterMark)
   .directive('pkAudio', function () {
    return {
        restrict: 'A',
        scope: {
            pkAudio: '='
        },
        link: function (scope, element, attrs, ngModelCtrl) {

            var removeBehaviorsRestrictions = function() {
                element.load();
                window.removeEventListener('keydown', removeBehaviorsRestrictions);
                window.removeEventListener('mousedown', removeBehaviorsRestrictions);
                window.removeEventListener('touchstart', removeBehaviorsRestrictions);
            };
            window.addEventListener('keydown', removeBehaviorsRestrictions);
            window.addEventListener('mousedown', removeBehaviorsRestrictions);
            window.addEventListener('touchstart', removeBehaviorsRestrictions);

            scope.pkAudio = element[0];
        }
    };
})
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/app\\layouts\\components\\index.js","/app\\layouts\\components")

},{"./dateParse":"E:\\angualarjslibs\\app\\layouts\\components\\dateParse.js","./headerNotificationsMsg.directive":"E:\\angualarjslibs\\app\\layouts\\components\\headerNotificationsMsg.directive.js","./header_noti_controller":"E:\\angualarjslibs\\app\\layouts\\components\\header_noti_controller.js","./language.dropdown":"E:\\angualarjslibs\\app\\layouts\\components\\language.dropdown.js","./watermark.photo":"E:\\angualarjslibs\\app\\layouts\\components\\watermark.photo.js","_process":"E:\\angualarjslibs\\node_modules\\process\\browser.js","angular":"angular","buffer":"E:\\angualarjslibs\\node_modules\\buffer\\index.js"}],"E:\\angualarjslibs\\app\\layouts\\components\\language.dropdown.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
/* @ngInject */
module.exports = function ($translate,$templateCache,$state, $rootScope) {
    return {
        restrict: 'E',
        templateUrl:'./app/layouts/components/language.dropdown.html',
        controllerAs:'lang',
        controller: [
            '$scope',
            '$element',
            '$attrs',
            function ($scope, $element, $attrs) {
                var controller=this;
        controller.language = 'English';
    controller.languages = ['English', 'Hindi','Gujarati'];
  //  $translate.use(controller.language.toLowerCase());
    
    
    controller.updateLanguage = function() {
    $translate.use(controller.language.toLowerCase());
    
  
// var currentPageTemplate =$state.current.views["@"].templateUrl;
// $templateCache.remove(currentPageTemplate);
// $state.current.views["@"].templateUrl=$state.current.views["@"].templateUrl;
// $state.reload();
  };
            }
        ]
    };
};
module.exports.$inject = ["$translate", "$templateCache", "$state", "$rootScope"];
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/app\\layouts\\components\\language.dropdown.js","/app\\layouts\\components")

},{"_process":"E:\\angualarjslibs\\node_modules\\process\\browser.js","buffer":"E:\\angualarjslibs\\node_modules\\buffer\\index.js"}],"E:\\angualarjslibs\\app\\layouts\\components\\watermark.photo.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
/* @ngInject */
module.exports = function (ServiceUrls) {
    return {
        restrict: 'A',
        scope: {
            waterMark: "="
        },
        controller: [
            '$scope',
            '$element',
            '$attrs',
            function ($scope, $element, $attrs) {

                // $scope.$watch(function($scope) {
                //       return $scope.waterMark.
                //           map(function(obj) {
                //             return obj.name
                //           });
                // }, function (newVal) {
                //        $scope.waterMark=newVal;
                //     }, true);

                $scope.$watch('waterMark', function (newVal, oldVal) {

                    if (!newVal || Object.keys(newVal).length === 0) {
                        $attrs.$set('src', " dist/assets/img/emptyphoto.png");
                        return;
                    }
                
                    $scope.waterMark = newVal;
                    loadImage();
                }, true);
                function convertImgToBase64URL(url, callback, outputFormat) {
                    var img = new Image();
                    img.crossOrigin = 'Anonymous';
                    img.onload = function () {
                        var canvas = document.createElement('CANVAS'),
                            ctx = canvas.getContext('2d'), dataURL;
                        canvas.height = this.height;
                        canvas.width = this.width;
                        ctx.drawImage(this, 0, 0);
                        dataURL = canvas.toDataURL(outputFormat);
                       
                        callback(dataURL);
                        canvas = null;
                    };
                    img.src = url;
                }

                function loadImage() {
                    var imgUrl = ServiceUrls.BASEURL + ServiceUrls.USER_PROFILE_PHOTO_DISPLAY_PATH + $scope.waterMark.photo_path;

                    convertImgToBase64URL(imgUrl, function (data) {

                        if ($scope.waterMark.photo_vr) {
                            watermark([data])
                                .image(watermark.text.lowerRight('Dholbaaje', '30px Josefin Slab', '#ff6666', 0.5))
                                .then(function (img) {
                                    $attrs.$set('src', img.src);
                                });
                        }
                        else {
                            $attrs.$set('src', imgUrl);
                        }


                    }, function () { });
                }

            }
        ],
        link: function ($scope, $element, $attrs) {




        }
    };
};
module.exports.$inject = ["ServiceUrls"];
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/app\\layouts\\components\\watermark.photo.js","/app\\layouts\\components")

},{"_process":"E:\\angualarjslibs\\node_modules\\process\\browser.js","buffer":"E:\\angualarjslibs\\node_modules\\buffer\\index.js"}],"E:\\angualarjslibs\\app\\layouts\\header.controller.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
/**
 * Global header partial
 */
/* @ngInject */
module.exports = function HeaderController($translate,socket, $state, $rootScope) {
    var controller = this;
    controller.$state = $state;


    controller.subMenus = [];
    controller.headerMenu = [
        {
            name: "",
            translatekey: "MYHOME",
            subMenus: [{
                translatekey: "DASHBOARD",
                route: "root.dashboard"
            },
            {
                translatekey: "MY_PROFILE",
                route: "root.myprofile"
            },
            {
                translatekey: "ADDPHOTOS",
                route: "root.addphotos"
            }

            ],
            route: "root.dashboard"
        },
        {
            name: "",
            translatekey: "MATCHES",
            subMenus: [{
                translatekey: "PREFERRED_MATCHES",
                route: "root.pre_matches"
            }
           ],
            route: "root.pre_matches"

        },
        {
            name: "",
            translatekey: "SEARCH",
            subMenus: [{
                translatekey: "SEARCHBY",
                route: "root.searchby"
            },
            {
                translatekey: "SEARCH_HISTORY",
                route: "root.search_history"
            }],
            route: "root.searchby"
        },
        {
            name: "",
            translatekey: "MESSAGES",
            subMenus: [{
                translatekey: "MAIL",
                route: "root.mail"
            },
            {
                translatekey: "PHOTO_REQUEST",
                route: "root.photo_request"
            }, {
                translatekey: "MESSAGE_REQUEST",
                route: "root.message_request"
            }, {
                translatekey: "CONTACT_REQUEST",
                route: "root.contact_request"
            }],
            route: "root.mail"
        },
        {
            name: "",
            translatekey: "ACTIVITES",
            subMenus: [{
                translatekey: "PREFERRED_LOCATION",
                route: "root.pre_location"
            },{
                translatekey: "PREFERRED_EDUCATION",
                route: "root.pre_education"
            },
            {
                translatekey: "PREFERRED_OCCUATION",
                route: "root.pre_occupation"
            },
            {
                translatekey: "VIEWED_PROFILES",
                route: "root.viewed_profiles"
            },
            {
                translatekey: "LIKED_PROFILES",
                route: "root.liked_profiles"
            },
            {
                translatekey: "PROFILE_VISITORS",
                route: "root.visitor_profiles"
            },
            {
                translatekey: "BLOCKED_PROFILES",
                route: "root.blocked_profiles"
            }
        ],
            route: "root.pre_location"
        }
    ];
    controller.adminHeaderMenus = [{
        name: "",
        translatekey: "HOME",
        subMenus: [{
            translatekey: "DASHBOARD",
            route: "root.admindashboard"
        }

        ],
        route: "root.admindashboard"
    },
    {
        name: "",
        translatekey: "USER",
        subMenus: [{
            translatekey: "VIEW_USERS",
            route: "root.viewusers"
        },
        {
            translatekey: "ADD_USER",
            route: "root.adduser"
        }


        ],
        route: "root.viewusers"
    }];


    /**
     * Sets listeners for toggling properties on the header
     */
    function activate() {
        //TODO - Get permissions, login details etc
        controller.user = {
            firstName: "Biren",
            lastName: "Maity"
        };
    }

    var isadmin = false;
    if ($rootScope.login_user_role === "ADMIN") {
        isadmin = true;
    }
    socket.connect($rootScope.login_user_id);
    controller.loadSubmenu = function (route) {

        if (isadmin) {
            controller.headerMenu = controller.adminHeaderMenus;
        }
        for (var i = 0; i < controller.headerMenu.length; i++) {

            if (controller.headerMenu[i].route === route) {
                controller.subMenus = controller.headerMenu[i].subMenus;

            }
            else {
                for (var j = 0; j < controller.headerMenu[i].subMenus.length; j++) {
                    if (controller.headerMenu[i].subMenus[j].route === route) {

                        controller.subMenus = controller.headerMenu[i].subMenus;
                    }


                }

            }

        }

    };
    controller.loadSubmenu(controller.$state.current.name);
    var updatesubmenu = $rootScope.$on("loadhedermenu", function (evnt, msg) {
        //controller.$state=msg;
        controller.loadSubmenu(msg.name);

    });
    $rootScope.$on('$destroy', function () {

        updatesubmenu();
    });

};
module.exports.$inject = ["$translate", "socket", "$state", "$rootScope"];
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/app\\layouts\\header.controller.js","/app\\layouts")

},{"_process":"E:\\angualarjslibs\\node_modules\\process\\browser.js","buffer":"E:\\angualarjslibs\\node_modules\\buffer\\index.js"}],"E:\\angualarjslibs\\app\\layouts\\index.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
var angular = require('angular');
var routes = require('./layout.route.js');
var layoutcomponents = require('./components');
var HeaderController = require('./header.controller');
var SidebarController = require('./sidebar.controller');

module.exports = angular.module('app.ui.layouts', [layoutcomponents.name])
    .run(routes)
    .controller('HeaderController', HeaderController)
    .controller('SidebarController', SidebarController)
    .directive('relinkEvent', ["$rootScope", function($rootScope) {
    return {
        transclude: 'element',
        restrict: 'A',
        link: function(scope, element, attr, ctrl, transclude) {
            var previousContent = null;
            
            var triggerRelink = function() {
                if (previousContent) {
                    previousContent.remove();
                    previousContent = null;
                }
                
                transclude(function (clone) {
                    console.log('relinking');
                    element.parent().append(clone);
                    previousContent = clone;
                });
                
            };
            
            triggerRelink();                
            $rootScope.$on(attr.relinkEvent, triggerRelink);

        }
    };

}]);
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/app\\layouts\\index.js","/app\\layouts")

},{"./components":"E:\\angualarjslibs\\app\\layouts\\components\\index.js","./header.controller":"E:\\angualarjslibs\\app\\layouts\\header.controller.js","./layout.route.js":"E:\\angualarjslibs\\app\\layouts\\layout.route.js","./sidebar.controller":"E:\\angualarjslibs\\app\\layouts\\sidebar.controller.js","_process":"E:\\angualarjslibs\\node_modules\\process\\browser.js","angular":"angular","buffer":"E:\\angualarjslibs\\node_modules\\buffer\\index.js"}],"E:\\angualarjslibs\\app\\layouts\\layout.route.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
/* @ngInject */
module.exports = function BaseRoutes(Router) {
    Router.configureRoutes([
        {
            name: 'default',
            config: {
                url: '/',
                deepStateRedirect: {
                    default: {
                        state: 'register'
                    }
                }
            }
        },
        {
            name: 'root',
            config: {
                url: '',
                abstract: true,
                views: {
                    'header': {
                        templateUrl: 'app/layouts/header.html',
                        controller: 'HeaderController as ctrl'
                    },
                     'leftsidebar': {
                        templateUrl: 'app/layouts/sidebar.html',
                        controller: 'SidebarController as ctrl'
                    },
                   
                    
                     'footer': {
                        templateUrl: 'app/layouts/footer.html'
                       
                    }
                }
            }
        },
        {
            name: "root.404",
            config: {
                url: '/404',
                views: {
                    '@': {
                        templateUrl: 'app/layouts/404.html'
                        
                    }
                },
                params: {
                    permisstion: "NOACTION"
                },
                title: '404'
            }
        }
      
    ]);
};
module.exports.$inject = ["Router"];
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/app\\layouts\\layout.route.js","/app\\layouts")

},{"_process":"E:\\angualarjslibs\\node_modules\\process\\browser.js","buffer":"E:\\angualarjslibs\\node_modules\\buffer\\index.js"}],"E:\\angualarjslibs\\app\\layouts\\sidebar.controller.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
/* @ngInject */
module.exports = function SidebarController(/*PatientService*/) {
    var controller = this;

    activate();

    /**
     * Initiate Controller.
     */
    function activate() {
        getPatientFeaturesMock();

        bindSidebar();
    }

    function getFeatures() {
        /*PatientService.getFeatures()
         .then(function (response) {
         controller.features = response.features;
         })
         .catch(function (data) {
         console.log("Error:: " + data.toString());
         });*/
    }

    function bindSidebar() {
        /* off-canvas sidebar toggle */
        // $('[data-toggle=offcanvas]').click(function() {
        //     $('.row-offcanvas').toggleClass('active');
        //     $('.collapse').toggleClass('in').toggleClass('hidden-xs').toggleClass('visible-xs');
        // });
    }

    function getPatientFeaturesMock() {
        controller.features = [
            {
                "type": "questionnaire",
                "name": "Questionnaire",
                "count": "4",
                "status": "",
                "icon": "list-alt",
                "desc": "Lorem ipsum dolor sit amet, ea nam tamquam tractatos, te harum nostrud recusabo eos, ex nostrud perfecto deterruisset cum",
                "page": "landing"
            },
            {
                "type": "notifications",
                "name": "Notifications",
                "count": "2",
                "status": "",
                "icon": "calendar",
                "desc": "Ei vim sale natum animal. Qui utamur debitis necessitatibus ut, odio debet oratio an sit, consul ubique accusata eos eu.",
                "page": "auth.patient.notifications"
            },
            {
                "type": "provider",
                "name": "Provider",
                "count": "2",
                "status": "",
                "icon": "user",
                "desc": "Facete eripuit euripidis mea no. Atomorum sensibus per ad, ad partiendo similique pri.",
                "page": "landing"
            },
            {
                "type": "health",
                "name": "Health Monitor",
                "count": "1",
                "status": "",
                "icon": "heart-empty",
                "desc": "Vim detraxit senserit assentior ne, sit at tamquam noluisse, sea libris minimum ei.",
                "page": "landing"
            },
            {
                "type": "metrics",
                "name": "Metrics",
                "count": "1",
                "status": "",
                "icon": "stats",
                "desc": "Ei quo sint inermis, erant iriure offendit te pri.",
                "page": "landing"
            },
            {
                "type": "Chat",
                "name": "Chat",
                "count": "10",
                "status": "",
                "icon": "comment",
                "desc": "Quot dolorem intellegebat eu vis, et oblique maiorum habemus eam. Duo salutandi efficiantur ad, sea electram forensibus an.",
                "page": "landing"
            }
        ];
    }
};
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/app\\layouts\\sidebar.controller.js","/app\\layouts")

},{"_process":"E:\\angualarjslibs\\node_modules\\process\\browser.js","buffer":"E:\\angualarjslibs\\node_modules\\buffer\\index.js"}],"E:\\angualarjslibs\\app\\loading-bar\\index.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
var angular = require('angular');
var angularLoadingBar = require('angular-loading-bar');
var loadingConfig = require('./loading.config');
module.exports = angular.module('app.ui.loading', [angularLoadingBar])
    .provider('loadingConfig', loadingConfig);
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/app\\loading-bar\\index.js","/app\\loading-bar")

},{"./loading.config":"E:\\angualarjslibs\\app\\loading-bar\\loading.config.js","_process":"E:\\angualarjslibs\\node_modules\\process\\browser.js","angular":"angular","angular-loading-bar":"angular-loading-bar","buffer":"E:\\angualarjslibs\\node_modules\\buffer\\index.js"}],"E:\\angualarjslibs\\app\\loading-bar\\loading.config.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
/* @ngInject */
module.exports = function (cfpLoadingBarProvider) {
  
    // cfpLoadingBarProvider.parentSelector = 'body';
    // cfpLoadingBarProvider.spinnerTemplate = '<div><span class="fa fa-spinner">Custom Loading Message...</div>';
    // cfpLoadingBarProvider.includeBar = true;
  this.$get = function () {
        return ;
    };
};
module.exports.$inject = ["cfpLoadingBarProvider"];
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/app\\loading-bar\\loading.config.js","/app\\loading-bar")

},{"_process":"E:\\angualarjslibs\\node_modules\\process\\browser.js","buffer":"E:\\angualarjslibs\\node_modules\\buffer\\index.js"}],"E:\\angualarjslibs\\app\\matches\\components\\block.button.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
/* @ngInject */
module.exports = function ($uibModal,messagesservice,useractions,$rootScope) {
    return {
        restrict: 'E',
        templateUrl:'./app/matches/components/block.button.html',
        controllerAs:'$ctrl',
        scope:{
           user:"=",
           

        },
        
        controller: [
            '$scope',
            '$element',
            '$attrs',
            function ($scope, $element, $attrs) {
                var controller=this;
                $scope.$watch('user', function (newVal, oldVal) {
                    if (!newVal) {
                        return;
                    }
                    controller.is_blocked_profile=$scope.user.is_blocked_profile;
                });
               
                controller.Block=function(){

                    var modalInstance = $uibModal.open({
                        animation: true,
                        windowClass: "",
                        templateUrl: './app/popuptemplates/delete.modal.html',
                        controller: ["$scope", function ($scope) {
                            var main = this;
                            main.type="BLOCK";
                            main.yes = function () {
                                finalcall();
                                modalInstance.dismiss('cancel');
                            };
                            main.no = function () {
                                modalInstance.dismiss('cancel');
                            };
            
            
                        }],
                        controllerAs: '$ctrl',
                        size: "lg",
                        backdrop: 'static',
                        keyboard: false,
                        resolve: {
            
                        }
            
                    });

function finalcall(){
    var reqBlock = {
        user_id:  $rootScope.login_user_id,
        block_user_id: $scope.user.user_id,
        block_status:"BLOCK"
       

      }


      useractions.create_user_block(reqBlock, function (result) {
        if (result.success) {
          messagesservice.toaster_msg('Successfully bloked');
          $rootScope.$broadcast('userBlockUnblock',{block:true});
          controller.is_blocked_profile="BLOCK";
        }


      }, function (error) { });
}
                    
                };
                controller.unBlock=function(){
                    var reqBlock = {
                        user_id:  $rootScope.login_user_id,
                        block_user_id: $scope.user.user_id,
                        block_status:"UNBLOCK"
                
                      }
                
                
                      useractions.create_user_block(reqBlock, function (result) {
                        if (result.success) {
                          messagesservice.toaster_msg('Successfully unbloked');
                          controller.is_blocked_profile=false;
                          $rootScope.$broadcast('userBlockUnblock',{block:false});
                
                        }
                
                
                      }, function (error) { });
                };
                var userUnblock = $rootScope.$on('userUnblock', function ($event, msg) {
                    controller.is_blocked_profile=false;
                    $rootScope.$broadcast('userBlockUnblock',{block:false}); 
                    
                        });
                       
                        $rootScope.$on('$destroy', function () {
                    
                            userUnblock();
                          
                        });

            }]
        };
    };
    module.exports.$inject = ["$uibModal", "messagesservice", "useractions", "$rootScope"];
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/app\\matches\\components\\block.button.js","/app\\matches\\components")

},{"_process":"E:\\angualarjslibs\\node_modules\\process\\browser.js","buffer":"E:\\angualarjslibs\\node_modules\\buffer\\index.js"}],"E:\\angualarjslibs\\app\\matches\\components\\contact.button.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
/* @ngInject */
module.exports = function (messagesservice, $uibModal, useractions, $rootScope) {
    return {
        restrict: 'E',
        templateUrl: './app/matches/components/contact.button.html',
        controllerAs: '$ctrl',
        scope: {
            user: "="
        },

        controller: [
            '$scope',
            '$element',
            '$attrs',
            function ($scope, $element, $attrs) {
                var controller = this;
                $scope.$watch('user', function (newVal, oldVal) {
                    if (!newVal) {
                        return;
                    }
                    controller.config = $scope.user.contact_btn;
                    controller.isContacted = $scope.user.is_contacted;
                    controller.is_user_by_block = $scope.user.is_user_by_block;
                    controller.is_blocked_profile=$scope.user.is_blocked_profile;
                });
                controller.unBlock=function(){
                    var reqBlock = {
                        user_id:  $rootScope.login_user_id,
                        block_user_id: $scope.user.user_id,
                        block_status:"UNBLOCK"
                
                      }
                
                
                      useractions.create_user_block(reqBlock, function (result) {
                        if (result.success) {
                          messagesservice.toaster_msg('Successfully unbloked');
                          controller.is_blocked_profile=false;
                          $rootScope.$broadcast('userUnblock');
                        }
                
                
                      }, function (error) { });
                };
               function alertPopup(){
                var modalInstance = $uibModal.open({
                    animation: true,
                    windowClass: "",
                    templateUrl: './app/popuptemplates/delete.modal.html',
                    controller: ["$scope", function ($scope) {
                        var main = this;
                        main.type="UNBLOCK";
                        main.yes = function () {
                            controller.unBlock();
                            modalInstance.dismiss('cancel');
                        };
                        main.no = function () {
                            modalInstance.dismiss('cancel');
                        };
        
        
                    }],
                    controllerAs: '$ctrl',
                    size: "lg",
                    backdrop: 'static',
                    keyboard: false,
                    resolve: {
        
                    }
        
                });
               }
                controller.checkBlock=function(type,sendNoti){
                   if(controller.is_blocked_profile){
                    alertPopup();
                    return;
                   }
                   else{
                    if(type==='VIEW'){

                        controller.viewContact(sendNoti);
                       }
                       if(type==='REQ'){
                        controller.requestContact();
                       }
                   
                   }


                };
                controller.isOpen = false;
                controller.contactpop = {
                    pos: "top",
                    templateUrl: './app/matches/components/contact.pop.html'

                };


                function callReq(request_type) {
                    var reqContact = {
                        user_id: $rootScope.login_user_id,
                        request_user_id: $scope.user.user_id,
                        request_type: request_type,
                        request_status: (controller.is_user_by_block === "BLOCK" ? "BLOCK" : "UNREAD")

                    };

                    useractions.send_request(reqContact, function (result) {
                        if (result.success) {
                            if (request_type === "CONTACT") {
                                messagesservice.toaster_msg('Successfully sent');
                                controller.config = {
                                    view_contact: false,
                                    alreadysent: true,
                                    decline: false,
                                    send_request: false
                                };
                            }
                            if (request_type === "CONTACTED") {
                                controller.isContacted = "CONTACTED";
                            }

                        }


                    }, function (error) { });
                }
                controller.requestContact = function () {
                    callReq("CONTACT");
                };
                controller.viewContact = function (sendNoti) {
                    controller.isOpen = true;
                    if (sendNoti) {
                        callReq("CONTACTED");
                    }


                };
   var userBlockUnblock = $rootScope.$on('userBlockUnblock', function ($event, msg) {
                    if(msg.block){
                        controller.is_blocked_profile=true;
                    }
                    else{
                        controller.is_blocked_profile=false;
                    }
                            
                    
                        });
                       
                        $rootScope.$on('$destroy', function () {
                    
                            userBlockUnblock();
                          
                        });

            }]
    };
};
module.exports.$inject = ["messagesservice", "$uibModal", "useractions", "$rootScope"];
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/app\\matches\\components\\contact.button.js","/app\\matches\\components")

},{"_process":"E:\\angualarjslibs\\node_modules\\process\\browser.js","buffer":"E:\\angualarjslibs\\node_modules\\buffer\\index.js"}],"E:\\angualarjslibs\\app\\matches\\components\\index.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
var angular = require('angular');
var profileView = require('./profile-view');
var photoButton = require('./photo.button');
var messageButton = require('./message.button');
var contactButton = require('./contact.button');
var likeButton = require('./like.button');
var blockButton = require('./block.button');
module.exports = angular.module('app.ui.matches.components',[])
    .directive('blockButton', blockButton)
    .directive('likeButton', likeButton)
    .directive('contactButton', contactButton)
    .directive('messageButton', messageButton)
    .directive('photoButton', photoButton)
    .directive('profileView', profileView);
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/app\\matches\\components\\index.js","/app\\matches\\components")

},{"./block.button":"E:\\angualarjslibs\\app\\matches\\components\\block.button.js","./contact.button":"E:\\angualarjslibs\\app\\matches\\components\\contact.button.js","./like.button":"E:\\angualarjslibs\\app\\matches\\components\\like.button.js","./message.button":"E:\\angualarjslibs\\app\\matches\\components\\message.button.js","./photo.button":"E:\\angualarjslibs\\app\\matches\\components\\photo.button.js","./profile-view":"E:\\angualarjslibs\\app\\matches\\components\\profile-view.js","_process":"E:\\angualarjslibs\\node_modules\\process\\browser.js","angular":"angular","buffer":"E:\\angualarjslibs\\node_modules\\buffer\\index.js"}],"E:\\angualarjslibs\\app\\matches\\components\\like.button.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
/* @ngInject */
module.exports = function (messagesservice, $uibModal,useractions,$rootScope) {
    return {
        restrict: 'E',
        templateUrl:'./app/matches/components/like.button.html',
        controllerAs:'$ctrl',
        scope:{
           user:"=",
           

        },
        
        controller: [
            '$scope',
            '$element',
            '$attrs',
            function ($scope, $element, $attrs) {
                var controller=this;
                $scope.$watch('user', function (newVal, oldVal) {
                    if (!newVal) {
                        return;
                    }
                    controller.is_liked_profile=$scope.user.is_liked_profile;
                    controller.is_user_by_block=$scope.user.is_user_by_block;
                    controller.is_blocked_profile=$scope.user.is_blocked_profile;
                });
              
                controller.unBlock=function(){
                    var reqBlock = {
                        user_id:  $rootScope.login_user_id,
                        block_user_id: $scope.user.user_id,
                        block_status:"UNBLOCK"
                
                      }
                
                
                      useractions.create_user_block(reqBlock, function (result) {
                        if (result.success) {
                          messagesservice.toaster_msg('Successfully unbloked');
                          controller.is_blocked_profile=false;
                          $rootScope.$broadcast('userUnblock');
                        }
                
                
                      }, function (error) { });
                };
               function alertPopup(){
                var modalInstance = $uibModal.open({
                    animation: true,
                    windowClass: "",
                    templateUrl: './app/popuptemplates/delete.modal.html',
                    controller: ["$scope", function ($scope) {
                        var main = this;
                        main.type="UNBLOCK";
                        main.yes = function () {
                            controller.unBlock();
                            modalInstance.dismiss('cancel');
                        };
                        main.no = function () {
                            modalInstance.dismiss('cancel');
                        };
        
        
                    }],
                    controllerAs: '$ctrl',
                    size: "lg",
                    backdrop: 'static',
                    keyboard: false,
                    resolve: {
        
                    }
        
                });
               }
                controller.checkBlock=function(){
                   if(controller.is_blocked_profile){
                    alertPopup();
                    return;
                   }
                   else{
                    controller.like();
                   
                   }


                };
                controller.like=function(){
                    var reqLike= {
                        user_id: $rootScope.login_user_id,
                        request_user_id: $scope.user.user_id,
                        request_type: "LIKED",
                        request_status: (controller.is_user_by_block ==="BLOCK" ? "BLOCK" : "UNREAD")
                
                      };
                
                      useractions.send_request(reqLike, function (result) {
                        if (result.success) {
                          messagesservice.toaster_msg('Successfully Liked');
                          controller.is_liked_profile="LIKED";
                
                        }
                
                
                      }, function (error) { });
                };
                var userBlockUnblock = $rootScope.$on('userBlockUnblock', function ($event, msg) {
                    if(msg.block){
                        controller.is_blocked_profile=true;
                    }
                    else{
                        controller.is_blocked_profile=false;
                    }
                            
                    
                        });
                       
                        $rootScope.$on('$destroy', function () {
                    
                            userBlockUnblock();
                          
                        });

            }]
        };
    };
    module.exports.$inject = ["messagesservice", "$uibModal", "useractions", "$rootScope"];
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/app\\matches\\components\\like.button.js","/app\\matches\\components")

},{"_process":"E:\\angualarjslibs\\node_modules\\process\\browser.js","buffer":"E:\\angualarjslibs\\node_modules\\buffer\\index.js"}],"E:\\angualarjslibs\\app\\matches\\components\\message.button.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
/* @ngInject */
module.exports = function (messagesservice, $uibModal, useractions, $rootScope) {
    return {
        restrict: 'E',
        templateUrl: './app/matches/components/message.button.html',
        controllerAs: '$ctrl',
        scope: {
            user: "="


        },

        controller: [
            '$scope',
            '$element',
            '$attrs',
            function ($scope, $element, $attrs) {
                var controller = this;
                $scope.$watch('user', function (newVal, oldVal) {
                    if (!newVal) {
                        return;
                    }
                    controller.config = $scope.user.message_btn;
                    controller.is_user_by_block=$scope.user.is_user_by_block;
                    controller.is_blocked_profile=$scope.user.is_blocked_profile;
                });

                controller.unBlock=function(){
                    var reqBlock = {
                        user_id:  $rootScope.login_user_id,
                        block_user_id: $scope.user.user_id,
                        block_status:"UNBLOCK"
                
                      }
                
                
                      useractions.create_user_block(reqBlock, function (result) {
                        if (result.success) {
                          messagesservice.toaster_msg('Successfully unbloked');
                          controller.is_blocked_profile=false;
                          $rootScope.$broadcast('userUnblock');
                        }
                
                
                      }, function (error) { });
                };
               function alertPopup(){
                var modalInstance = $uibModal.open({
                    animation: true,
                    windowClass: "",
                    templateUrl: './app/popuptemplates/delete.modal.html',
                    controller: ["$scope", function ($scope) {
                        var main = this;
                        main.type="UNBLOCK";
                        main.yes = function () {
                            controller.unBlock();
                            modalInstance.dismiss('cancel');
                        };
                        main.no = function () {
                            modalInstance.dismiss('cancel');
                        };
        
        
                    }],
                    controllerAs: '$ctrl',
                    size: "lg",
                    backdrop: 'static',
                    keyboard: false,
                    resolve: {
        
                    }
        
                });
               }
                controller.checkBlock=function(type){
                   if(controller.is_blocked_profile){
                    alertPopup();
                    return;
                   }
                   else{
                       if(type==='MSG'){
                        controller.sendMsg();
                       }
                       if(type==='REQ'){
                        controller.sendReq();
                       }
                   
                   }


                };
                controller.sendMsg = function () {
                    var config = {
                        type: "SEND",
                        user_id: $scope.user.user_id

                    };
                    messagesservice.composemail(config);
                };
                controller.sendReq = function () {

                    var reqMsg = {
                        user_id: $rootScope.login_user_id,
                        request_user_id: $scope.user.user_id,
                        request_type: "MESSAGE",
                        request_status: (controller.is_user_by_block ==="BLOCK" ? "BLOCK" : "UNREAD")

                    };

                    useractions.send_request(reqMsg, function (result) {
                        if (result.success) {
                            messagesservice.toaster_msg('Successfully sent');
                            controller.config = {
                                send_msg: false,
                                alreadysent: true,
                                decline: false,
                                send_request: false
                            };

                        }


                    }, function (error) { });

                };
                var userBlockUnblock = $rootScope.$on('userBlockUnblock', function ($event, msg) {
                    if(msg.block){
                        controller.is_blocked_profile=true;
                    }
                    else{
                        controller.is_blocked_profile=false;
                    }
                            
                    
                        });
                       
                        $rootScope.$on('$destroy', function () {
                    
                            userBlockUnblock();
                          
                        });

            }]
    };
};
module.exports.$inject = ["messagesservice", "$uibModal", "useractions", "$rootScope"];
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/app\\matches\\components\\message.button.js","/app\\matches\\components")

},{"_process":"E:\\angualarjslibs\\node_modules\\process\\browser.js","buffer":"E:\\angualarjslibs\\node_modules\\buffer\\index.js"}],"E:\\angualarjslibs\\app\\matches\\components\\photo.button.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
/* @ngInject */
module.exports = function (loginservice,messagesservice,useractions, $rootScope,$uibModal) {
    return {
        restrict: 'E',
        templateUrl:'./app/matches/components/photo.button.html',
        controllerAs:'$ctrl',
        scope:{
           user:"="
         },
        
        controller: [
            '$scope',
            '$element',
            '$attrs',
            function ($scope, $element, $attrs) {
                var controller=this;
                $scope.$watch('user', function (newVal, oldVal) {
                    if (!newVal) {
                        return;
                    }
                    controller.config=$scope.user.photo_btn;
                    controller.is_user_by_block=$scope.user.is_user_by_block;
                    controller.is_blocked_profile=$scope.user.is_blocked_profile;
                });

                controller.unBlock=function(){
                    var reqBlock = {
                        user_id:  $rootScope.login_user_id,
                        block_user_id: $scope.user.user_id,
                        block_status:"UNBLOCK"
                
                      }
                
                
                      useractions.create_user_block(reqBlock, function (result) {
                        if (result.success) {
                          messagesservice.toaster_msg('Successfully unbloked');
                          controller.is_blocked_profile=false;
                          $rootScope.$broadcast('userUnblock');
                
                        }
                
                
                      }, function (error) { });
                };
               function alertPopup(){
                var modalInstance = $uibModal.open({
                    animation: true,
                    windowClass: "",
                    templateUrl: './app/popuptemplates/delete.modal.html',
                    controller: ["$scope", function ($scope) {
                        var main = this;
                        main.type="UNBLOCK";
                        main.yes = function () {
                            controller.unBlock();
                            modalInstance.dismiss('cancel');
                        };
                        main.no = function () {
                            modalInstance.dismiss('cancel');
                        };
        
        
                    }],
                    controllerAs: '$ctrl',
                    size: "lg",
                    backdrop: 'static',
                    keyboard: false,
                    resolve: {
        
                    }
        
                });
               }
                controller.checkBlock=function(){
                   if(controller.is_blocked_profile){
                    alertPopup();
                   }
                   else{
                    controller.requestPhotom();
                   }


                };

                controller.requestPhotom=function(){
                   var pic = loginservice.getProfilePic();
                   
                    if(pic.profile && pic.profile.photo_vr){

                        var reqPhoto= {
                            user_id: $rootScope.login_user_id,
                            request_user_id: $scope.user.user_id,
                            request_type: "PHOTO",
                            request_status: (controller.is_user_by_block ==="BLOCK" ? "BLOCK" : "UNREAD")
                    
                          };
                    
                          useractions.send_request(reqPhoto, function (result) {
                            if (result.success) {
                              messagesservice.toaster_msg('Successfully sent');
                              controller.config={
                                alreadysent:true,
                                decline:false,
                                send_request:false
                              };
                    
                            }
                    
                    
                          }, function (error) { });
                        messagesservice.toaster_msg('Successfully sent'); 
                    }
                    else{
                        messagesservice.toaster_msg_error('Please upload your profile photo or check admin approval');
                    }

                };
                var userBlockUnblock = $rootScope.$on('userBlockUnblock', function ($event, msg) {
                    if(msg.block){
                        controller.is_blocked_profile=true;
                    }
                    else{
                        controller.is_blocked_profile=false;
                    }
                            
                    
                        });
                       
                        $rootScope.$on('$destroy', function () {
                    
                            userBlockUnblock();
                          
                        });
            }]
        };
    };
    module.exports.$inject = ["loginservice", "messagesservice", "useractions", "$rootScope", "$uibModal"];
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/app\\matches\\components\\photo.button.js","/app\\matches\\components")

},{"_process":"E:\\angualarjslibs\\node_modules\\process\\browser.js","buffer":"E:\\angualarjslibs\\node_modules\\buffer\\index.js"}],"E:\\angualarjslibs\\app\\matches\\components\\profile-view.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
/* @ngInject */
module.exports = function (loginservice,$crypto,$state) {
    return {
        restrict: 'E',
        scope:{
          user:"="
        },
        templateUrl:'./app/matches/components/profile-view.html',
        controllerAs:'$ctrl',
        controller: [
            '$scope',
            '$element',
            '$attrs',
            function ($scope, $element, $attrs) {
               
                var controller=this;
                $scope.$watch('user', function (newVal, oldVal) {
                    if (!newVal) {
                        return;
                    }
                   
                    controller.user=$scope.user;
                   
                });
                controller.goToFullProfile=function(id){
                   
                    $state.go("root.fullprofile",{
                        id: $crypto.encrypt(id),
                        isblock:controller.user.is_blocked_profile
                    });
                  };

               
               
                  controller.formdata = loginservice.getFiledsData();
                  var hindu = controller.formdata.rhindu;
                  var muslim = controller.formdata.rmuslim;
                  var christian = controller.formdata.rchristian;
                controller.casteData=[];
                controller.loadCaste = function (rel) {
                    if (rel === "HINDU") {
                        controller.casteData = hindu;
                        return;
                    }
                    if (rel === "ISLAM") {
                        controller.casteData = muslim;
                        return;
                    }
                    if (rel === "CHR") {
                        controller.casteData = christian;
                        return;
                    }
                   
                    controller.casteData = [{
                       
                        name: "Other",
                        value: rel + "OTH"
        
                    }];

                };
                
            }
        ]
    };
};
module.exports.$inject = ["loginservice", "$crypto", "$state"];
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/app\\matches\\components\\profile-view.js","/app\\matches\\components")

},{"_process":"E:\\angualarjslibs\\node_modules\\process\\browser.js","buffer":"E:\\angualarjslibs\\node_modules\\buffer\\index.js"}],"E:\\angualarjslibs\\app\\matches\\dailymatches\\dailyMatches.controller.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
/* @ngInject */
module.exports = function DailyMatchesController($location,$scope,$timeout,$rootScope,loginservice) {
    var controller = this;
}
module.exports.$inject = ["$location", "$scope", "$timeout", "$rootScope", "loginservice"];
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/app\\matches\\dailymatches\\dailyMatches.controller.js","/app\\matches\\dailymatches")

},{"_process":"E:\\angualarjslibs\\node_modules\\process\\browser.js","buffer":"E:\\angualarjslibs\\node_modules\\buffer\\index.js"}],"E:\\angualarjslibs\\app\\matches\\index.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
'use strict';

var angular = require('angular');
var routes = require('./matches.route');
var matchescomponents = require('./components');
var DailyMatchesController = require('./dailymatches/dailyMatches.controller');
var PreMatchesController = require('./pre_matches/pre_matches.controller');
var matchesService = require('./service');
module.exports = angular.module('app.ui.matches', [matchesService.name,matchescomponents.name])
    .run(routes)
    .controller('DailyMatchesController', DailyMatchesController) 
    .controller('PreMatchesController', PreMatchesController);
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/app\\matches\\index.js","/app\\matches")

},{"./components":"E:\\angualarjslibs\\app\\matches\\components\\index.js","./dailymatches/dailyMatches.controller":"E:\\angualarjslibs\\app\\matches\\dailymatches\\dailyMatches.controller.js","./matches.route":"E:\\angualarjslibs\\app\\matches\\matches.route.js","./pre_matches/pre_matches.controller":"E:\\angualarjslibs\\app\\matches\\pre_matches\\pre_matches.controller.js","./service":"E:\\angualarjslibs\\app\\matches\\service\\index.js","_process":"E:\\angualarjslibs\\node_modules\\process\\browser.js","angular":"angular","buffer":"E:\\angualarjslibs\\node_modules\\buffer\\index.js"}],"E:\\angualarjslibs\\app\\matches\\matches.route.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
/* @ngInject */
module.exports = function myHomeRoutes(Router) {
    Router.configureRoutes([
        {
            name: "root.pre_matches",
            config: {
                url: '/pre_matches',
                views: {
                    '@': {
                        templateUrl: "app/matches/pre_matches/pre_matches.html",
                        controller: "PreMatchesController as $ctrl"
                    }
                },
                params: {
                    permisstion: "ALLUSER",
                    result:null
                },
                title: 'Matches'
            }
         }
         //,
        //   {
        //     name: "root.dailymatches",
        //     config: {
        //         url: '/dailymatches',
        //         views: {
        //             '@': {
        //                 templateUrl: "app/matches/dailymatches/dailymatches.html",
        //                 controller: "DailyMatchesController as ctrl"
        //             }
        //         },
        //         params: {
        //             permisstion: "ALLUSER"
        //         },
        //         title: 'daily matches'
        //     }
        // }
    ]);
};
module.exports.$inject = ["Router"];
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/app\\matches\\matches.route.js","/app\\matches")

},{"_process":"E:\\angualarjslibs\\node_modules\\process\\browser.js","buffer":"E:\\angualarjslibs\\node_modules\\buffer\\index.js"}],"E:\\angualarjslibs\\app\\matches\\pre_matches\\pre_matches.controller.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
/* @ngInject */
module.exports = function PreMatchesController($state, $location, searchService, $scope, useractions, $timeout, $rootScope, loginservice, matcheservice) {
    var controller = this;
    controller.result = $state.params.result;
    controller.fields = {};
    controller.limit = 10;
    controller.total = 0;
    controller.page = 1;
    controller.pages = 0;
    controller.maxSize = 5;
    controller.userIds = [];
    controller.start = 0;
    controller.end = 0;
    var req = {
        page: controller.page,
        limit: controller.limit,
        gender: $rootScope.login_user_gender,
        fields: controller.fields
    };

    controller.pageChanged = function () {

        controller.selectedAll = false;

        controller.page = controller.page;

        req.page = controller.page;
        controller.loadViewType();

    };

    controller.loadViewType = function () {

        searchService.getSearchResult(req, function (result) {

            setUserData(result)
        }, function (error) { });

        //     if(controller.fields){
        //         serachResult();
        //     }


        //    else{
        //     searchService.getSearch({ user_id: $rootScope.login_user_id }, function (result) {
        //         if (result) {
        //             req.fields=result;
        //             controller.fields=result;
        //             req.gender=$rootScope.login_user_gender;
        //             serachResult();
        //         }

        //             },function(error){});
        //    }

    };


    function setUserData(result) {

        controller.pages = result.pages;
        controller.total = result.total;
        controller.users = result.users;

        controller.start = (controller.page - 1) * controller.limit + 1;
        controller.end = controller.start + result.users.length - 1;
    }

    function loadDefualt() {
        matcheservice.get_partner_pre({ user_id: $rootScope.login_user_id }, function (result) {

            if (result) {
                req.fields = result.fields;
                controller.loadViewType();

            }
            else {

                useractions.get_default_search_config("DEFAULT_PARTNER_PRE","LOGIN_USER",function (fields) {

                    req.fields = fields;
                    controller.loadViewType();
                });

            }
        }, function (error) { });


    }
    if (controller.result) {
        setUserData(controller.result);
    } else {
        loadDefualt();
    }

};
module.exports.$inject = ["$state", "$location", "searchService", "$scope", "useractions", "$timeout", "$rootScope", "loginservice", "matcheservice"];
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/app\\matches\\pre_matches\\pre_matches.controller.js","/app\\matches\\pre_matches")

},{"_process":"E:\\angualarjslibs\\node_modules\\process\\browser.js","buffer":"E:\\angualarjslibs\\node_modules\\buffer\\index.js"}],"E:\\angualarjslibs\\app\\matches\\service\\index.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
'use strict';
var angular = require('angular');

//services//
var matches=require('./matches.service');

module.exports = angular.module('app.ui.matches.services', [])

.factory("matcheservice",matches);
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/app\\matches\\service\\index.js","/app\\matches\\service")

},{"./matches.service":"E:\\angualarjslibs\\app\\matches\\service\\matches.service.js","_process":"E:\\angualarjslibs\\node_modules\\process\\browser.js","angular":"angular","buffer":"E:\\angualarjslibs\\node_modules\\buffer\\index.js"}],"E:\\angualarjslibs\\app\\matches\\service\\matches.service.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
/* @ngInject */
module.exports = function ($http, $sessionStorage, $localStorage, ServiceUrls, $location, $uibModal, $rootScope) {
var service={

    get_pre_matches: function (data, success, error) {
        $http.post(ServiceUrls.BASEURL + ServiceUrls.GET_PRE_MATCHES, data).success(success).error(error);
    },
    save_partner_pre: function (data, success, error) {
        $http.post(ServiceUrls.BASEURL + ServiceUrls.SAVE_PARTNER_PRE, data).success(success).error(error);
    },
     get_partner_pre: function (data, success, error) {
        $http.post(ServiceUrls.BASEURL + ServiceUrls.GET_PARTNER_PRE, data).success(success).error(error);
    }
}
return service;

}
module.exports.$inject = ["$http", "$sessionStorage", "$localStorage", "ServiceUrls", "$location", "$uibModal", "$rootScope"];    
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/app\\matches\\service\\matches.service.js","/app\\matches\\service")

},{"_process":"E:\\angualarjslibs\\node_modules\\process\\browser.js","buffer":"E:\\angualarjslibs\\node_modules\\buffer\\index.js"}],"E:\\angualarjslibs\\app\\messages\\components\\compose.mail.controller.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
/* @ngInject */
module.exports = function composeMailController(useractions, config, $scope, loginservice, $uibModal, $uibModalInstance, $rootScope, countryService, messagesservice) {
  var controller = this;
  controller.UserType = "SEND_MESSAGE";
  controller.config = config;
  controller.user = $rootScope.current_user_de_all;

  controller.cancel = function () {
    $uibModalInstance.dismiss('cancel');
  };
  var country = $rootScope.current_user_de_all.basicinfos[0].country;
  var state = $rootScope.current_user_de_all.basicinfos[0].state;
  var city = $rootScope.current_user_de_all.basicinfos[0].city;
  var loc = {
    cn: country,
    st: state,
    ci: city
  };

  countryService.getUserLoc(loc, function (result) {
    controller.userLocation = result;

  }, function () { });

  var pic = loginservice.getProfilePic();

  controller.photo = pic.profile;
  controller.messageModel = {

    "user_id": controller.user.user_id,
    "message_status": "UNREAD",
    "message_type": "NORMAL",
    "message": "",
    "send_to": "",
    "send_on": new Date(),
    "recived_on": new Date()
  }
  controller.onBlur = function ($event) {

    if (!controller.messageModel.send_to) {
      return;
    }
    var req = {
      user_id: controller.user.user_id,
      send_to: controller.messageModel.send_to,
      gender: $rootScope.login_user_gender
    }
    messagesservice.check_user_currentuser(req, function (result) {
      controller.messageModel.message_type = "NORMAL";
      controller.UserType = result.type;
      //  if(result.type==="USER_NOT_EXITS"){
      //      controller.UserType=result.type;

      //  }
      //  if(result.type==="USER_BY_BLOCK"){
      //   controller.UserType=result.type;
      // }
      if (result.type === "TOUSER_BY_BLOCK") {
        controller.messageModel.message_type = "BLOCK";

        controller.UserType = "SEND_MESSAGE";
      }
      // if(result.type==="SEND_MESSAGE_REQUEST"){
      //   controller.UserType=result.type;
      // }
      // if(result.type==="SEND_MESSAGE"){
      //   controller.UserType=result.type;
      //  // controller.errorMsg=result.type;
      // }
    }, function (error) { });


  }


  //   $scope.$watch("$ctrl.messageModel.send_to", function(newVal, oldVal) {
  //     if(!newVal){
  //         return;
  //     }

  //     var req={
  //         user_id:controller.user.user_id,
  //         send_to:newVal
  //     }
  //     messagesservice.check_user_currentuser(req,function(result){



  //         },function(error){});

  //   });
  controller.send = function () {

    if (controller.UserType === "USER_BY_BLOCK") {
      var reqBlock = {
        user_id: controller.user.user_id,
        block_user_id: controller.messageModel.send_to
        
      }


      useractions.update_user_block(reqBlock, function (result) {
        if (result.success) {
          messagesservice.toaster_msg('Successfully unbloked');
          controller.onBlur();

        }


      }, function (error) { });
      return;

    }
    if (controller.UserType === "SEND_MESSAGE_REQUEST") {

      var reqMsg = {
        user_id: controller.user.user_id,
        request_user_id: controller.messageModel.send_to,
        request_type: "MESSAGE",
        request_status: "UNREAD"

      }

      useractions.send_request(reqMsg, function (result) {
        if (result.success) {
          messagesservice.toaster_msg('Successfully sent');
          controller.cancel();

        }


      }, function (error) { });
      return;

    }
    if (controller.UserType === "SEND_MESSAGE") {
      messagesservice.send_message(controller.messageModel, function (result) {

        if (result.success) {
          messagesservice.toaster_msg('Message Successfully send');
          controller.cancel();
          $rootScope.$broadcast('userSendMessageBroadcast', {});
        }

      }, function (error) { });
    }

  }

  if (config.type != "NEW") {
    controller.messageModel.send_to = config.user_id;
    controller.onBlur();
  }
};
module.exports.$inject = ["useractions", "config", "$scope", "loginservice", "$uibModal", "$uibModalInstance", "$rootScope", "countryService", "messagesservice"];
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/app\\messages\\components\\compose.mail.controller.js","/app\\messages\\components")

},{"_process":"E:\\angualarjslibs\\node_modules\\process\\browser.js","buffer":"E:\\angualarjslibs\\node_modules\\buffer\\index.js"}],"E:\\angualarjslibs\\app\\messages\\components\\index.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
var angular = require('angular');
var mailCount = require('./mail-count');
var messagesView = require('./messages.view.directive');
var messagesViewDirCtrl = require('./messages.view.controller.dir');
var requestsView = require('./requests.view.directive');
var requestsViewDirCtrl = require('./requests.view.controller');
module.exports = angular.module('app.ui.messages.components',[])
.controller('messagesViewDirCtrl', messagesViewDirCtrl) 
.directive('messagesView', messagesView)
.directive('mailCount', mailCount)
.controller('requestsViewDirCtrl', requestsViewDirCtrl) 
.directive('requestsView', requestsView);
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/app\\messages\\components\\index.js","/app\\messages\\components")

},{"./mail-count":"E:\\angualarjslibs\\app\\messages\\components\\mail-count.js","./messages.view.controller.dir":"E:\\angualarjslibs\\app\\messages\\components\\messages.view.controller.dir.js","./messages.view.directive":"E:\\angualarjslibs\\app\\messages\\components\\messages.view.directive.js","./requests.view.controller":"E:\\angualarjslibs\\app\\messages\\components\\requests.view.controller.js","./requests.view.directive":"E:\\angualarjslibs\\app\\messages\\components\\requests.view.directive.js","_process":"E:\\angualarjslibs\\node_modules\\process\\browser.js","angular":"angular","buffer":"E:\\angualarjslibs\\node_modules\\buffer\\index.js"}],"E:\\angualarjslibs\\app\\messages\\components\\mail-count.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
/* @ngInject */
module.exports = function (loginservice,$rootScope,messagesservice) {
    return {
        restrict: 'E',
        scope:{
            viewType:"="
       },
        templateUrl:'./app/messages/components/mail-count.html',
        controllerAs:'$ctrl',
        controller: [
            '$scope',
            '$element',
            '$attrs',
            function ($scope, $element, $attrs) {
               
                var controller=this;

                $scope.$watch('viewType', function (n, v) {
                    
                            if (!n) { return; }
                    
                            controller.viewType = n;
                           
                        });
               
                controller.composemail=function(){

                    messagesservice.composemail("lg");
                }
                var req={
                    user_id:$rootScope.login_user_id,
                    searchType: "SENT"
                }
                messagesservice.get_messages_count(req,function(result){

                    console.log(result)
                },function(error){

                });
                
            }
        ]
    };
};
module.exports.$inject = ["loginservice", "$rootScope", "messagesservice"];
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/app\\messages\\components\\mail-count.js","/app\\messages\\components")

},{"_process":"E:\\angualarjslibs\\node_modules\\process\\browser.js","buffer":"E:\\angualarjslibs\\node_modules\\buffer\\index.js"}],"E:\\angualarjslibs\\app\\messages\\components\\messages.view.controller.dir.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
/* @ngInject */
module.exports = function messagesViewDirCtrl($scope, $uibModal, $rootScope, messagesservice, loginservice, toastr) {

    var controller = this;
    controller.limit = 10;
    controller.total = 0;
    controller.page = 1;
    controller.pages = 0;
    controller.maxSize = 5;
    controller.messageIds = [];
    controller.start = 0;
    controller.end = 0;
    var req = {
        user_id: $rootScope.login_user_id,
        page: controller.page,
        limit: controller.limit,
        dataType:"ALL",
        searchType: ""
    };

    $scope.$watch('viewType', function (n, v) {

        if (!n) { return; }

        controller.viewType = n;
        req.searchType = n;
        req.page = 1;
        controller.loadViewType();
    });
    controller.loadViewType = function () {
        console.log("load " + controller.viewType);
        controller.messageIds = [];
        controller.selectedAll = false;


        messagesservice.get_messages(req, function (result) {

            setMessagesData(result);

        }, function () {

        });

    };


    controller.pageChanged = function () {

        controller.selectedAll = false;

        controller.page = controller.page;

        req.page = controller.page;
        controller.loadViewType();

    };


    function setMessagesData(result) {
        controller.messages = [];
        controller.pages = result.pages;
        controller.total = result.total;
        controller.messages = result.docs;

        controller.start = (controller.page - 1) * controller.limit + 1;
        controller.end = controller.start + result.docs.length - 1;
    }
    controller.checkAll = function () {
        controller.messageIds = [];
        if (controller.selectedAll) {
            controller.selectedAll = true;
        } else {
            controller.selectedAll = false;
        }
        angular.forEach(controller.messages, function (message) {
            message.Selected = controller.selectedAll;
            if (message.Selected) {
                controller.messageIds.push(message._id);
            }

        });

    };
    controller.checkBoxSelect = function () {
        controller.messageIds = [];
        angular.forEach(controller.messages, function (message) {
            if (message.Selected) {
                controller.messageIds.push(message._id);
            }


        });

    };

controller.configScollBar = {
        autoHideScrollbar: true,
        theme: 'rounded-dark',
        axis: 'y',
        setHeight: 473,
        scrollInertia: 0,
        scrollButtons: {
            scrollAmount: 'auto', // scroll amount when button pressed 
            enable: true // enable scrolling buttons by default 
        },
        advanced: {
            updateOnContentResize: true
        }
    };

    controller.photoView = {
        pos: "top",
        templateUrl: './app/admin/user/viewuser/photo.view.html'

    };

    controller.popImg = function (index) {

        controller.ImgIndex = index;

    };

    function broadcastComplete() {
        controller.loadViewType();
        $rootScope.$broadcast('userMessageDeleteBroadcast', {});
    }
    controller.delete = function (target) {
        var req = {
            ids: controller.messageIds,
            fields: {}


        };


        if (target === "DELETEFOREVRYONE") {
            req.fields = {
                "creater_response": "DELETEFOREVRYONE",

            };
        }
        if (target === "DELETEFORME") {
            req.fields = {
                "creater_response": "DELETEFORME",

            };
        }

        if (target === "DELETE") {


            req.fields = {
                "reciver_response": "DELETE",

            };
        }

        var modalInstance = $uibModal.open({
            animation: true,
            windowClass: "",
            templateUrl: './app/popuptemplates/delete.modal.html',
            controller: ["$scope", function ($scope) {
                var main = this;
                main.type="PROCEED";
                main.yes = function () {
                    finalDelete();
                };
                main.no = function () {
                    modalInstance.dismiss('cancel');
                };


            }],
            controllerAs: '$ctrl',
            size: "lg",
            backdrop: 'static',
            keyboard: false,
            resolve: {

            }

        });

        function finalDelete() {
            messagesservice.update_message_status(req, function (result) {
                if (result.success) {
                    messagesservice.toaster_msg("Successfully Deleted");
                    modalInstance.dismiss('cancel');
                    broadcastComplete();
                }


            }, function () {

            });

        }

    };
    controller.markRead = function (type) {
        var req = {
            ids: controller.messageIds,
            fields: {
                message_status: "READ"
            }


        };
        messagesservice.update_message_status(req, function (result) {
            if (result.success) {
                messagesservice.toaster_msg("Successfully Marked");
                controller.loadViewType();
                
            }


        }, function () {

        });

    };
    controller.viewMessage = function (config, msgId) {

        if (controller.viewType === "SENT") {
            messagesservice.composemail(config);
            return;
        }
        messagesservice.readMsg(config, msgId);
   };
    var userSendMessageBroadcast = $rootScope.$on('userSendMessageBroadcast', function ($event, get_messages_count) {

        controller.loadViewType();


    });
    $rootScope.$on('$destroy', function () {


        userSendMessageBroadcast();

    });


};
module.exports.$inject = ["$scope", "$uibModal", "$rootScope", "messagesservice", "loginservice", "toastr"];
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/app\\messages\\components\\messages.view.controller.dir.js","/app\\messages\\components")

},{"_process":"E:\\angualarjslibs\\node_modules\\process\\browser.js","buffer":"E:\\angualarjslibs\\node_modules\\buffer\\index.js"}],"E:\\angualarjslibs\\app\\messages\\components\\messages.view.directive.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
/* @ngInject */
module.exports = function () {
    return {
        restrict: 'EA',
        scope:{
             viewType:"="
        },
        templateUrl: './app/messages/components/messages.view.directive.html',
        controller: 'messagesViewDirCtrl',
        controllerAs:'$ctrl',
        link:function($scope, $element, $attrs){




        }
    };
};
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/app\\messages\\components\\messages.view.directive.js","/app\\messages\\components")

},{"_process":"E:\\angualarjslibs\\node_modules\\process\\browser.js","buffer":"E:\\angualarjslibs\\node_modules\\buffer\\index.js"}],"E:\\angualarjslibs\\app\\messages\\components\\requests.view.controller.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
/* @ngInject */
module.exports = function requestsViewDirCtrl($scope, $uibModal, $rootScope, messagesservice, loginservice, toastr) {
    
        var controller = this;
        controller.whosent="FROM";
        controller.limit = 10;
        controller.total = 0;
        controller.page = 1;
        controller.pages = 0;
        controller.maxSize = 5;
        controller.requestIds = [];
        controller.start = 0;
        controller.end = 0;
        var req = {
            user_id: $rootScope.login_user_id,
            page: controller.page,
            limit: controller.limit,
            searchType: "",
            request_type:$scope.requestType
        };
    
        $scope.$watch('viewType', function (n, v) {
    
            if (!n) { return; }
    
            controller.viewType = n;
            controller.requestType=$scope.requestType;
            req.searchType = n;
            req.page = 1;
            if(n==="SENT"){
                controller.whosent="SENT";
            }else{
                controller.whosent="FROM";
            }
            controller.loadViewType();
        });
        controller.loadViewType = function () {
            
            controller.requestIds = [];
            controller.selectedAll = false;
    
    
            messagesservice.get_requests(req, function (result) {
   
                setMessagesData(result);
    
            }, function () {
    
            });
    
        };
    
    
        controller.pageChanged = function () {
    
            controller.selectedAll = false;
    
            controller.page = controller.page;
    
            req.page = controller.page;
            controller.loadViewType();
    
        };
    
    
        function setMessagesData(result) {
            controller.requests = [];
            controller.pages = result.pages;
            controller.total = result.total;
            controller.requests = result.docs;
    
            controller.start = (controller.page - 1) * controller.limit + 1;
            controller.end = controller.start + result.docs.length - 1;
        }
        controller.checkAll = function () {
            controller.requestIds = [];
            if (controller.selectedAll) {
                controller.selectedAll = true;
            } else {
                controller.selectedAll = false;
            }
            angular.forEach(controller.requests, function (req) {
                req.Selected = controller.selectedAll;
                if (req.Selected) {
                    controller.requestIds.push(req._id);
                }
    
            });
    
        };
        controller.checkBoxSelect = function () {
            controller.requestIds = [];
            angular.forEach(controller.requests, function (req) {
                if (req.Selected) {
                    controller.requestIds.push(req._id);
                }
    
    
            });
    
        };
    
    
    
    
        controller.configScollBar = {
            autoHideScrollbar: true,
            theme: 'rounded-dark',
            axis: 'y',
            setHeight: 473,
            scrollInertia: 0,
            scrollButtons: {
                scrollAmount: 'auto', // scroll amount when button pressed 
                enable: true // enable scrolling buttons by default 
            },
            advanced: {
                updateOnContentResize: true
            }
        };
    
        
    
        function broadcastComplete() {
            controller.loadViewType();
            $rootScope.$broadcast('userRequestsBroadcastUpdate', {});
        }
        controller.action = function (target,ids) {
            var req = {
                ids: ids,
                update_type:"UPDATE",
                request_type:$scope.requestType,
                fields: {}
    
    
            };
    
            if (target === "ACCEPTED") {
                req.fields = {
                    "request_action": "ACCEPTED",
                    "request_status":"UNREAD",
                    "recived_on":new Date()
    
                };
            }
            if (target === "PENDING") {
                req.fields = {
                    "request_action": "PENDING",
                    "request_status":"READ",
                    "recived_on":new Date()
    
                };
            }
            if (target === "REJECTED") {
                req.fields = {
                    "request_action": "REJECTED",
                    "request_status":"UNREAD",
                    "recived_on":new Date()
    
                };
            }
            if (target === "DELETEFOREVRYONE") {
                req.fields = {
                    "creater_response": "DELETEFOREVRYONE",
                    "request_status":"READ",
                    "recived_on":new Date()
    
                };
            }
            if (target === "DELETEFORME") {
                req.fields = {
                    "creater_response": "DELETEFORME",
                    "request_status":"READ",
                    "recived_on":new Date()
    
                };
            }
    
            if (target === "DELETE") {
    
    
                req.fields = {
                    "reciver_response": "DELETE",
                    "request_status":"READ",
                    "recived_on":new Date()
    
                };
            }
    
            var modalInstance = $uibModal.open({
                animation: true,
                windowClass: "",
                templateUrl: './app/popuptemplates/delete.modal.html',
                controller: ["$scope", function ($scope) {
                    var main = this;
                    main.type="PROCEED";
                    main.yes = function () {
                        finalaction();
                    };
                    main.no = function () {
                        modalInstance.dismiss('cancel');
                    };
    
    
                }],
                controllerAs: '$ctrl',
                size: "lg",
                backdrop: 'static',
                keyboard: false,
                resolve: {
    
                }
    
            });
    
            function finalaction() {
                messagesservice.update_requests(req, function (result) {
                    if (result.success) {
                        messagesservice.toaster_msg("Successfully updated");
                        modalInstance.dismiss('cancel');
                        broadcastComplete();
                    }
    
    
                }, function () {
    
                });
    
            }
    
        };
       
     
    
    
    };
    module.exports.$inject = ["$scope", "$uibModal", "$rootScope", "messagesservice", "loginservice", "toastr"];
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/app\\messages\\components\\requests.view.controller.js","/app\\messages\\components")

},{"_process":"E:\\angualarjslibs\\node_modules\\process\\browser.js","buffer":"E:\\angualarjslibs\\node_modules\\buffer\\index.js"}],"E:\\angualarjslibs\\app\\messages\\components\\requests.view.directive.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
/* @ngInject */
module.exports = function () {
    return {
        restrict: 'EA',
        scope:{
             viewType:"=",
             requestType:"="
        },
        templateUrl: './app/messages/components/requests.view.directive.html',
        controller: 'requestsViewDirCtrl',
        controllerAs:'$ctrl',
        link:function($scope, $element, $attrs){




        }
    };
};
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/app\\messages\\components\\requests.view.directive.js","/app\\messages\\components")

},{"_process":"E:\\angualarjslibs\\node_modules\\process\\browser.js","buffer":"E:\\angualarjslibs\\node_modules\\buffer\\index.js"}],"E:\\angualarjslibs\\app\\messages\\index.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
'use strict';

var angular = require('angular');
var routes = require('./messages.route');
var messagescomponents = require('./components');
var composeMailController = require('./components/compose.mail.controller');
var RequestController = require('./request/Request.controller');
var mailController = require('./mail/mail.controller');
var messagesService = require('./service');
module.exports = angular.module('app.ui.messages', [messagesService.name,messagescomponents.name])
    .run(routes)
    .controller('composeMailController', composeMailController) 
    .controller('RequestController', RequestController) 
    .controller('mailController', mailController);
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/app\\messages\\index.js","/app\\messages")

},{"./components":"E:\\angualarjslibs\\app\\messages\\components\\index.js","./components/compose.mail.controller":"E:\\angualarjslibs\\app\\messages\\components\\compose.mail.controller.js","./mail/mail.controller":"E:\\angualarjslibs\\app\\messages\\mail\\mail.controller.js","./messages.route":"E:\\angualarjslibs\\app\\messages\\messages.route.js","./request/Request.controller":"E:\\angualarjslibs\\app\\messages\\request\\Request.controller.js","./service":"E:\\angualarjslibs\\app\\messages\\service\\index.js","_process":"E:\\angualarjslibs\\node_modules\\process\\browser.js","angular":"angular","buffer":"E:\\angualarjslibs\\node_modules\\buffer\\index.js"}],"E:\\angualarjslibs\\app\\messages\\mail\\mail.controller.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
/* @ngInject */
module.exports = function mailController($location, $scope, $timeout, $rootScope, loginservice, messagesservice) {
    var controller = this;

    controller.viewType = "INBOX";

    function loadCounts() {

        var reqCount = {
            user_id: $rootScope.login_user_id

        };
        messagesservice.get_messages_count(reqCount, function (result) {

            if (result.length > 0) {
                controller.msgCounts = result[0];
            }



        }, function (error) {

        });


    }
    loadCounts();
    controller.composemail = function () {

        var config = {

            type: "NEW"

        };

        messagesservice.composemail(config);
    };
    controller.loadType = function (type) {
        controller.viewType = type;
    };

    var userMessageDeleteBroadcast = $rootScope.$on('userMessageDeleteBroadcast', function ($event, get_messages_count) {

        loadCounts();


    });

    var userSendMessageBroadcast = $rootScope.$on('userSendMessageBroadcast', function ($event, get_messages_count) {

        loadCounts();


    });
    $rootScope.$on('$destroy', function () {

        userMessageBroadcast();
        userSendMessageBroadcast();

    });
};
module.exports.$inject = ["$location", "$scope", "$timeout", "$rootScope", "loginservice", "messagesservice"];
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/app\\messages\\mail\\mail.controller.js","/app\\messages\\mail")

},{"_process":"E:\\angualarjslibs\\node_modules\\process\\browser.js","buffer":"E:\\angualarjslibs\\node_modules\\buffer\\index.js"}],"E:\\angualarjslibs\\app\\messages\\messages.route.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
/* @ngInject */
module.exports = function myHomeRoutes(Router) {
    Router.configureRoutes([
        {
            name: "root.mail",
            config: {
                url: '/mail',
                views: {
                    '@': {
                        templateUrl: "app/messages/mail/mail.html",
                        controller: "mailController as $ctrl"
                    }
                },
                params: {
                    permisstion: "ALLUSER"
                },
                title: 'messages'
            }
        },
          {
            name: "root.photo_request",
            config: {
                url: '/photo_request',
                views: {
                    '@': {
                        templateUrl: "app/messages/request/request.html",
                        controller: "RequestController as $ctrl"
                    }
                },
                params: {
                    permisstion: "ALLUSER",
                    requestType:"PHOTO",
                    viewType:"RECEIVED"
                },
                title: 'photo_request'
            }
        },
        {
            name: "root.message_request",
            config: {
                url: '/message_request',
                views: {
                    '@': {
                        templateUrl: "app/messages/request/request.html",
                        controller: "RequestController as $ctrl"
                    }
                },
                params: {
                    permisstion: "ALLUSER",
                    requestType:"MESSAGE",
                    viewType:"RECEIVED"
                },
                title: 'message_request'
            }
        },
        {
            name: "root.contact_request",
            config: {
                url: '/contact_request',
                views: {
                    '@': {
                        templateUrl: "app/messages/request/request.html",
                        controller: "RequestController as $ctrl"
                    }
                },
                params: {
                    permisstion: "ALLUSER",
                    requestType:"CONTACT",
                    viewType:"RECEIVED"
                },
                title: 'contact_request'
            }
        },
    ]);
};
module.exports.$inject = ["Router"];
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/app\\messages\\messages.route.js","/app\\messages")

},{"_process":"E:\\angualarjslibs\\node_modules\\process\\browser.js","buffer":"E:\\angualarjslibs\\node_modules\\buffer\\index.js"}],"E:\\angualarjslibs\\app\\messages\\request\\Request.controller.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
/* @ngInject */
module.exports = function RequestController($state,$location, $scope, $timeout, $rootScope, loginservice, messagesservice) {
    var controller = this;


    controller.viewType = $state.params.viewType;
    controller.requestType = $state.params.requestType;

    function loadCounts() {

        var reqCount = {
            user_id: $rootScope.login_user_id,
            request_type: controller.requestType

        };
        messagesservice.get_requests_count(reqCount, function (result) {
           
            if (result.length > 0) {
                controller.reqCounts = result[0];
            }



        }, function (error) {

        });


    }
    function readall() {
        var reqUpdate = {
            user_id: $rootScope.login_user_id,
            update_type: "READALL",
            request_type: controller.requestType,
            fields: {

            }
        };

        messagesservice.update_requests(reqUpdate, function (result) {
            

if(result.result.nModified>0){
    $rootScope.$broadcast('updateNotificationsCount', {});
}
            loadCounts();

        }, function (error) {

        });
    }

    readall();
    controller.loadType = function (type) {
        controller.viewType = type;
    };

    var userRequestsBroadcastUpdate = $rootScope.$on('userRequestsBroadcastUpdate', function ($event, get_messages_count) {

        loadCounts();


    });

   
    $rootScope.$on('$destroy', function () {

        userRequestsBroadcastUpdate();
       

    });
};
module.exports.$inject = ["$state", "$location", "$scope", "$timeout", "$rootScope", "loginservice", "messagesservice"];
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/app\\messages\\request\\Request.controller.js","/app\\messages\\request")

},{"_process":"E:\\angualarjslibs\\node_modules\\process\\browser.js","buffer":"E:\\angualarjslibs\\node_modules\\buffer\\index.js"}],"E:\\angualarjslibs\\app\\messages\\service\\index.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
'use strict';
var angular = require('angular');

//services//
var messages=require('./messages.service');

module.exports = angular.module('app.ui.messages.services', [])

.factory("messagesservice",messages);
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/app\\messages\\service\\index.js","/app\\messages\\service")

},{"./messages.service":"E:\\angualarjslibs\\app\\messages\\service\\messages.service.js","_process":"E:\\angualarjslibs\\node_modules\\process\\browser.js","angular":"angular","buffer":"E:\\angualarjslibs\\node_modules\\buffer\\index.js"}],"E:\\angualarjslibs\\app\\messages\\service\\messages.service.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
/* @ngInject */
module.exports = function ($http,toastr, $sessionStorage, $localStorage, ServiceUrls, $location, $uibModal, $rootScope) {
var service={

    send_message: function (data, success, error) {
        $http.post(ServiceUrls.BASEURL + ServiceUrls.SEND_MESSAGE, data).success(success).error(error);
    },
   get_messages: function (data, success, error) {
        $http.post(ServiceUrls.BASEURL + ServiceUrls.GET_MESSAGES, data).success(success).error(error);
    },
readMsg:function(config,msgId){

    var req = {
        ids: [msgId],
        fields: {
            message_status: "READ"
        }


    };
    var main=this;
    main.update_message_status(req, function (result) {
        if (result.success) {
            main.composemail(config);
            $rootScope.$broadcast('userMessageReadBroadcast', {});
            
        }


    }, function () {});
},
    update_message_status: function (data, success, error) {
        $http.post(ServiceUrls.BASEURL + ServiceUrls.CHANGE_MESSAGE_STATUS, data).success(success).error(error);
    },
    get_messages_count: function (data, success, error) {
        $http.post(ServiceUrls.BASEURL + ServiceUrls.GET_MESSAGES_COUNT, data).success(success).error(error);
    },
    get_requests_count: function (data, success, error) {
        $http.post(ServiceUrls.BASEURL + ServiceUrls.GET_REQUESTS_COUNT, data).success(success).error(error);
    },
    get_requests: function (data, success, error) {
        $http.post(ServiceUrls.BASEURL + ServiceUrls.GET_REQUESTS, data).success(success).error(error);
    },
    update_requests: function (data, success, error) {
        $http.post(ServiceUrls.BASEURL + ServiceUrls.UPDATE_REQUESTS, data).success(success).error(error);
    },
    check_user_currentuser: function (data, success, error) {
        $http.post(ServiceUrls.BASEURL + ServiceUrls.CHECK_USER_CURRENTUSER, data).success(success).error(error);
    },
    getParameterByName:function(name, url) {
        if (!url) {url = window.location.href};
        name = name.replace(/[\[\]]/g, "\\$&");
        var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),
            results = regex.exec(url);
        if (!results) {return null};
        if (!results[2]) {return ''};
        return decodeURIComponent(results[2].replace(/\+/g, " "));
    },
toaster_msg:function(msg){
    toastr.success(msg);

},
toaster_msg_error:function(msg){
    toastr.error(msg);

},
    composemail:function (config) {
        var modalInstance = $uibModal.open({
        animation: true,
       
        templateUrl: './app/messages/components/compose.mail.html',
        controller: 'composeMailController',
        controllerAs: '$ctrl',
        size: "lg",
        backdrop: 'static',
        keyboard: false,
        resolve: {
            config: function () {
                return config;
            }
        }
    
   });
 }


}
return service;

}
module.exports.$inject = ["$http", "toastr", "$sessionStorage", "$localStorage", "ServiceUrls", "$location", "$uibModal", "$rootScope"];    
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/app\\messages\\service\\messages.service.js","/app\\messages\\service")

},{"_process":"E:\\angualarjslibs\\node_modules\\process\\browser.js","buffer":"E:\\angualarjslibs\\node_modules\\buffer\\index.js"}],"E:\\angualarjslibs\\app\\my-home\\add-photos\\AddPhotos.controller.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
/* @ngInject */
module.exports = function AddPhotosController($location,$scope,$timeout,$rootScope,loginservice) {
    var controller = this;
    var pics=loginservice.getProfilePic();
	
	//$scope.images =pics.album;
	function getAlbumPs(){
		loginservice.getCurrentUserSession(function(userDe){
			
			loginservice.getAlbumPics({user_id:userDe.user_id,photo_type: 'ALBUM'},function(ps){
	
	$scope.images=ps;
			});
				});
	}
	getAlbumPs();
   
				/*****************************************************/
				controller.UploadAlbum = function () {
                   
					loginservice.getCurrentUserSession(function(userDe){
						//console.log(userDe)
						var user = {
                            user_id: userDe.user_id,
                            skip_url: 'root.addphotos',
							photo_type: 'ALBUM',
							from_sec: 'userAlbum'
                           
                        };
					loginservice.openCropPopup(user);
							});
                };
				$scope.$on('userAlbumPhotoBoradcastToDisplay', function ($event,photo){

					getAlbumPs();

var img={
	id:photo._id,
	
};
				});
			

};
module.exports.$inject = ["$location", "$scope", "$timeout", "$rootScope", "loginservice"];
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/app\\my-home\\add-photos\\AddPhotos.controller.js","/app\\my-home\\add-photos")

},{"_process":"E:\\angualarjslibs\\node_modules\\process\\browser.js","buffer":"E:\\angualarjslibs\\node_modules\\buffer\\index.js"}],"E:\\angualarjslibs\\app\\my-home\\components\\album.galary.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
/* @ngInject */
module.exports = function () {
    return {
        restrict: 'E',
        templateUrl:'./app/my-home/components/album.html',
        controllerAs:'$ctrl',
        scope:{
            album:"="

        },
        controller: [
            '$scope',
            '$element',
            '$attrs',
            function ($scope, $element, $attrs) {
                var controller=this;
                $scope.$watch('album', function (newVal, oldVal) {
                    if (!newVal) {
                        return;
                    }
                    console.log(newVal)
                    controller.images=newVal;
                    
                });
                controller.conf = {
					imgAnim : 'revolve'
				};
                controller.addPhoto = function(){
					var n = Math.floor(Math.random() * 13) + 1;
					controller.images.push(
						{
							url : '/demo/demo-images/' + n + '.jpg',
							thumbUrl : '/demo/demo-images/thumbs/' + n + '.jpg',
							bubbleUrl : '/demo/demo-images/bubbles/' + n + '.jpg'
						}
					);
				};
				
				controller.removePhoto = function(){
					if(controller.images.length > 1) {controller.images.pop();}
				};
				// Thumbnails
				controller.thumbnails = true;
				controller.toggleThumbnails = function(){
					controller.thumbnails = !controller.thumbnails;
				};
				// Inline
				controller.inline = false;
				controller.toggleInline = function(){
					controller.inline = !controller.inline;
				};
				// Bubbles
				controller.bubbles = true;
				controller.toggleBubbles = function(){
					controller.bubbles = !controller.bubbles;
				};
				// Image bubbles
				controller.imgBubbles = true;
				controller.toggleImgBubbles = function(){
					controller.imgBubbles = !controller.imgBubbles;
				};
				// Background close
				controller.bgClose = true;
				controller.closeOnBackground = function(){
					controller.bgClose = !controllere.bgClose;
				};
				// Gallery methods gateway
				controller.methods = {};
				controller.openGallery = function(){
					controller.methods.open();
				};
				// Gallery callbacks
				controller.opened = function(){
					console.info('Gallery opened!');
				};
				controller.closed = function(){
					console.warn('Gallery closed!');
				};
				controller.delete = function(img, cb){
					cb();
				};
                
            }
        ]
    };
};
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/app\\my-home\\components\\album.galary.js","/app\\my-home\\components")

},{"_process":"E:\\angualarjslibs\\node_modules\\process\\browser.js","buffer":"E:\\angualarjslibs\\node_modules\\buffer\\index.js"}],"E:\\angualarjslibs\\app\\my-home\\components\\basicSearchBox.directive.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
/* @ngInject */
module.exports = function () {
    return {
        restrict: 'E',
        templateUrl:'./app/my-home/components/basicSearchBox.html',
        controllerAs:'basic',
        controller: [
            '$scope',
            '$element',
            '$attrs',
            function ($scope, $element, $attrs) {
                var controller=this;
               
                controller.status={open:false};
            }
        ]
    };
};
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/app\\my-home\\components\\basicSearchBox.directive.js","/app\\my-home\\components")

},{"_process":"E:\\angualarjslibs\\node_modules\\process\\browser.js","buffer":"E:\\angualarjslibs\\node_modules\\buffer\\index.js"}],"E:\\angualarjslibs\\app\\my-home\\components\\calendarBox.directive.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
/* @ngInject */
module.exports = function () {
    return {
        restrict: 'E',
        templateUrl:'./app/my-home/components/calendarBox.html',
        controllerAs:'calendarBox',
        controller: [
            '$scope',
            '$element',
            '$attrs',
            function ($scope, $element, $attrs) {
                var controller=this;
                controller.today = function() {
    controller.dt = new Date();
  };
   controller.options = {
    
   
    showWeeks: false
  };
  controller.today();
                
            }
        ]
    };
};
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/app\\my-home\\components\\calendarBox.directive.js","/app\\my-home\\components")

},{"_process":"E:\\angualarjslibs\\node_modules\\process\\browser.js","buffer":"E:\\angualarjslibs\\node_modules\\buffer\\index.js"}],"E:\\angualarjslibs\\app\\my-home\\components\\completeYourProfile.directive.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
/* @ngInject */
module.exports = function ($viewusers,$location, $state, loginservice, $rootScope) {
    return {
        restrict: 'E',
        templateUrl: './app/my-home/components/completeYourProfile.html',
        scope: {
            profileType: "@",
            userId: "="
        },
        controllerAs: 'completeYourProfile',
        controller: [
            '$scope',
            '$element',
            '$attrs',
            function ($scope, $element, $attrs) {
                var controller = this;
                controller.ACTIONS_USER = ['CHANGE_PHOTO','ADD_PHOTO', 'EDIT_PROFILE', 'SETINGS', 'EDIT_PARTNER_PREFERENCES'];
                controller.ACTIONS_USER_BIG = ['CHANGE_PHOTO',"EDIT_MY_PROFILE", "EDIT_CONTACT_DETAILS", "ADDPHOTOS", "EDIT_PARTNER_PREFERENCES"];
                //ng-click="registerFormCtrl.openImageUploadWindow({user_id:form.user_id,skip_url:'/viewusers',photo_type:'PROFILE',from_sec:'userEdit'})"
                controller.pTooltipCnfig={
                    tpl:"./app/my-home/components/profile_photo_tooltip.html",
                    pos:'bottom'

                };
                controller.goToUserAction = function (action) {
                    if (action === "ADD_PHOTO" || action === "CHANGE_PHOTO") {
                        var user = {
                            user_id: $scope.userId,
                            skip_url: 'root.dashboard',
                            photo_type: 'PROFILE',
                            from_sec: 'userEdit'
                        };
                        loginservice.openCropPopup(user);
                        return;
                    }
                    if (action === "EDIT_MY_PROFILE" || action === "EDIT_PROFILE") {
                      $state.go('root.editprofile', {editType:0});
             
                        return;
                    }
                    if (action === "EDIT_CONTACT_DETAILS") {
                     $state.go('root.editprofile', {editType:1});
                 
                        return;
                    }
                    if (action === "EDIT_PARTNER_PREFERENCES") {
                       $state.go('root.editprofile', {editType:2});
                   
                      
                        return;
                    }
                    if (action === "ADDPHOTOS") {
                        $state.go('root.addphotos');
                      
                        return;
                    }
                    if (action === "SETINGS") {
                        $state.go('root.settings');
                      
                        return;
                    }
                };
               
               controller.user = $rootScope.current_user_de_all;
                var pics=loginservice.getProfilePic();
                controller.pic = pics.profile;
                controller.ProfilePercentage = {

                    width: calculateProfilePercentage($rootScope.current_user_de_all) + "%"
                };
                if(controller.user.basicinfos[0] && controller.user.basicinfos[0].updated_on){
                    controller.LastUpdateDate=controller.user.basicinfos[0].updated_on;

                }
                else{
                    controller.LastUpdateDate=controller.user.basicinfos[0].created_on;
                }
                controller.LastUpdateDate=controller.user.basicinfos[0].updated_on || controller.user.basicinfos[0].created_on;
                var userPhotoBoradcastToDisplay= $rootScope.$on('userPhotoBoradcastToDisplay', function ($event, pic) {
                    controller.pic = pic;
                    loginservice.setProfilePic(pic);
                });
                var userProfileUpdate=$rootScope.$on('userProfileUpdate', function ($event, msg) {
                    controller.user = $rootScope.current_user_de_all;
                    if(controller.user.basicinfos[0] && controller.user.basicinfos[0].updated_on){
                        controller.LastUpdateDate=controller.user.basicinfos[0].updated_on;
    
                    }
                    else{
                        controller.LastUpdateDate=controller.user.basicinfos[0].created_on;
                    } 
                    controller.ProfilePercentage = {
                        width: calculateProfilePercentage($rootScope.current_user_de_all) + "%"
                        
                       };
                });
                function calculateProfilePercentage(user) {
                    var p = 0;

                    if (user.more_info_vr) {
                        p += 25;
                        if (user.basicinfos[0].gothram) {
                            p += 1;
                        }
                        if (user.basicinfos[0].subcaste) {
                            p += 1;
                        }
                        //usereducations
                        if (user.usereducations[0].filed_study) {
                            p += 1;
                        }
                        if (user.usereducations[0].company) {
                            p += 1;
                        }
                        if (user.usereducations[0].designation) {
                            p += 1;
                        }
                        //userintrests
                        if (user.userintrests[0].weight) {
                            p += 1;
                        }
                        if (user.userintrests[0].complexion) {
                            p += 1;
                        }
                        if (user.userintrests[0].body_type) {
                            p += 1;
                        }
                        if (user.userintrests[0].hobbie) {
                            p += 1;
                        }
                        if (user.userintrests[0].expectation) {
                            p += 1;
                        }
                        //userfamilies//
                        if (user.userfamilies[0].father) {
                            p += 1;
                        }
                        if (user.userfamilies[0].father_occupation) {
                            p += 1;
                        }
                        if (user.userfamilies[0].mother) {
                            p += 1;
                        }
                        if (user.userfamilies[0].siblings) {
                            p += 1;
                        }
                        if (user.userfamilies[0].mosal) {
                            p += 1;
                        }
                        if (user.userfamilies[0].address) {
                            p += 1;
                        }
                        if (user.userfamilies[0].city) {
                            p += 1;
                        }
                        if (user.userfamilies[0].native_place) {
                            p += 1;
                        }
                        if (user.userfamilies[0].time_birth_hr) {
                            p += 1;
                        }
                        if (user.userfamilies[0].time_birth_min) {
                            p += 1;
                        }
                        if (user.userfamilies[0].place_birth) {
                            p += 1;
                        }
                        if (user.userfamilies[0].horoscope) {
                            p += 1;
                        }
                        if (user.userfamilies[0].zodiac) {
                            p += 1;
                        }
                        if (user.userfamilies[0].aincome) {
                            p += 1;
                        }
                        if (user.userfamilies[0].manglik || !user.userfamilies[0].manglik) {
                            p += 1;
                        }
                        //  if(user.userfamilies[0].beleave_hor || !user.userfamilies[0].beleave_hor ){
                        //      p+=1;
                        //  }
                    }
                    if (user.email_vr) {
                        p += 25;
                    }
                    if (user.pic.length > 0) {
                        // p +=25;
                        if (user.pic[0].photo_vr) {
                            p += 25;
                        }
                    }
                    return p;
                }
                controller.profileType = $scope.profileType;

                $rootScope.$on('$destroy', function () {
                    
                    
                    userPhotoBoradcastToDisplay();
                    userProfileUpdate();
                    
                                    });


            }
        ]
    };
};
module.exports.$inject = ["$viewusers", "$location", "$state", "loginservice", "$rootScope"];
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/app\\my-home\\components\\completeYourProfile.directive.js","/app\\my-home\\components")

},{"_process":"E:\\angualarjslibs\\node_modules\\process\\browser.js","buffer":"E:\\angualarjslibs\\node_modules\\buffer\\index.js"}],"E:\\angualarjslibs\\app\\my-home\\components\\index.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
var angular = require('angular');
var searchById = require('./searchById.directive');
var messagesBox = require('./messagesBox.directive');
var basicSearchBox = require('./basicSearchBox.directive');
var myPocket = require('./myPocket.directive');
var completeYourProfile = require('./completeYourProfile.directive');
var calendarBox = require('./calendarBox.directive');
var preferredMatchesBox = require('./preferredMatchesBox.directive');
var userActionsTabs = require('./userActionsTabs.directive');
var albumGalary = require('./album.galary');
module.exports = angular.module('app.ui.myhome.components',[])
    .directive('searchById', searchById)
    .directive('albumGalary', albumGalary)
    .directive('messagesBox', messagesBox)
    .directive('basicSearchBox', basicSearchBox)
    .directive('myPocket', myPocket)
    .directive('completeYourProfile', completeYourProfile)
    .directive('calendarBox', calendarBox)
    .directive('preferredMatchesBox', preferredMatchesBox)
    .directive('userActionsTabs', userActionsTabs);
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/app\\my-home\\components\\index.js","/app\\my-home\\components")

},{"./album.galary":"E:\\angualarjslibs\\app\\my-home\\components\\album.galary.js","./basicSearchBox.directive":"E:\\angualarjslibs\\app\\my-home\\components\\basicSearchBox.directive.js","./calendarBox.directive":"E:\\angualarjslibs\\app\\my-home\\components\\calendarBox.directive.js","./completeYourProfile.directive":"E:\\angualarjslibs\\app\\my-home\\components\\completeYourProfile.directive.js","./messagesBox.directive":"E:\\angualarjslibs\\app\\my-home\\components\\messagesBox.directive.js","./myPocket.directive":"E:\\angualarjslibs\\app\\my-home\\components\\myPocket.directive.js","./preferredMatchesBox.directive":"E:\\angualarjslibs\\app\\my-home\\components\\preferredMatchesBox.directive.js","./searchById.directive":"E:\\angualarjslibs\\app\\my-home\\components\\searchById.directive.js","./userActionsTabs.directive":"E:\\angualarjslibs\\app\\my-home\\components\\userActionsTabs.directive.js","_process":"E:\\angualarjslibs\\node_modules\\process\\browser.js","angular":"angular","buffer":"E:\\angualarjslibs\\node_modules\\buffer\\index.js"}],"E:\\angualarjslibs\\app\\my-home\\components\\messagesBox.directive.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
/* @ngInject */
module.exports = function () {
    return {
        templateUrl:'./app/my-home/components/messagesbox.html',
        replace:true,
        controller: [
            '$scope',
            '$element',
            '$attrs',
            function ($scope, $element, $attrs) {
               
                $scope.status={open:true};

            }
        ]
    };
};
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/app\\my-home\\components\\messagesBox.directive.js","/app\\my-home\\components")

},{"_process":"E:\\angualarjslibs\\node_modules\\process\\browser.js","buffer":"E:\\angualarjslibs\\node_modules\\buffer\\index.js"}],"E:\\angualarjslibs\\app\\my-home\\components\\myPocket.directive.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
/* @ngInject */
module.exports = function () {
    return {
        restrict: 'E',
        templateUrl:'./app/my-home/components/myPocket.html',
        controllerAs:'myPocket',
        controller: [
            '$scope',
            '$element',
            '$attrs',
            function ($scope, $element, $attrs) {
                var controller=this;
               
                controller.status={open:false};
            }
        ]
    };
};
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/app\\my-home\\components\\myPocket.directive.js","/app\\my-home\\components")

},{"_process":"E:\\angualarjslibs\\node_modules\\process\\browser.js","buffer":"E:\\angualarjslibs\\node_modules\\buffer\\index.js"}],"E:\\angualarjslibs\\app\\my-home\\components\\preferredMatchesBox.directive.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
/* @ngInject */
module.exports = function (searchService,$crypto, $state,loginservice, matcheservice, useractions, $rootScope) {
    return {
        restrict: 'E',
        templateUrl: './app/my-home/components/preferredMatchesBox.html',
        controllerAs: 'preferredMatchesBox',
        scope: {
            title: '='
        },
        controller: [
            '$scope',
            '$element',
            '$attrs',
            function ($scope, $element, $attrs) {
                var controller = this;
                controller.title = $scope.title;
                controller.goToFullProfile=function(id){
                    
                     $state.go("root.fullprofile",{
                         id: $crypto.encrypt(id),
                         isblock:false
                     });
                   };
                controller.formdata = loginservice.getFiledsData();
                controller.config = {
                    autoHideScrollbar: true,
                    theme: 'rounded-dark',
                    axis: 'y',
                    setHeight: 230,
                    scrollInertia: 0,
                    scrollButtons: {
                        scrollAmount: 'auto', // scroll amount when button pressed 
                        enable: true // enable scrolling buttons by default 
                    },
                    advanced: {
                        updateOnContentResize: true
                    }
                };
                var req = {
                    page: 1,
                    limit: 10,
                    gender: $rootScope.login_user_gender,
                    fields: {}
                };
                controller.loadViewType = function () {

                    searchService.getSearchResult(req, function (result) {

                        controller.users = result.users;
                        controller.result = result;
                    }, function (error) { });
                };
                matcheservice.get_partner_pre({ user_id: $rootScope.login_user_id }, function (result) {

                    if (result) {
                        req.fields = result.fields;
                        controller.loadViewType();

                    }
                    else {

                        useractions.get_default_search_config("DEFAULT_PARTNER_PRE", "LOGIN_USER", function (fields) {

                            req.fields = fields;
                            controller.loadViewType();
                        });

                    }
                }, function (error) { });



            }
        ]
    };
};
module.exports.$inject = ["searchService", "$crypto", "$state", "loginservice", "matcheservice", "useractions", "$rootScope"];
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/app\\my-home\\components\\preferredMatchesBox.directive.js","/app\\my-home\\components")

},{"_process":"E:\\angualarjslibs\\node_modules\\process\\browser.js","buffer":"E:\\angualarjslibs\\node_modules\\buffer\\index.js"}],"E:\\angualarjslibs\\app\\my-home\\components\\searchById.directive.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
/* @ngInject */
module.exports = function ( $state, $crypto) {
    return {
        restrict: 'E',
        templateUrl:'./app/my-home/components/searchById.html',
        controller: [
            '$scope',
            '$element',
            '$attrs',
            function ($scope, $element, $attrs) {
                var controller=this;
                $scope.searchValue="";
                $scope.disabled=function(){
                    if(!$scope.searchValue){
                        return true;
                    }

                };
                $scope.search=function(){

                    $state.go("root.fullprofile",{id: $crypto.encrypt($scope.searchValue)});
                };
               
            }
        ]
    };
};
module.exports.$inject = ["$state", "$crypto"];
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/app\\my-home\\components\\searchById.directive.js","/app\\my-home\\components")

},{"_process":"E:\\angualarjslibs\\node_modules\\process\\browser.js","buffer":"E:\\angualarjslibs\\node_modules\\buffer\\index.js"}],"E:\\angualarjslibs\\app\\my-home\\components\\userActionsTabs.directive.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
/* @ngInject */
module.exports = function () {
    return {
        restrict: 'E',
        templateUrl:'./app/my-home/components/userActionsTabs.html',
        controllerAs:'userActionsTabs',
        scope:{
            tabs:'='
        },
        controller: [
            '$scope',
            '$element',
            '$attrs',
            function ($scope, $element, $attrs) {
                var controller=this;
               
               controller.tabs=$scope.tabs;
controller.loadTab=function(index){
    
                   for(var i=0;i<controller.tabs.length;i++){
                       if(i===index){
                          controller.tabs[index].active=true; 
                       }
                     else{
                           controller.tabs[i].active=false;  
                      }
                   }

               };
            }
        ]
    };
};
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/app\\my-home\\components\\userActionsTabs.directive.js","/app\\my-home\\components")

},{"_process":"E:\\angualarjslibs\\node_modules\\process\\browser.js","buffer":"E:\\angualarjslibs\\node_modules\\buffer\\index.js"}],"E:\\angualarjslibs\\app\\my-home\\dashboard\\Dashboard.controller.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
/* @ngInject */
module.exports = function DashboardController($rootScope,cfpLoadingBar) {
 // console.log(cfpLoadingBar);
 // cfpLoadingBar.start();
 
    var controller = this;
    controller.profile = {};
   
    controller.today = function() {
    controller.dt = new Date();
  };
   controller.options = {
    
   
    showWeeks: false
  };
  controller.today();
    activate();

    /**
     * Initiate Controller.
     */
    function activate() {
      
    }
  
 controller.tabs1=[
                       {
                          name:"Wish List",
                          count:130,
                          active:true,
                           users:[]
                        },
                         {
                          name:"Profile Visitors",
                          count:301,
                          active:false,
                           users:[]
                        },
                         {
                          name:"Viewed My Profiles ",
                          count:320,
                          active:false,
                           users:[]
                        },
                         {
                          name:"Recently Viewed",
                          count:30,
                          active:false,
                           users:[]
                        }

];
      
controller.tabs2=[
                       {
                          name:"Preferred Location",
                          count:130,
                          active:true,
                           users:[]
                        },
                         {
                          name:"Preferred Education",
                          count:301,
                          active:false,
                           users:[]
                        },
                         {
                          name:"Preferred Occupation",
                          count:320,
                          active:false,
                           users:[]
                        }

];


};
module.exports.$inject = ["$rootScope", "cfpLoadingBar"];
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/app\\my-home\\dashboard\\Dashboard.controller.js","/app\\my-home\\dashboard")

},{"_process":"E:\\angualarjslibs\\node_modules\\process\\browser.js","buffer":"E:\\angualarjslibs\\node_modules\\buffer\\index.js"}],"E:\\angualarjslibs\\app\\my-home\\edit-my-profile\\edit.my.profile.ctrl.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
/* @ngInject */
module.exports = function editMyProfileController(useractions,messagesservice, $stateParams, matcheservice, searchService, $rootScope) {
    var controller = this;
    controller.editUserId = $rootScope.login_user_id;
    console.log($stateParams)
    controller.active=$stateParams.editType;
 
    function loadPartnerPreFields(){
        matcheservice.get_partner_pre({ user_id: $rootScope.login_user_id }, function (result) {
            
                    if (result) {
            
                        controller.fields = result.fields;
            
                    }
                    else {
                        useractions.get_default_search_config("DEFAULT_PARTNER_PRE","LOGIN_USER",function(fields){
                           
                           // controller.fields = "PARTNER_PRE_FIRST";
                           controller.fields =fields;
            
                        });
                       
            
                    }
                }, function (error) { });
    }
  
    controller.savePartnerPre = function (fields) {
        var req = {
            user_id: $rootScope.login_user_id,
            fields: fields
        };
        matcheservice.save_partner_pre(req, function (result) {

            messagesservice.toaster_msg("Successfully saved");


        }, function (error) { });
    };
    loadPartnerPreFields();
    var userProfileUpdate=$rootScope.$on('userProfileUpdate', function ($event, msg) {
       
        loadPartnerPreFields();
    });
    $rootScope.$on('$destroy', function () {
     userProfileUpdate();
        
                        });
};
module.exports.$inject = ["useractions", "messagesservice", "$stateParams", "matcheservice", "searchService", "$rootScope"];
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/app\\my-home\\edit-my-profile\\edit.my.profile.ctrl.js","/app\\my-home\\edit-my-profile")

},{"_process":"E:\\angualarjslibs\\node_modules\\process\\browser.js","buffer":"E:\\angualarjslibs\\node_modules\\buffer\\index.js"}],"E:\\angualarjslibs\\app\\my-home\\index.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
'use strict';

var angular = require('angular');
var routes = require('./myhome.route');
var myhomecomponents = require('./components');
var DashboardController = require('./dashboard/Dashboard.controller');
var MyProfileController = require('./my-profile/MyProfile.controller');
var AddPhotosController = require('./add-photos/AddPhotos.controller');
var editMyProfileController = require('./edit-my-profile/edit.my.profile.ctrl');

module.exports = angular.module('app.ui.myhome', [myhomecomponents.name])
    .run(routes)
    .controller('DashboardController', DashboardController)
    .controller('MyProfileController', MyProfileController)
    .controller('AddPhotosController', AddPhotosController)
    .controller('editMyProfileController', editMyProfileController)
    .filter('joinname', function () {
        return function join(array, separator, prop) {
            if (!Array.isArray(array)) {
                return array; // if not array return original - can also throw error
            }

            return (!!prop ? array.map(function (item) {
                return item[prop];
            }) : array).join(separator);
        };
    }).filter('joinnameother', function () {
        return function join(array, separator, prop, values) {
            if (!Array.isArray(array)) {
                return array; // if not array return original - can also throw error
            }

            var arr = [];
            for (var i = 0; i < array.length; i++) {
                var itm = array[i];

                for (var j = 0; j < values.length; j++) {

                    if (itm === values[j].value) {

                        arr.push(values[j]);
                    }
                }

            }


            return (!!prop ? arr.map(function (item) {
                return item[prop];
            }) : arr).join(separator);
        };
    }).filter('country', ["countryService", function (countryService) {
        return function join(array) {
            if (!Array.isArray(array)) {
                return array; // if not array return original - can also throw error
            }
            countryService.getCountries(function (res) {

                var arr = [];
                for (var i = 0; i < array.length; i++) {
                    var itm = array[i];

                    for (var j = 0; j < res.length; j++) {

                        if (itm === res[j].id) {

                            arr.push(res[j]);
                        }
                    }

                }
                var prop = "name";

                return (!!prop ? arr.map(function (item) {
                    return item[prop];
                }) : arr).join(", ");
            }, function () { });
        };
    }]).directive("ngTextTruncate", ["$compile", "ValidationServices", "CharBasedTruncation", "WordBasedTruncation",
        function ($compile, ValidationServices, CharBasedTruncation, WordBasedTruncation) {
            return {
                restrict: "A",
                scope: {
                    text: "=ngTextTruncate",
                    charsThreshould: "@ngTtCharsThreshold",
                    wordsThreshould: "@ngTtWordsThreshold",
                    customMoreLabel: "@ngTtMoreLabel",
                    customLessLabel: "@ngTtLessLabel"
                },
                controller: ["$scope", "$element", "$attrs", function ($scope, $element, $attrs) {
                    $scope.toggleShow = function () {
                        $scope.open = !$scope.open;
                    };

                    $scope.useToggling = $attrs.ngTtNoToggling === undefined;
                }],
                link: function ($scope, $element, $attrs) {
                    $scope.open = false;

                    ValidationServices.failIfWrongThreshouldConfig($scope.charsThreshould, $scope.wordsThreshould);

                    var CHARS_THRESHOLD = parseInt($scope.charsThreshould);
                    var WORDS_THRESHOLD = parseInt($scope.wordsThreshould);

                    $scope.$watch("text", function () {
                        $element.empty();

                        if (CHARS_THRESHOLD) {
                            if ($scope.text && CharBasedTruncation.truncationApplies($scope, CHARS_THRESHOLD)) {
                                CharBasedTruncation.applyTruncation(CHARS_THRESHOLD, $scope, $element);

                            } else {
                                $element.append($scope.text);
                            }

                        } else {

                            if ($scope.text && WordBasedTruncation.truncationApplies($scope, WORDS_THRESHOLD)) {
                                WordBasedTruncation.applyTruncation(WORDS_THRESHOLD, $scope, $element);

                            } else {
                                $element.append($scope.text);
                            }

                        }
                    });
                }
            };
        }])



    .factory("ValidationServices", function () {
        return {
            failIfWrongThreshouldConfig: function (firstThreshould, secondThreshould) {
                if ((!firstThreshould && !secondThreshould) || (firstThreshould && secondThreshould)) {
                    throw "You must specify one, and only one, type of threshould (chars or words)";
                }
            }
        };
    })



    .factory("CharBasedTruncation", ["$compile", function ($compile) {
        return {
            truncationApplies: function ($scope, threshould) {
                return $scope.text.length > threshould;
            },

            applyTruncation: function (threshould, $scope, $element) {
                if ($scope.useToggling) {
                    var el = angular.element("<span>" +
                        $scope.text.substr(0, threshould) +
                        "<span ng-show='!open'>...</span>" +
                        "<span style='color:blue' class='btn-link ngTruncateToggleText' " +
                        "ng-click='toggleShow()'" +
                        "ng-show='!open'>" +
                        " " + ($scope.customMoreLabel ? $scope.customMoreLabel : "More") +
                        "</span>" +
                        "<span ng-show='open'>" +
                        $scope.text.substring(threshould) +
                        "<span style='color:blue' class='btn-link ngTruncateToggleText'" +
                        "ng-click='toggleShow()'>" +
                        " " + ($scope.customLessLabel ? $scope.customLessLabel : "Less") +
                        "</span>" +
                        "</span>" +
                        "</span>");
                    $compile(el)($scope);
                    $element.append(el);

                } else {
                    $element.append($scope.text.substr(0, threshould) + "...");

                }
            }
        };
    }])



    .factory("WordBasedTruncation", ["$compile", function ($compile) {
        return {
            truncationApplies: function ($scope, threshould) {
                return $scope.text.split(" ").length > threshould;
            },

            applyTruncation: function (threshould, $scope, $element) {
                var splitText = $scope.text.split(" ");
                if ($scope.useToggling) {
                    var el = angular.element("<span>" +
                        splitText.slice(0, threshould).join(" ") + " " +
                        "<span ng-show='!open'>...</span>" +
                        "<span style='color:blue' class='btn-link ngTruncateToggleText' " +
                        "ng-click='toggleShow()'" +
                        "ng-show='!open'>" +
                        " " + ($scope.customMoreLabel ? $scope.customMoreLabel : "More") +
                        "</span>" +
                        "<span ng-show='open'>" +
                        splitText.slice(threshould, splitText.length).join(" ") +
                        "<span style='color:blue' class='btn-link ngTruncateToggleText'" +
                        "ng-click='toggleShow()'>" +
                        " " + ($scope.customLessLabel ? $scope.customLessLabel : "Less") +
                        "</span>" +
                        "</span>" +
                        "</span>");
                    $compile(el)($scope);
                    $element.append(el);

                } else {
                    $element.append(splitText.slice(0, threshould).join(" ") + "...");
                }
            }
        };
    }]);
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/app\\my-home\\index.js","/app\\my-home")

},{"./add-photos/AddPhotos.controller":"E:\\angualarjslibs\\app\\my-home\\add-photos\\AddPhotos.controller.js","./components":"E:\\angualarjslibs\\app\\my-home\\components\\index.js","./dashboard/Dashboard.controller":"E:\\angualarjslibs\\app\\my-home\\dashboard\\Dashboard.controller.js","./edit-my-profile/edit.my.profile.ctrl":"E:\\angualarjslibs\\app\\my-home\\edit-my-profile\\edit.my.profile.ctrl.js","./my-profile/MyProfile.controller":"E:\\angualarjslibs\\app\\my-home\\my-profile\\MyProfile.controller.js","./myhome.route":"E:\\angualarjslibs\\app\\my-home\\myhome.route.js","_process":"E:\\angualarjslibs\\node_modules\\process\\browser.js","angular":"angular","buffer":"E:\\angualarjslibs\\node_modules\\buffer\\index.js"}],"E:\\angualarjslibs\\app\\my-home\\my-profile\\MyProfile.controller.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
/* @ngInject */
module.exports = function MyProfileController(useractions,$location,$scope, matcheservice, $timeout,loginservice, countryService, $rootScope) {
    var controller = this;
   controller.formdata = loginservice.getFiledsData();
  function loadCoun(array){
        countryService.getCountries(function (res) {
            
            var arr = [];
            for (var i = 0; i < array.length; i++) {
                var itm = array[i];
    
                for (var j = 0; j < res.length; j++) {
    
                    if (itm === res[j].id) {
    
                        arr.push(res[j]);
                    }
                }
    
            }
            var prop = "name";
    
            controller.countries= (!!prop ? arr.map(function (item) {
                return item[prop];
            }) : arr).join(", ");
        }, function () { });
    }
 
    var country = $rootScope.current_user_de_all.basicinfos[0].country;
    var state = $rootScope.current_user_de_all.basicinfos[0].state;
    var city = $rootScope.current_user_de_all.basicinfos[0].city;
    var loc = {
        cn: country,
        st: state,
        ci: city
    };
    countryService.getUserLoc(loc, function (result) {
        controller.userLocation = result;
    }, function () { });

    var hindu = controller.formdata.rhindu;
    var muslim = controller.formdata.rmuslim;
    var christian = controller.formdata.rchristian;

    controller.casteData=[];
    controller.loadCaste = function (rel) {
        if (rel === "HINDU") {
            controller.casteData = hindu;
            return;
        }
        if (rel === "ISLAM") {
            controller.casteData = muslim;
            return;
        }
        if (rel === "CHR") {
            controller.casteData = christian;
            return;
        }
       
        controller.casteData = [{
           
            name: "Other",
            value: rel + "OTH"

        }];

    };
    matcheservice.get_partner_pre({ user_id: $rootScope.login_user_id }, function (result) {
        
                if (result) {
       
                    controller.fieldPartnerPre = result.fields;
                    loadCoun(controller.fieldPartnerPre.country);
        
                }
                else{
                   
    useractions.get_default_search_config("DEFAULT_PARTNER_PRE","LOGIN_USER",function(fields){
       
        controller.fieldPartnerPre = fields;
        loadCoun(controller.fieldPartnerPre.country);
            });
                   
                }
            }, function (error) { });

};
module.exports.$inject = ["useractions", "$location", "$scope", "matcheservice", "$timeout", "loginservice", "countryService", "$rootScope"];
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/app\\my-home\\my-profile\\MyProfile.controller.js","/app\\my-home\\my-profile")

},{"_process":"E:\\angualarjslibs\\node_modules\\process\\browser.js","buffer":"E:\\angualarjslibs\\node_modules\\buffer\\index.js"}],"E:\\angualarjslibs\\app\\my-home\\myhome.route.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
/* @ngInject */
module.exports = function myHomeRoutes(Router) {
    Router.configureRoutes([
        {
            name: "root.dashboard",
            config: {
                url: '/dashboard',
                views: {
                    '@': {
                        templateUrl: "app/my-home/dashboard/dashboard.html",
                        controller: "DashboardController as ctrl"
                    }
                },
                params: {
                    permisstion: "ALLUSER"
                },
                title: ' Dashboard'
            }
        },
          {
            name: "root.myprofile",
            config: {
                url: '/myprofile',
                views: {
                    '@': {
                        templateUrl: "app/my-home/my-profile/my-profile.html",
                        controller: "MyProfileController as ctrl"
                    }
                },
                params: {
                    permisstion: "ALLUSER"
                },
                title: 'My Profile'
            }
        },
          {
            name: "root.addphotos",
            config: {
                url: '/addphotos',
                views: {
                    '@': {
                        templateUrl: "app/my-home/add-photos/add-photos.html",
                        controller: "AddPhotosController as ctrl"
                    }
                },
                params: {
                    permisstion: "ALLUSER"
                },
                title: 'Add Photos'
            }
        },
        {
            name: "root.editprofile",
            config: {
                url: '/editprofile',
                views: {
                    '@': {
                        templateUrl: "app/my-home/edit-my-profile/edit-my-profile.html",
                        controller: "editMyProfileController as ctrl"
                    }
                },
               
                params: {
                    permisstion: "ALLUSER",
                    editType:0
                  
                },
                title: 'editprofile'
            }
        }
    ]);
};
module.exports.$inject = ["Router"];
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/app\\my-home\\myhome.route.js","/app\\my-home")

},{"_process":"E:\\angualarjslibs\\node_modules\\process\\browser.js","buffer":"E:\\angualarjslibs\\node_modules\\buffer\\index.js"}],"E:\\angualarjslibs\\app\\public\\index.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
'use strict';

var angular = require('angular');

var landingModule = require('./landing');
//var loginService = require('./../http-service/login/login.service');
module.exports = angular.module('app.ui.public', [ landingModule.name]);
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/app\\public\\index.js","/app\\public")

},{"./landing":"E:\\angualarjslibs\\app\\public\\landing\\index.js","_process":"E:\\angualarjslibs\\node_modules\\process\\browser.js","angular":"angular","buffer":"E:\\angualarjslibs\\node_modules\\buffer\\index.js"}],"E:\\angualarjslibs\\app\\public\\landing\\index.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
var angular = require('angular');

var landingRoutes = require('./landing.route');
var LandingController = require('./landing.controller');

module.exports = angular.module('app.ui.landing', [])
    .run(landingRoutes)
    .controller('LandingController', LandingController);
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/app\\public\\landing\\index.js","/app\\public\\landing")

},{"./landing.controller":"E:\\angualarjslibs\\app\\public\\landing\\landing.controller.js","./landing.route":"E:\\angualarjslibs\\app\\public\\landing\\landing.route.js","_process":"E:\\angualarjslibs\\node_modules\\process\\browser.js","angular":"angular","buffer":"E:\\angualarjslibs\\node_modules\\buffer\\index.js"}],"E:\\angualarjslibs\\app\\public\\landing\\landing.controller.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
/* @ngInject */
module.exports = function LandingController($location) {
    var controller = this;
    controller.profile = {};
    controller.onSubmit = onSubmit;
controller.today = function() {
    controller.dt = new Date();
  };
   controller.options = {
    
   
    showWeeks: false
  };
  controller.today();
    activate();

    /**
     * Initiate Controller.
     */
    function activate() {
        controller.info = 'Patinet login Controller';
    }
  
    function onSubmit() {
      

// // controller.profile.username="biru@gmail.com";

// // controller.profile.password="123456";
// loginservice.login(controller.profile).then(function(res){
 
//   if(res.data.success){
//      sessionStorage.setItem('token', res.data.token);
//      
//   }
//   else{
//     controller.error="Invalid username or password";

//   }
  
// });

    }

};
module.exports.$inject = ["$location"];
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/app\\public\\landing\\landing.controller.js","/app\\public\\landing")

},{"_process":"E:\\angualarjslibs\\node_modules\\process\\browser.js","buffer":"E:\\angualarjslibs\\node_modules\\buffer\\index.js"}],"E:\\angualarjslibs\\app\\public\\landing\\landing.route.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
/* @ngInject */
module.exports = function LandingRoutes(Router) {
    Router.configureRoutes([
        {
            name: "root.landing",
            config: {
                url: '/landing',
                views: {
                    
                    '@': {
                        templateUrl: "app/public/landing/landing.html",
                        controller: "LandingController as ctrl"
                    }
                },
                title: 'Landing'
            }
        }
    ]);
};
module.exports.$inject = ["Router"];
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/app\\public\\landing\\landing.route.js","/app\\public\\landing")

},{"_process":"E:\\angualarjslibs\\node_modules\\process\\browser.js","buffer":"E:\\angualarjslibs\\node_modules\\buffer\\index.js"}],"E:\\angualarjslibs\\app\\registration-login\\components\\basic.info.ctrl.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
/* @ngInject */
module.exports = function ($uibModal, toastr, $viewusers, $filter, countryService, loginservice, $rootScope) {
    return {
        restrict: 'E',
        templateUrl: './app/registration-login/components/basic-info.html',
        controllerAs: 'ctrl',
        scope: {
            userId: "=",
            isAdmin: "=",
            isMoreinfoEdit: "="
        },
        controller: [
            '$scope',
            '$element',
            '$attrs',
            function ($scope, $element, $attrs) {
                var controller = this;
                controller.editMode = false;
                controller.isAdmin = $scope.isAdmin;
               if ($scope.isMoreinfoEdit) {
                    controller.editMode = true;
                }

                function setUserData(user){
                    if (user.basicinfos.length > 0) {
                        
                                                    var countryId = user.basicinfos[0].country;
                                                    var stateId = user.basicinfos[0].state;
                                                    var religion = user.basicinfos[0].religion;
                                                    controller.loadCaste(religion);
                                                    controller.loadState(countryId);
                                                    controller.loadCity(stateId);
                                                    $scope.basicinfo = user.basicinfos[0];
                                                    $scope.educationwork = user.usereducations[0];
                                                    $scope.intrests = user.userintrests[0];
                                                    $scope.family = user.userfamilies[0];
                                                    $scope.intrests.height = $scope.intrests.height;
                        
                                                }
                }

                $scope.$watch('userId', function (n, v) {
                    if (!n) { return; }

                    controller.userId = n;
                    if (controller.editMode && controller.isAdmin) {
                        controller.loaduserDetails(n);
                    }
                    if(controller.editMode && !controller.isAdmin){
                        setUserData($rootScope.current_user_de_all);
                    }

                });


                controller.formdata = loginservice.getFiledsData();
                //open login modal//
                controller.openLoginModal = function (size) {
                    var modalInstance = $uibModal.open({
                        animation: true,
                        windowClass: "login-model",
                        templateUrl: './app/registration-login/login-modal/login.html',
                        controller: 'LoginController',
                        controllerAs: 'ctrl',
                        size: size

                    });
                };
                //wizard menu///
                controller.moreInfoTabsmenu = [{
                    id: "basic",
                    translateKey: "BASIC_MORE_DETAILS",
                    active: false
                },
                {
                    id: "education",
                    translateKey: "EDUCATION_&_WORK_INFO",
                    active: false
                },
                {
                    id: "interests",
                    translateKey: "YOUR_LOOK_&_INTERESTS",
                    active: false
                },
                {
                    id: "family",
                    translateKey: "FAMILY_BACKGROUND_&_HOROSCOPE",
                    active: false
                }
                ];
                controller.openTabContent = function (tabID) {
                    for (var i = 0; i < controller.moreInfoTabsmenu.length; i++) {
                        if (controller.moreInfoTabsmenu[i].id === tabID) {
                            controller.moreInfoTabsmenu[i].active = true;

                        } else {
                            if (controller.editMode) {
                                controller.moreInfoTabsmenu[i].active = true;
                            }
                            else {
                                controller.moreInfoTabsmenu[i].active = false;
                            }


                        }
                    }

                };

                controller.openTabContent('basic');

                //load basic info data//
                var hindu = controller.formdata.rhindu;
                var muslim = controller.formdata.rmuslim;
                var christian = controller.formdata.rchristian;

                var noCaste = [ {
                    "name": "Any",
                    "value": "ANYONE"
                }];
                controller.loadCaste = function (rel) {
                    if (rel === "HINDU") {
                        controller.casteData = hindu;
                        return;
                    }
                    if (rel === "ISLAM") {
                        controller.casteData = muslim;
                        return;
                    }
                    if (rel === "CHR") {
                        controller.casteData = christian;
                        return;
                    }
                   
                    controller.casteData = [{
                       
                        name: "Other",
                        value: rel + "OTH"
        
                    }];

                };
                controller.required = function (key) {
                    return $filter('translate')(key);
                };
                var unique = function (origArr) {
                    var newArr = [],
                        origLen = origArr.length,
                        found, x, y;

                    for (x = 0; x < origLen; x++) {
                        found = undefined;
                        for (y = 0; y < newArr.length; y++) {
                            if (origArr[x].state === newArr[y].state) {
                                found = true;
                                break;
                            }
                        }
                        if (!found) {
                            newArr.push(origArr[x]);
                        }
                    }
                    return newArr;
                };
                //load country details//
                controller.countriesCodes = controller.formdata.countriesWithCode;
                countryService.getCountries(function (res) {
                    controller.countrys = res;
                }, function () { });


                controller.loadState = function (countryId) {

                    countryService.getStates(countryId, function (res) {
                        controller.states = res;
                    }, function () { });
                };
                controller.loadCity = function (stateId) {
                    countryService.getCities(stateId, function (res) {
                        controller.cities = res;
                        // controller.cities.push({ id: "other", name: "Other" });
                    }, function () { });
                };

                //education work ///
                //  open help me write modal//
                controller.OpenHelpMeWorkModal = function (size) {
                    var modalInstance = $uibModal.open({
                        animation: true,
                        windowClass: "",
                        templateUrl: './app/registration-login/help-me-write/help-me-write.html',
                        controller: 'HelpMeWriteController',
                        controllerAs: 'ctrl',
                        size: size

                    });
                };
                //hobbies
                controller.hobbies = controller.formdata.hobbies;
                controller.zodiac = controller.formdata.zodiac;

                //phone validation//
                controller.phoneValidator = function (phone) {
                    var re = /[0-9]{10}/;

                    if (!re.test(phone)) {
                        return $filter('translate')('PHONE_VALIDATION_MESSAGE');
                    }
                    if (phone.length < 10 || phone.length > 10) {
                        return $filter('translate')('PHONE_VALIDATION_MESSAGE');
                    }

                    return true;

                };
                controller.openDisplayPhotoUploadModal = function (size) {
                    loginservice.openCropPopup({});
                    //  var modalInstance = $uibModal.open({
                    //             animation: true,
                    //             windowClass: "",
                    //             templateUrl: './app/registration-login/crop-modal/crop-modal.html',
                    //             controller: 'CropModalController',
                    //             controllerAs: 'ctrl',
                    //             size: size,
                    //             backdrop: 'static',
                    //             keyboard: false

                    //         });
                };

                var regisFormSubmitStatus = $rootScope.$on('regisFormSubmitStatus', function ($event, registerform) {

                    if (controller.editMode) {
                        controller.registerform = registerform;
                    }

                });

                controller.submitMoreInfo = function (basicinfo, educationwork, intrests, family) {

                    intrests.height = parseFloat(intrests.height);

                    // if (family.beleave_hor) {
                    //     family.beleave_hor = "YES";
                    // }
                    // else {
                    //     family.beleave_hor = "NO";
                    // }
                    // if (family.manglik) {
                    //     family.manglik = "YES";
                    // }
                    // else {
                    //     family.manglik = "NO";
                    // }

                    //family.time_birth_min=parseInt(family.time_birth_min);
                    //family.time_birth_hr=parseInt(family.time_birth_hr);

                    var req = {
                        "user_id": controller.userId,
                        "basicinfo": basicinfo,
                        "educationwork": educationwork,
                        "intrests": intrests,
                        "family": family
                    };

                    loginservice.savemoreinfo(req, function (res) {
                       
                        var skip_url="";
                        if (res.success && !controller.editMode) {
                            toastr.success('Saved Successfully');
                            if ($scope.isAdmin) {

                                skip_url = "root.viewusers";

                            }
                            else {

                                skip_url = "root.dashboard";
                            }
                            
                              var config={
                                user_id: controller.userId,
                                from_sec:'userEntry',
                                photo_type:'PROFILE',
                                skip_url:skip_url
                              };
                            
                            loginservice.openCropPopup(config);
                            

                        }
                        if (controller.editMode && $scope.isAdmin) {
                            updateRegisterForm();
                        }
                        if(!$scope.isAdmin){
                            loginservice.getCureentUser(controller.userId,function(result){
                                
                                $rootScope.$broadcast('userProfileUpdate');
                                
                                                       });

                        }
                        if(controller.editMode){
                            toastr.success('Updated Successfully');
                        }


                    }, function () {

                    });


                };

                function updateRegisterForm() {


                    var regisform = {
                        "user_id": controller.userId,
                        "email": controller.registerform.email.$modelValue,
                        "password": controller.registerform.password.$modelValue,
                        "first_name": controller.registerform.first_name.$modelValue,
                        "last_name": controller.registerform.last_name.$modelValue,
                        "day": controller.registerform.day.$modelValue,
                        "month": controller.registerform.month.$modelValue,
                        "year": controller.registerform.year.$modelValue,
                        "country_code": controller.registerform.country_code.$modelValue,
                        "phone_number": controller.registerform.phone_number.$modelValue,
                        "gender": controller.registerform.sex.$modelValue,
                        "created_by": controller.registerform.created_by.$modelValue

                    };
                    regisform.dob = new Date(regisform.year + "-" + regisform.month + "-" + regisform.day);
                    regisform.age = loginservice.calculate_age(regisform.month, regisform.day, regisform.year);


                    loginservice.updateUser(regisform, function (res) {
                        if (res.success) {

                            toastr.success('Updated Successfully');
                        }

                    }, function () { });
                }


                
                controller.loaduserDetails = function (userId) {
                    $viewusers.getUser({ user_id: userId }, function (result) {

                        setUserData(result.user);
                       
                     }, function () {

                    });
                };
                $rootScope.$on('$destroy', function () {

                    regisFormSubmitStatus();

                });

            }
        ]
    };
};
module.exports.$inject = ["$uibModal", "toastr", "$viewusers", "$filter", "countryService", "loginservice", "$rootScope"];
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/app\\registration-login\\components\\basic.info.ctrl.js","/app\\registration-login\\components")

},{"_process":"E:\\angualarjslibs\\node_modules\\process\\browser.js","buffer":"E:\\angualarjslibs\\node_modules\\buffer\\index.js"}],"E:\\angualarjslibs\\app\\registration-login\\components\\email-available.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
/* @ngInject */
module.exports = function ($timeout, $filter,loginservice) {
  return {
    restrict: 'A',
    require: 'ngModel',
    link: function (scope, element, attrs, ngModel) {
      element.bind('blur', function (e) {
        if (!ngModel || !element.val()){return;} 
       
      
       loginservice.checkemail({"email": element.val()}, function(res) {
         
         
         if(res.success){

         ngModel.$setValidity('unique', false);
         }
        else{
        
         
           ngModel.$setValidity('unique', true);
        }
         $timeout( function(){
        
         var elmChild=element.parent().children('.validationMessage');

         if(elmChild.text()===""){
           elmChild.text($filter('translate')('EMAIL_VALIDATION_MESSAGE_USER'));
         }
             }, 100 );
       
    }, function() {
              
            });
        
       
      });
    }
  };
};
module.exports.$inject = ["$timeout", "$filter", "loginservice"];
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/app\\registration-login\\components\\email-available.js","/app\\registration-login\\components")

},{"_process":"E:\\angualarjslibs\\node_modules\\process\\browser.js","buffer":"E:\\angualarjslibs\\node_modules\\buffer\\index.js"}],"E:\\angualarjslibs\\app\\registration-login\\components\\index.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
var angular = require('angular');
var registerForm = require('./register.form');
var angularValidator=require('./validation');
var profileImage=require('./profile-image');
var basicInfo=require('./basic.info.ctrl');
var webcam=require('./webcam');
var emailAvailable=require('./email-available');

module.exports = angular.module('app.ui.registr.components',[])
    
    .directive('registerForm', registerForm)
    .directive('angularValidator', angularValidator)
    .directive('profileImage', profileImage)
    .directive('basicInfo', basicInfo)
    .directive('webcam', webcam)
    .directive('emailAvailable', emailAvailable)
    .directive('convertToNumber', function() {
  return {
    require: 'ngModel',
    link: function(scope, element, attrs, ngModel) {

      if(attrs.convertToNumber==="height"){
        ngModel.$parsers.push(function(val) {
        
          return val !== null ? parseFloat(val) : null;
        });
        ngModel.$formatters.push(function(val) {
          return val !== null ? '' + parseFloat(val) : null;
        });
      }else{
        ngModel.$parsers.push(function(val) {
          return val !== null ? parseInt(val, 10) : null;
        });
        ngModel.$formatters.push(function(val) {
          return val !== null ? '' + val : null;
        });
      }
     
    }
  };
});
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/app\\registration-login\\components\\index.js","/app\\registration-login\\components")

},{"./basic.info.ctrl":"E:\\angualarjslibs\\app\\registration-login\\components\\basic.info.ctrl.js","./email-available":"E:\\angualarjslibs\\app\\registration-login\\components\\email-available.js","./profile-image":"E:\\angualarjslibs\\app\\registration-login\\components\\profile-image.js","./register.form":"E:\\angualarjslibs\\app\\registration-login\\components\\register.form.js","./validation":"E:\\angualarjslibs\\app\\registration-login\\components\\validation.js","./webcam":"E:\\angualarjslibs\\app\\registration-login\\components\\webcam.js","_process":"E:\\angualarjslibs\\node_modules\\process\\browser.js","angular":"angular","buffer":"E:\\angualarjslibs\\node_modules\\buffer\\index.js"}],"E:\\angualarjslibs\\app\\registration-login\\components\\profile-image.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
/* @ngInject */
module.exports = function () {
    return {

         require:"ngModel",
        restrict: 'A',
       link : function(scope, el, attrs, ngModel) {
     
      el.bind('change', function(event) {
       
         var file=event.currentTarget.files[0];
      var reader = new FileReader();
      reader.onload = function (evt) {
       
         scope.$apply(function() {
          ngModel.$setViewValue(evt.target.result);
          ngModel.$render();
        });
      };
      reader.readAsDataURL(file);
      
      });
    }
    }};
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/app\\registration-login\\components\\profile-image.js","/app\\registration-login\\components")

},{"_process":"E:\\angualarjslibs\\node_modules\\process\\browser.js","buffer":"E:\\angualarjslibs\\node_modules\\buffer\\index.js"}],"E:\\angualarjslibs\\app\\registration-login\\components\\register.form.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
/* @ngInject */
module.exports = function ($rootScope, $uibModal, $viewusers, toastr, loginservice, $admintaskservice, $timeout) {
    return {
        restrict: 'E',
        templateUrl: './app/registration-login/components/regis.form.html',
        controllerAs: 'registerFormCtrl',
        replace: true,
        scope: {
            isAdmin: "=",
            isEdit: "="
        },
        controller: [
            '$scope',
            '$element',
            '$attrs',
            '$filter',
            function ($scope, $element, $attrs, $filter) {




                var controller = this;
                controller.isAdmin = $scope.isAdmin;
                var formData =loginservice.getFiledsData();
                //date of birth//
                controller.formdata=formData;
                controller.monthsL = formData.monthsL;
                var year = new Date().getFullYear();
                var range = [];

                for (var i = 0; i < 50; i++) {
                    range.push({
                        label: year - i,
                        value: year - i
                    });
                }

                controller.years = range;
                //countrycodes//
                controller.countryCodes = formData.countriesWithCode;
                //email validation//
                controller.emailValidator = function (email) {
                    var re = /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;

                    if (!re.test(email)) {
                        return $filter('translate')('EMAIL_VALIDATION_MESSAGE');
                    }

                    return true;

                };


                //password validation//
                controller.passwordValidator = function (password) {

                    if (!password) { return; }

                    if (password.length < 6) {
                        return $filter('translate')('PASSWORD_VALIDATION_MESSAGE');
                    }

                    // if (!password.match(/[A-Z]/)) {
                    // 	 return "Password must have at least one capital letter";
                    // }

                    // if (!password.match(/[0-9]/)) {
                    // 	 return "Password must have at least one number";
                    // }

                    return true;
                };
                //dob validation/

                controller.dobValidator = function (day, month, year, gender) {

                    if (!day) {

                        return $filter('translate')('DAY_VALIDATION');

                    }
                    if (!month) {

                        return $filter('translate')('MONTH_VALIDATION');

                    }
                    if (!year) {

                        return $filter('translate')('YEAR_VALIDATION');

                    }


                    if (gender === "MALE" && loginservice.calculate_age(month, day, year) < 21) {
                        return $filter('translate')('AGE_VERIFICATION_MALE');
                    }
                    if (gender === "FEMALE" && loginservice.calculate_age(month, day, year) < 18) {
                        return $filter('translate')('AGE_VERIFICATION_FEMALE');
                    }

                    return true;
                };
                controller.required = function (key) {
                    return $filter('translate')(key);
                };
                //phone validation//
                controller.phoneValidator = function (phone) {
                    var re = /[0-9]{10}/;

                    if (!re.test(phone)) {
                        return $filter('translate')('PHONE_VALIDATION_MESSAGE');
                    }
                    if (phone.length < 10 || phone.length > 10) {
                        return $filter('translate')('PHONE_VALIDATION_MESSAGE');
                    }

                    return true;

                };

                controller.submitMyForm = function (form) {

                    form.age = loginservice.calculate_age(form.month, form.day, form.year);
                    controller.age = form.age;
                    form.dob = new Date(form.year + "-" + form.month + "-" + form.day);
                    form.created_on = new Date();
                    if (controller.isAdmin) {
                     form.uploaded_by=$rootScope.login_user_id;
                    }
                    else{
                        form.uploaded_by=form.created_by;
                    }
                    loginservice.signup(form, function (res) {

                        if (res.success) {

                            if (controller.isAdmin) {
                               
                                loginservice.openMoreInfoModal(res.user);
                            }
                            else {
                                loginservice.saveToken(res.token);
                            }



                        }


                    }, function () {

                    });


                };


                //user edit mode////////


                function setuserResetPhoto(pic) {
                    controller.pic = pic;

                }
                var userPhotoBoradcastToDisplay = $rootScope.$on('userPhotoBoradcastToDisplay', function ($event, pic) {

                    setuserResetPhoto(pic);
                    $rootScope.$broadcast('updateUserListCountEmit');


                });


                controller.backViewUser = function () {

                    $rootScope.$broadcast('backUserFromEditMode');
                };
                controller.openImageUploadWindow = function (user) {
                    loginservice.openCropPopup(user);

                };
                $scope.$watch('isEdit', function (n, v) {
                    if (!n) { return; }

                    controller.userId = n;
                    setEditMode(n);
                });


                function setEditMode(user_id) {

                    $viewusers.getUser({ "user_id": user_id }, function (result) {
                        var dateObj = new Date(result.user.dob);

                        $scope.form = {
                            "created_by": result.user.created_by,
                            "gender": result.user.gender,
                            "profile_complete_status": result.user.profile_complete_status,
                            "user_role": result.user.user_role,
                            "user_status": result.user.user_status,
                            "email": result.user.email,
                            "password": result.user.password,
                            "first_name": result.user.first_name,
                            "last_name": result.user.last_name,
                            "phone_number": result.user.phone_number,
                            "age": result.user.age,
                            "dob": result.user.dob,
                            "day": dateObj.getDate(),
                            "month": dateObj.getMonth(),
                            "year": dateObj.getFullYear(),
                            "created_on": result.user.created_on,
                            "user_id": result.user.user_id,
                            "email_vr": result.user.email_vr,
                            "country_code": result.user.country_code,
                            "phone_vr": result.user.phone_vr,
                            "more_info_vr": result.user.more_info_vr
                        };

                        if (result.user.pic.length > 0) {

                            for (var key in result.user.pic) {
                                if (result.user.pic[key].photo_type === "PROFILE") {

                                    controller.pic = result.user.pic[key];
                                }

                            }
                        }
                        else {
                            controller.pic = null;
                        }

                    }, function () {

                    });

                }
                controller.accept = function (user) {
                    controller.pic.photo_vr = true;
                    $rootScope.$broadcast('userPhotoApprove', user);

                };
                controller.reject = function (user) {

                    $admintaskservice.openRejectModal(user);

                };
                var rejectPhoto = $rootScope.$on('rejectPhoto', function ($event, user) {
                    controller.pic.photo_vr = false;
                });
                $rootScope.$on('$destroy', function () {

                    userPhotoBoradcastToDisplay();
                    rejectPhoto();

                });
                // controller.openOTPModal = function (size) {
                //     var modalInstance = $uibModal.open({
                //         animation: true,
                //         windowClass: "login-model",
                //         templateUrl: './app/registration-login/otp-verification/otp.html',
                //         controller: 'OtpVrController',
                //         controllerAs: 'ctrl',
                //         size: size,
                //         backdrop: 'static',
                //         keyboard: false

                //     });
                // };

            }
        ]
    };
};
module.exports.$inject = ["$rootScope", "$uibModal", "$viewusers", "toastr", "loginservice", "$admintaskservice", "$timeout"];
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/app\\registration-login\\components\\register.form.js","/app\\registration-login\\components")

},{"_process":"E:\\angualarjslibs\\node_modules\\process\\browser.js","buffer":"E:\\angualarjslibs\\node_modules\\buffer\\index.js"}],"E:\\angualarjslibs\\app\\registration-login\\components\\validation.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
/* @ngInject */
module.exports = function ($rootScope) {

     return {
            restrict: 'A',
            link: function(scope, element, attrs, fn) {

                // This is the DOM form element
                var DOMForm = angular.element(element)[0];

                // an array to store all the watches for form elements
                var watches = [];

                // This is the the scope form model
                // All validation states are contained here
                var form_name = DOMForm.attributes['name'].value;
                var scopeForm = scope[form_name];

                // Set the default submitted state to false
                scopeForm.submitted = false;
                
                // Watch form length to add watches for new form elements
                scope.$watch(function(){return Object.keys(scopeForm).length;}, function(){
                    // Destroy all the watches
                    
                    // This is cleaner than figuring out which items are already being watched and only un-watching those.
                    angular.forEach(watches, function(watch){watch();});
                    setupWatches(DOMForm);
                });
              

                // Intercept and handle submit events of the form
                element.on('submit', function(event) {
                    event.preventDefault();
                    scope.$apply(function() {
                        scopeForm.submitted = true;
                    });
                   

                    // If the form is valid then call the function that is declared in the angular-validator-submit attribute on the form element
                    if (scopeForm.$valid) {
                        scope.$apply(function() {
                            scope.$eval(DOMForm.attributes["angular-validator-submit"].value);
                        });
                    }
                });


                scopeForm.reset = function(){
                    // Clear all the form values
                    for (var i = 0; i < DOMForm.length; i++) {
                        if (DOMForm[i].name){
                            scopeForm[DOMForm[i].name].$setViewValue("");
                            scopeForm[DOMForm[i].name].$render();
                        }
                    }
                    scopeForm.submitted = false;
                    scopeForm.$setPristine();
                };


                // Setup watches on all form fields 
                setupWatches(DOMForm);


                // Iterate through the form fields and setup watches on each one
                function setupWatches(formElement) {
                    for (var i = 0; i < formElement.length; i++) {
                        // This ensures we are only watching form fields
                        if (i in formElement) {
                            setupWatch(formElement[i]);
                        }
                    }
                }


                // Setup $watch on a single formfield
                function setupWatch(elementToWatch) {
                    // If element is set to validate on blur then update the element on blur
                    if ("validate-on" in elementToWatch.attributes && elementToWatch.attributes["validate-on"].value === "blur") {
                        angular.element(elementToWatch).on('blur', function() {
                            updateValidationMessage(elementToWatch);
                            updateValidationClass(elementToWatch);
                        });
                    }

                    var watch = scope.$watch(function() {
                            return elementToWatch.value + elementToWatch.required + scopeForm.submitted + checkElementValidity(elementToWatch) + getDirtyValue(scopeForm[elementToWatch.name]) + getValidValue(scopeForm[elementToWatch.name]);
                        },
                        function() {
                            
                            if(scopeForm.$name==="regisForm"){
                          $rootScope.$broadcast('regisFormSubmitStatus',scopeForm);
                            }
                            if (scopeForm.submitted){
                                updateValidationMessage(elementToWatch);
                                updateValidationClass(elementToWatch);
                            }
                            else {
                                // Determine if the element in question is to be updated on blur
                                var isDirtyElement = "validate-on" in elementToWatch.attributes && elementToWatch.attributes["validate-on"].value === "dirty";

                                if (isDirtyElement){
                                    updateValidationMessage(elementToWatch);
                                    updateValidationClass(elementToWatch);
                                }
                                // This will get called in the case of resetting the form. This only gets called for elements that update on blur and submit.
                                else if (scopeForm[elementToWatch.name] && scopeForm[elementToWatch.name].$pristine){
                                    updateValidationMessage(elementToWatch);
                                    updateValidationClass(elementToWatch);
                                }
                            }

                        });

                    watches.push(watch);
                }


                // Returns the $dirty value of the element if it exists
                function getDirtyValue(element) {
                    if (element) {
                        if ("$dirty" in element) {
                            return element.$dirty;
                        }
                    }
                }


                function getValidValue(element) {
                    if (element) {
                        if ("$valid" in element) {
                            return element.$valid;
                        }
                    }
                }


                function checkElementValidity(element) {
                    // If element has a custom validation function
                    if ("validator" in element.attributes) {
                        // Call the custom validator function
                        var isElementValid = scope.$eval(element.attributes.validator.value);
                        scopeForm[element.name].$setValidity("angularValidator", isElementValid);
                        return isElementValid;
                    }
                }


                // Adds and removes an error message as a sibling element of the form field
                // depending on the validity of the form field and the submitted state of the form.
                // Will use default message if a custom message is not given
                function updateValidationMessage(element) {

                    var defaultRequiredMessage = function() {
                        return "<i class='fa fa-times'></i> Required";
                    };
                    var defaultInvalidMessage = function() {
                        return "<i class='fa fa-times'></i> Invalid";
                    };

                    // Make sure the element is a form field and not a button for example
                    // Only form elements should have names. 
                    if (!(element.name in scopeForm)) {
                        return;
                    }

                    var scopeElementModel = scopeForm[element.name];

                    // Remove all validation messages 
                    var validationMessageElement;
                    if("append-message" in element.attributes){
                              var apendElmVl=element.attributes["append-message"].value;
                         
                             validationMessageElement = isValidationMessagePresent(apendElmVl);
                           }
                   else{
                        validationMessageElement = isValidationMessagePresent(element);
                   }
                    if (validationMessageElement) {
                        validationMessageElement.remove();
                    }


                    // Only add validation messages if the form field is $dirty or the form has been submitted
                    if (scopeElementModel.$dirty || (scope[element.form.name] && scope[element.form.name].submitted)) {
                       var appendelement;
                           if("append-message" in element.attributes){
                            //   var apendElmVl=element.attributes["append-message"].value;
                             appendelement=element.attributes["append-message"].value;
                           }
                           else{
                      appendelement=element;
                           }
                        if (scopeElementModel.$error.required) {
                           
                            // If there is a custom required message display it
                            
                            if ("required-message" in element.attributes) {
                                 angular.element(appendelement).after(generateErrorMessage(element.attributes['required-message'].value));
                            }
                            // Display the default required message
                            else {
                                angular.element(appendelement).after(generateErrorMessage(defaultRequiredMessage));
                            }
                        } else if (!scopeElementModel.$valid) {
                            // If there is a custom validation message add it
                            if ("invalid-message" in element.attributes) {
                                angular.element(appendelement).after(generateErrorMessage(element.attributes['invalid-message'].value));
                            }
                            // Display the default error message
                            else {
                                angular.element(appendelement).after(generateErrorMessage(defaultInvalidMessage));
                            }
                        }
                    }
                }


                function generateErrorMessage(messageText) {
                    var msg;
                   if(scope.$eval(messageText)===true){
                          msg="";
                   }
                   else{
                       msg=scope.$eval(messageText);
                   }
                   
                    return "<label class='control-label has-error validationMessage'>" + msg + "</label>";
                }


                // Returns the validation message element or False
                function isValidationMessagePresent(element) {
                    var elementSiblings = angular.element(element).parent().children();
                    for (var i = 0; i < elementSiblings.length; i++) {
                        if (angular.element(elementSiblings[i]).hasClass("validationMessage")) {
                            return angular.element(elementSiblings[i]);
                        }
                    }
                    return false;
                }


                // Adds and removes .has-error class to both the form element and the form element's parent
                // depending on the validity of the element and the submitted state of the form
                function updateValidationClass(element) {
                    // Make sure the element is a form field and not a button for example
                    // Only form fields should have names. 
                    if (!(element.name in scopeForm)) {
                        return;
                    }
                    var formField = scopeForm[element.name];

                    // This is extra for users wishing to implement the .has-error class on the field itself
                    // instead of on the parent element. Note that Bootstrap requires the .has-error class to be on the parent element
                    angular.element(element).removeClass('has-error');
                    angular.element(element.parentNode).removeClass('has-error');


                    // Only add/remove validation classes if the field is $dirty or the form has been submitted
                    if (formField.$dirty || (scope[element.form.name] && scope[element.form.name].submitted)) {
                      if (formField.$invalid) {
                            angular.element(element.parentNode).addClass('has-error');

                            // This is extra for users wishing to implement the .has-error class on the field itself
                            // instead of on the parent element. Note that Bootstrap requires the .has-error class to be on the parent element
                            angular.element(element).addClass('has-error');
                        }
                    }
                }

            }
        };
};
module.exports.$inject = ["$rootScope"];
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/app\\registration-login\\components\\validation.js","/app\\registration-login\\components")

},{"_process":"E:\\angualarjslibs\\node_modules\\process\\browser.js","buffer":"E:\\angualarjslibs\\node_modules\\buffer\\index.js"}],"E:\\angualarjslibs\\app\\registration-login\\components\\webcam.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
/* @ngInject */
(function() {
  // GetUserMedia is not yet supported by all browsers
  // Until then, we need to handle the vendor prefixes
  navigator.getMedia = ( navigator.getUserMedia ||
                       navigator.webkitGetUserMedia ||
                       navigator.mozGetUserMedia ||
                       navigator.msGetUserMedia);

  // Checks if getUserMedia is available on the client browser
  window.hasUserMedia = function hasUserMedia() {
    return navigator.getMedia ? true : false;
  };
})();
module.exports = function () {
return {
      template: '<div class="webcam" ng-transclude></div>',
      restrict: 'E',
      replace: true,
      transclude: true,
      scope:
      {
        onError: '&',
        onStream: '&',
        onStreaming: '&',
        placeholder: '=',
        config: '=channel'
      },
      link: function postLink($scope, element) {
        var videoElem = null,
            videoStream = null,
            placeholder = null;

        $scope.config = $scope.config || {};

        var _removeDOMElement = function _removeDOMElement(DOMel) {
          if (DOMel) {
            angular.element(DOMel).remove();
          }
        };

        var onDestroy = function onDestroy() {
          if (!!videoStream ) {
            var checker = typeof videoStream.getVideoTracks === 'function';
            if(videoStream.getVideoTracks && checker) {
              // get video track to call stop in it
              // videoStream.stop() is deprecated and may be removed in the
              // near future
              // ENSURE THIS IS CHECKED FIRST BEFORE THE FALLBACK
              // videoStream.stop()
              var tracks = videoStream.getVideoTracks();
              if (tracks && tracks[0] && tracks[0].stop) {
                tracks[0].stop();
              }
            } else if (videoStream.stop) {
              // deprecated, may be removed in the near future
              videoStream.stop();
            }
          }
          if (!!videoElem) {
            delete videoElem.src;
          }
        };

        // called when camera stream is loaded
        var onSuccess = function onSuccess(stream) {
          videoStream = stream;

          // Firefox supports a src object
          if (navigator.mozGetUserMedia) {
            videoElem.mozSrcObject = stream;
          } else {
            var vendorURL = window.URL || window.webkitURL;
            videoElem.src = vendorURL.createObjectURL(stream);
          }

          /* Start playing the video to show the stream from the webcam */
          videoElem.play();
          $scope.config.video = videoElem;

          /* Call custom callback */
          if ($scope.onStream) {
            $scope.onStream({stream: stream});
          }
        };

        // called when any error happens
        var onFailure = function onFailure(err) {
          _removeDOMElement(placeholder);
          if (console && console.log) {
            console.log('The following error occured: ', err);
          }

          /* Call custom callback */
          if ($scope.onError) {
            $scope.onError({err:err});
          }

          return;
        };

        var startWebcam = function startWebcam() {
          videoElem = document.createElement('video');
          videoElem.setAttribute('class', 'webcam-live');
          videoElem.setAttribute('autoplay', '');
          element.append(videoElem);

          if ($scope.placeholder) {
            placeholder = document.createElement('img');
            placeholder.setAttribute('class', 'webcam-loader');
            placeholder.src = $scope.placeholder;
            element.append(placeholder);
          }

          // Default variables
          var isStreaming = false,
            width = element.width = $scope.config.videoWidth || 320,
            height = element.height = 0;

          // Check the availability of getUserMedia across supported browsers
          if (!window.hasUserMedia()) {
            onFailure({code:-1, msg: 'Browser does not support getUserMedia.'});
            return;
          }

          var mediaConstraint = { video: true, audio: false };
          navigator.getMedia(mediaConstraint, onSuccess, onFailure);

          /* Start streaming the webcam data when the video element can play
           * It will do it only once
           */
          videoElem.addEventListener('canplay', function() {
            if (!isStreaming) {
              var scale = width / videoElem.videoWidth;
              height = (videoElem.videoHeight * scale) ||
                        $scope.config.videoHeight;
              videoElem.setAttribute('width', width);
              videoElem.setAttribute('height', height);
              isStreaming = true;

              $scope.config.video = videoElem;

              _removeDOMElement(placeholder);

              /* Call custom callback */
              if ($scope.onStreaming) {
                $scope.onStreaming();
              }
            }
          }, false);
        };

        var stopWebcam = function stopWebcam() {
          onDestroy();
          videoElem.remove();
        };

        $scope.$on('$destroy', onDestroy);
        $scope.$on('START_WEBCAM', startWebcam);
        $scope.$on('STOP_WEBCAM', stopWebcam);

        startWebcam();

      }
    };
};
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/app\\registration-login\\components\\webcam.js","/app\\registration-login\\components")

},{"_process":"E:\\angualarjslibs\\node_modules\\process\\browser.js","buffer":"E:\\angualarjslibs\\node_modules\\buffer\\index.js"}],"E:\\angualarjslibs\\app\\registration-login\\crop-modal\\crop-modal.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
/* @ngInject */

module.exports = function CropModalController($rootScope,loginservice, $state, $uibModal, $uibModalInstance, user, $location, Upload, $timeout, ServiceUrls, toastr) {

    var controller = this;
    controller.style = {
        width: "100%",
        height: "100%",
        display: "block",
       "object-fit": "cover"
    }
    //modal close button//
    controller.cancel = function () {
        $uibModalInstance.dismiss('cancel');
    };
    //profile picture crop//
    controller.myImage = '';
    controller.myCroppedImage = '';
    controller.photo_visibility_status = true;
    controller.Iscrop=true;

    //camera //
    controller.clicked = false;
    controller.openCamera = function () {

        controller.myImage = '';
        controller.clicked = controller.clicked ? false : true;

    };
    var _video = null,
        patData = null;

    controller.patOpts = { x: 0, y: 0, w: 25, h: 25 };

    // Setup a channel to receive a photo property
    // with a reference to the video element
    // See the HTML binding in main.html
    controller.channel = {
        videoHeight: 350,
        videoWidth: 540
    };

    controller.webcamError = false;
    controller.onError = function (err) {

        controller.webcamError = err;
        controller.clicked = false;

    };

    controller.onSuccess = function () {
        // The video element contains the captured camera data
        _video = controller.channel.video;

        controller.patOpts.w = _video.width;
        controller.patOpts.h = _video.height;

    };

    controller.onStream = function (stream) {
        // You could do something manually with the stream.
    };



    controller.makeSnapshot = function () {
        if (_video) {
            var patCanvas = document.querySelector('#snapshot');
            if (!patCanvas) { return }

            patCanvas.width = _video.width;
            patCanvas.height = _video.height;
            var ctxPat = patCanvas.getContext('2d');

            var idata = getVideoData(controller.patOpts.x, controller.patOpts.y, controller.patOpts.w, controller.patOpts.h);
            ctxPat.putImageData(idata, 0, 0);

            var img = patCanvas.toDataURL();
            controller.myImage = img;

            patData = idata;

            controller.clicked = false;
        }
    };



    var getVideoData = function getVideoData(x, y, w, h) {
        var hiddenCanvas = document.createElement('canvas');
        hiddenCanvas.width = _video.width;
        hiddenCanvas.height = _video.height;
        var ctx = hiddenCanvas.getContext('2d');
        ctx.drawImage(_video, 0, 0, _video.width, _video.height);
        return ctx.getImageData(x, y, w, h);
    };

    controller.savePhoto = function (dataUrl, name) {

        // $location.path(user.skip_url);
        //  controller.cancel();
       
        controller.upload(dataUrl, name);

    };
    controller.skip = function () {
        controller.cancel();
        $state.go(user.skip_url);
    };
    controller.upload = function (dataUrl, name) {
        var uploadFile=controller.myImage;
        if(controller.Iscrop){
            uploadFile= Upload.dataUrltoBlob(controller.myCroppedImage);
           // uploadFile=controller.myCroppedImage;
        }
       // $rootScope.$broadcast('userPhotoBoradcastToResetPhoto');
        Upload.upload({
            url: ServiceUrls.BASEURL + ServiceUrls.USER_PROFILE_PHOTO_UPLOAD,
            data: {
                file: uploadFile

            },
            params: {
                user_id: user.user_id,
                photo_type: user.photo_type,
                photo_vr_msg: "PENDING_APPROVAL",
                photo_visibility_status: controller.photo_visibility_status,
                uploaded_by: $rootScope.login_user_id

            }
        }).then(function (response) {


            $timeout(function () {

                if (response.data.error_code === 0) { //validate success
                    toastr.success('Upload Successful');
                   
                    if(user.from_sec==="userEdit" || user.from_sec==="userEntry"){
                         $rootScope.$broadcast('userPhotoBoradcastToDisplay', response.data.pic);
                    }
                    if(user.from_sec==="userAlbum"){
                        $rootScope.$broadcast('userAlbumPhotoBoradcastToDisplay', response.data.pic);
                   }
                  
                } else {
                    toastr.error(response.data.msg);
                }
                controller.result = response.data;
               
               if(user.from_sec==="userEntry"){
                loginservice.getCureentUser(user.user_id,function(result){
                    controller.cancel();
                    $state.go(user.skip_url);
                });

               }
                if(user.from_sec==="userEdit"){
                    controller.cancel();
                    $state.go(user.skip_url);
                }
               
            });
        }, function (response) {
            if (response.status > 0)
            { $scope.errorMsg = response.status + ': ' + response.data; }
        }, function (evt) {
            controller.progress = parseInt(100.0 * evt.loaded / evt.total);
        });
    };

};
module.exports.$inject = ["$rootScope", "loginservice", "$state", "$uibModal", "$uibModalInstance", "user", "$location", "Upload", "$timeout", "ServiceUrls", "toastr"];
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/app\\registration-login\\crop-modal\\crop-modal.js","/app\\registration-login\\crop-modal")

},{"_process":"E:\\angualarjslibs\\node_modules\\process\\browser.js","buffer":"E:\\angualarjslibs\\node_modules\\buffer\\index.js"}],"E:\\angualarjslibs\\app\\registration-login\\crop-modal\\ng-img-crop.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
/*! ngImgCrop v0.2.0 License: MIT */!function(){"use strict";var e=angular.module("ngImgCrop",[]);e.factory("cropAreaCircle",["cropArea",function(e){var t=function(){e.apply(this,arguments),this._boxResizeBaseSize=20,this._boxResizeNormalRatio=.9,this._boxResizeHoverRatio=1.2,this._iconMoveNormalRatio=.9,this._iconMoveHoverRatio=1.2,this._boxResizeNormalSize=this._boxResizeBaseSize*this._boxResizeNormalRatio,this._boxResizeHoverSize=this._boxResizeBaseSize*this._boxResizeHoverRatio,this._posDragStartX=0,this._posDragStartY=0,this._posResizeStartX=0,this._posResizeStartY=0,this._posResizeStartSize=0,this._boxResizeIsHover=!1,this._areaIsHover=!1,this._boxResizeIsDragging=!1,this._areaIsDragging=!1};return t.prototype=new e,t.prototype._calcCirclePerimeterCoords=function(e){var t=this._size/2,i=e*(Math.PI/180),s=this._x+t*Math.cos(i),r=this._y+t*Math.sin(i);return[s,r]},t.prototype._calcResizeIconCenterCoords=function(){return this._calcCirclePerimeterCoords(-45)},t.prototype._isCoordWithinArea=function(e){return Math.sqrt((e[0]-this._x)*(e[0]-this._x)+(e[1]-this._y)*(e[1]-this._y))<this._size/2},t.prototype._isCoordWithinBoxResize=function(e){var t=this._calcResizeIconCenterCoords(),i=this._boxResizeHoverSize/2;return e[0]>t[0]-i&&e[0]<t[0]+i&&e[1]>t[1]-i&&e[1]<t[1]+i},t.prototype._drawArea=function(e,t,i){e.arc(t[0],t[1],i/2,0,2*Math.PI)},t.prototype.draw=function(){e.prototype.draw.apply(this,arguments),this._cropCanvas.drawIconMove([this._x,this._y],this._areaIsHover?this._iconMoveHoverRatio:this._iconMoveNormalRatio),this._cropCanvas.drawIconResizeBoxNESW(this._calcResizeIconCenterCoords(),this._boxResizeBaseSize,this._boxResizeIsHover?this._boxResizeHoverRatio:this._boxResizeNormalRatio)},t.prototype.processMouseMove=function(e,t){var i="default",s=!1;if(this._boxResizeIsHover=!1,this._areaIsHover=!1,this._areaIsDragging)this._x=e-this._posDragStartX,this._y=t-this._posDragStartY,this._areaIsHover=!0,i="move",s=!0,this._events.trigger("area-move");else if(this._boxResizeIsDragging){i="nesw-resize";var r,o,a;o=e-this._posResizeStartX,a=this._posResizeStartY-t,r=o>a?this._posResizeStartSize+2*a:this._posResizeStartSize+2*o,this._size=Math.max(this._minSize,r),this._boxResizeIsHover=!0,s=!0,this._events.trigger("area-resize")}else this._isCoordWithinBoxResize([e,t])?(i="nesw-resize",this._areaIsHover=!1,this._boxResizeIsHover=!0,s=!0):this._isCoordWithinArea([e,t])&&(i="move",this._areaIsHover=!0,s=!0);return this._dontDragOutside(),angular.element(this._ctx.canvas).css({cursor:i}),s},t.prototype.processMouseDown=function(e,t){this._isCoordWithinBoxResize([e,t])?(this._areaIsDragging=!1,this._areaIsHover=!1,this._boxResizeIsDragging=!0,this._boxResizeIsHover=!0,this._posResizeStartX=e,this._posResizeStartY=t,this._posResizeStartSize=this._size,this._events.trigger("area-resize-start")):this._isCoordWithinArea([e,t])&&(this._areaIsDragging=!0,this._areaIsHover=!0,this._boxResizeIsDragging=!1,this._boxResizeIsHover=!1,this._posDragStartX=e-this._x,this._posDragStartY=t-this._y,this._events.trigger("area-move-start"))},t.prototype.processMouseUp=function(){this._areaIsDragging&&(this._areaIsDragging=!1,this._events.trigger("area-move-end")),this._boxResizeIsDragging&&(this._boxResizeIsDragging=!1,this._events.trigger("area-resize-end")),this._areaIsHover=!1,this._boxResizeIsHover=!1,this._posDragStartX=0,this._posDragStartY=0},t}]),e.factory("cropAreaSquare",["cropArea",function(e){var t=function(){e.apply(this,arguments),this._resizeCtrlBaseRadius=10,this._resizeCtrlNormalRatio=.75,this._resizeCtrlHoverRatio=1,this._iconMoveNormalRatio=.9,this._iconMoveHoverRatio=1.2,this._resizeCtrlNormalRadius=this._resizeCtrlBaseRadius*this._resizeCtrlNormalRatio,this._resizeCtrlHoverRadius=this._resizeCtrlBaseRadius*this._resizeCtrlHoverRatio,this._posDragStartX=0,this._posDragStartY=0,this._posResizeStartX=0,this._posResizeStartY=0,this._posResizeStartSize=0,this._resizeCtrlIsHover=-1,this._areaIsHover=!1,this._resizeCtrlIsDragging=-1,this._areaIsDragging=!1};return t.prototype=new e,t.prototype._calcSquareCorners=function(){var e=this._size/2;return[[this._x-e,this._y-e],[this._x+e,this._y-e],[this._x-e,this._y+e],[this._x+e,this._y+e]]},t.prototype._calcSquareDimensions=function(){var e=this._size/2;return{left:this._x-e,top:this._y-e,right:this._x+e,bottom:this._y+e}},t.prototype._isCoordWithinArea=function(e){var t=this._calcSquareDimensions();return e[0]>=t.left&&e[0]<=t.right&&e[1]>=t.top&&e[1]<=t.bottom},t.prototype._isCoordWithinResizeCtrl=function(e){for(var t=this._calcSquareCorners(),i=-1,s=0,r=t.length;r>s;s++){var o=t[s];if(e[0]>o[0]-this._resizeCtrlHoverRadius&&e[0]<o[0]+this._resizeCtrlHoverRadius&&e[1]>o[1]-this._resizeCtrlHoverRadius&&e[1]<o[1]+this._resizeCtrlHoverRadius){i=s;break}}return i},t.prototype._drawArea=function(e,t,i){var s=i/2;e.rect(t[0]-s,t[1]-s,i,i)},t.prototype.draw=function(){e.prototype.draw.apply(this,arguments),this._cropCanvas.drawIconMove([this._x,this._y],this._areaIsHover?this._iconMoveHoverRatio:this._iconMoveNormalRatio);for(var t=this._calcSquareCorners(),i=0,s=t.length;s>i;i++){var r=t[i];this._cropCanvas.drawIconResizeCircle(r,this._resizeCtrlBaseRadius,this._resizeCtrlIsHover===i?this._resizeCtrlHoverRatio:this._resizeCtrlNormalRatio)}},t.prototype.processMouseMove=function(e,t){var i="default",s=!1;if(this._resizeCtrlIsHover=-1,this._areaIsHover=!1,this._areaIsDragging)this._x=e-this._posDragStartX,this._y=t-this._posDragStartY,this._areaIsHover=!0,i="move",s=!0,this._events.trigger("area-move");else if(this._resizeCtrlIsDragging>-1){var r,o;switch(this._resizeCtrlIsDragging){case 0:r=-1,o=-1,i="nwse-resize";break;case 1:r=1,o=-1,i="nesw-resize";break;case 2:r=-1,o=1,i="nesw-resize";break;case 3:r=1,o=1,i="nwse-resize"}var a,n=(e-this._posResizeStartX)*r,h=(t-this._posResizeStartY)*o;a=n>h?this._posResizeStartSize+h:this._posResizeStartSize+n;var c=this._size;this._size=Math.max(this._minSize,a);var _=(this._size-c)/2;this._x+=_*r,this._y+=_*o,this._resizeCtrlIsHover=this._resizeCtrlIsDragging,s=!0,this._events.trigger("area-resize")}else{var g=this._isCoordWithinResizeCtrl([e,t]);if(g>-1){switch(g){case 0:i="nwse-resize";break;case 1:i="nesw-resize";break;case 2:i="nesw-resize";break;case 3:i="nwse-resize"}this._areaIsHover=!1,this._resizeCtrlIsHover=g,s=!0}else this._isCoordWithinArea([e,t])&&(i="move",this._areaIsHover=!0,s=!0)}return this._dontDragOutside(),angular.element(this._ctx.canvas).css({cursor:i}),s},t.prototype.processMouseDown=function(e,t){var i=this._isCoordWithinResizeCtrl([e,t]);i>-1?(this._areaIsDragging=!1,this._areaIsHover=!1,this._resizeCtrlIsDragging=i,this._resizeCtrlIsHover=i,this._posResizeStartX=e,this._posResizeStartY=t,this._posResizeStartSize=this._size,this._events.trigger("area-resize-start")):this._isCoordWithinArea([e,t])&&(this._areaIsDragging=!0,this._areaIsHover=!0,this._resizeCtrlIsDragging=-1,this._resizeCtrlIsHover=-1,this._posDragStartX=e-this._x,this._posDragStartY=t-this._y,this._events.trigger("area-move-start"))},t.prototype.processMouseUp=function(){this._areaIsDragging&&(this._areaIsDragging=!1,this._events.trigger("area-move-end")),this._resizeCtrlIsDragging>-1&&(this._resizeCtrlIsDragging=-1,this._events.trigger("area-resize-end")),this._areaIsHover=!1,this._resizeCtrlIsHover=-1,this._posDragStartX=0,this._posDragStartY=0},t}]),e.factory("cropArea",["cropCanvas",function(e){var t=function(t,i){this._ctx=t,this._events=i,this._minSize=80,this._cropCanvas=new e(t),this._image=new Image,this._x=0,this._y=0,this._size=200};return t.prototype.getImage=function(){return this._image},t.prototype.setImage=function(e){this._image=e},t.prototype.getX=function(){return this._x},t.prototype.setX=function(e){this._x=e,this._dontDragOutside()},t.prototype.getY=function(){return this._y},t.prototype.setY=function(e){this._y=e,this._dontDragOutside()},t.prototype.getSize=function(){return this._size},t.prototype.setSize=function(e){this._size=Math.max(this._minSize,e),this._dontDragOutside()},t.prototype.getMinSize=function(){return this._minSize},t.prototype.setMinSize=function(e){this._minSize=e,this._size=Math.max(this._minSize,this._size),this._dontDragOutside()},t.prototype._dontDragOutside=function(){var e=this._ctx.canvas.height,t=this._ctx.canvas.width;this._size>t&&(this._size=t),this._size>e&&(this._size=e),this._x<this._size/2&&(this._x=this._size/2),this._x>t-this._size/2&&(this._x=t-this._size/2),this._y<this._size/2&&(this._y=this._size/2),this._y>e-this._size/2&&(this._y=e-this._size/2)},t.prototype._drawArea=function(){},t.prototype.draw=function(){this._cropCanvas.drawCropArea(this._image,[this._x,this._y],this._size,this._drawArea)},t.prototype.processMouseMove=function(){},t.prototype.processMouseDown=function(){},t.prototype.processMouseUp=function(){},t}]),e.factory("cropCanvas",[function(){var e=[[-.5,-2],[-3,-4.5],[-.5,-7],[-7,-7],[-7,-.5],[-4.5,-3],[-2,-.5]],t=[[.5,-2],[3,-4.5],[.5,-7],[7,-7],[7,-.5],[4.5,-3],[2,-.5]],i=[[-.5,2],[-3,4.5],[-.5,7],[-7,7],[-7,.5],[-4.5,3],[-2,.5]],s=[[.5,2],[3,4.5],[.5,7],[7,7],[7,.5],[4.5,3],[2,.5]],r=[[-1.5,-2.5],[-1.5,-6],[-5,-6],[0,-11],[5,-6],[1.5,-6],[1.5,-2.5]],o=[[-2.5,-1.5],[-6,-1.5],[-6,-5],[-11,0],[-6,5],[-6,1.5],[-2.5,1.5]],a=[[-1.5,2.5],[-1.5,6],[-5,6],[0,11],[5,6],[1.5,6],[1.5,2.5]],n=[[2.5,-1.5],[6,-1.5],[6,-5],[11,0],[6,5],[6,1.5],[2.5,1.5]],h={areaOutline:"#fff",resizeBoxStroke:"#fff",resizeBoxFill:"#444",resizeBoxArrowFill:"#fff",resizeCircleStroke:"#fff",resizeCircleFill:"#444",moveIconFill:"#fff"};return function(c){var _=function(e,t,i){return[i*e[0]+t[0],i*e[1]+t[1]]},g=function(e,t,i,s){c.save(),c.fillStyle=t,c.beginPath();var r,o=_(e[0],i,s);c.moveTo(o[0],o[1]);for(var a in e)a>0&&(r=_(e[a],i,s),c.lineTo(r[0],r[1]));c.lineTo(o[0],o[1]),c.fill(),c.closePath(),c.restore()};this.drawIconMove=function(e,t){g(r,h.moveIconFill,e,t),g(o,h.moveIconFill,e,t),g(a,h.moveIconFill,e,t),g(n,h.moveIconFill,e,t)},this.drawIconResizeCircle=function(e,t,i){var s=t*i;c.save(),c.strokeStyle=h.resizeCircleStroke,c.lineWidth=2,c.fillStyle=h.resizeCircleFill,c.beginPath(),c.arc(e[0],e[1],s,0,2*Math.PI),c.fill(),c.stroke(),c.closePath(),c.restore()},this.drawIconResizeBoxBase=function(e,t,i){var s=t*i;c.save(),c.strokeStyle=h.resizeBoxStroke,c.lineWidth=2,c.fillStyle=h.resizeBoxFill,c.fillRect(e[0]-s/2,e[1]-s/2,s,s),c.strokeRect(e[0]-s/2,e[1]-s/2,s,s),c.restore()},this.drawIconResizeBoxNESW=function(e,s,r){this.drawIconResizeBoxBase(e,s,r),g(t,h.resizeBoxArrowFill,e,r),g(i,h.resizeBoxArrowFill,e,r)},this.drawIconResizeBoxNWSE=function(t,i,r){this.drawIconResizeBoxBase(t,i,r),g(e,h.resizeBoxArrowFill,t,r),g(s,h.resizeBoxArrowFill,t,r)},this.drawCropArea=function(e,t,i,s){var r=e.width/c.canvas.width,o=e.height/c.canvas.height,a=t[0]-i/2,n=t[1]-i/2;c.save(),c.strokeStyle=h.areaOutline,c.lineWidth=2,c.beginPath(),s(c,t,i),c.stroke(),c.clip(),i>0&&c.drawImage(e,a*r,n*o,i*r,i*o,a,n,i,i),c.beginPath(),s(c,t,i),c.stroke(),c.clip(),c.restore()}}}]),e.factory("cropHost",["$document","cropAreaCircle","cropAreaSquare",function(e,t,i){var s=function(e){var t=e.getBoundingClientRect(),i=document.body,s=document.documentElement,r=window.pageYOffset||s.scrollTop||i.scrollTop,o=window.pageXOffset||s.scrollLeft||i.scrollLeft,a=s.clientTop||i.clientTop||0,n=s.clientLeft||i.clientLeft||0,h=t.top+r-a,c=t.left+o-n;return{top:Math.round(h),left:Math.round(c)}};return function(r,o,a){function n(){h.clearRect(0,0,h.canvas.width,h.canvas.height),null!==c&&(h.drawImage(c,0,0,h.canvas.width,h.canvas.height),h.save(),h.fillStyle="rgba(0, 0, 0, 0.65)",h.fillRect(0,0,h.canvas.width,h.canvas.height),h.restore(),_.draw())}var h=null,c=null,_=null,g=[100,100],u=[300,300],l=200,p=function(){if(null!==c){_.setImage(c);var e=[c.width,c.height],t=c.width/c.height,i=e;i[0]>u[0]?(i[0]=u[0],i[1]=i[0]/t):i[0]<g[0]&&(i[0]=g[0],i[1]=i[0]/t),i[1]>u[1]?(i[1]=u[1],i[0]=i[1]*t):i[1]<g[1]&&(i[1]=g[1],i[0]=i[1]*t),r.prop("width",i[0]).prop("height",i[1]).css({"margin-left":-i[0]/2+"px","margin-top":-i[1]/2+"px"}),_.setX(h.canvas.width/2),_.setY(h.canvas.height/2),_.setSize(Math.min(200,h.canvas.width/2,h.canvas.height/2))}else r.prop("width",0).prop("height",0).css({"margin-top":0});n()},z=function(e){if(null!==c){var t,i,r=s(h.canvas);"touchmove"===e.type?(t=e.changedTouches[0].pageX,i=e.changedTouches[0].pageY):(t=e.pageX,i=e.pageY),_.processMouseMove(t-r.left,i-r.top),n()}},v=function(e){if(e.preventDefault(),e.stopPropagation(),null!==c){var t,i,r=s(h.canvas);"touchstart"===e.type?(t=e.changedTouches[0].pageX,i=e.changedTouches[0].pageY):(t=e.pageX,i=e.pageY),_.processMouseDown(t-r.left,i-r.top),n()}},f=function(e){if(null!==c){var t,i,r=s(h.canvas);"touchend"===e.type?(t=e.changedTouches[0].pageX,i=e.changedTouches[0].pageY):(t=e.pageX,i=e.pageY),_.processMouseUp(t-r.left,i-r.top),n()}};this.getResultImageDataURI=function(){var e,t;return t=angular.element("<canvas></canvas>")[0],e=t.getContext("2d"),t.width=l,t.height=l,null!==c&&e.drawImage(c,(_.getX()-_.getSize()/2)*(c.width/h.canvas.width),(_.getY()-_.getSize()/2)*(c.height/h.canvas.height),_.getSize()*(c.width/h.canvas.width),_.getSize()*(c.height/h.canvas.height),0,0,l,l),t.toDataURL()},this.setNewImageSource=function(e){if(c=null,p(),a.trigger("image-updated"),e){var t=new Image;t.onload=function(){a.trigger("load-done"),c=t,p(),a.trigger("image-updated")},t.onerror=function(){a.trigger("load-error")},a.trigger("load-start"),t.src=e}},this.setMaxDimensions=function(e,t){if(u=[e,t],null!==c){var i=h.canvas.width,s=h.canvas.height,o=[c.width,c.height],a=c.width/c.height,l=o;l[0]>u[0]?(l[0]=u[0],l[1]=l[0]/a):l[0]<g[0]&&(l[0]=g[0],l[1]=l[0]/a),l[1]>u[1]?(l[1]=u[1],l[0]=l[1]*a):l[1]<g[1]&&(l[1]=g[1],l[0]=l[1]*a),r.prop("width",l[0]).prop("height",l[1]).css({"margin-left":-l[0]/2+"px","margin-top":-l[1]/2+"px"});var p=h.canvas.width/i,z=h.canvas.height/s,v=Math.min(p,z);_.setX(_.getX()*p),_.setY(_.getY()*z),_.setSize(_.getSize()*v)}else r.prop("width",0).prop("height",0).css({"margin-top":0});n()},this.setAreaMinSize=function(e){e=parseInt(e,10),isNaN(e)||(_.setMinSize(e),n())},this.setResultImageSize=function(e){e=parseInt(e,10),isNaN(e)||(l=e)},this.setAreaType=function(e){var s=_.getSize(),r=_.getMinSize(),o=_.getX(),g=_.getY(),u=t;"square"===e&&(u=i),_=new u(h,a),_.setMinSize(r),_.setSize(s),_.setX(o),_.setY(g),null!==c&&_.setImage(c),n()},h=r[0].getContext("2d"),_=new t(h,a),e.on("mousemove",z),r.on("mousedown",v),e.on("mouseup",f),e.on("touchmove",z),r.on("touchstart",v),e.on("touchend",f),this.destroy=function(){e.off("mousemove",z),r.off("mousedown",v),e.off("mouseup",z),e.off("touchmove",z),r.off("touchstart",v),e.off("touchend",z),r.remove()}}}]),e.factory("cropPubSub",[function(){return function(){var e={};this.on=function(t,i){return t.split(" ").forEach(function(t){e[t]||(e[t]=[]),e[t].push(i)}),this},this.trigger=function(t,i){return angular.forEach(e[t],function(e){e.call(null,i)}),this}}}]),e.directive("imgCrop",["$timeout","cropHost","cropPubSub",function(e,t,i){return{restrict:"E",scope:{image:"=",resultImage:"=",changeOnFly:"=",areaType:"@",areaMinSize:"=",resultImageSize:"=",onChange:"&",onLoadBegin:"&",onLoadDone:"&",onLoadError:"&"},template:"<canvas></canvas>",controller:["$scope",function(e){e.events=new i}],link:function(i,s){var r,o=i.events,a=new t(s.find("canvas"),{},o),n=function(e){var t=a.getResultImageDataURI();r!==t&&(r=t,angular.isDefined(e.resultImage)&&(e.resultImage=t),e.onChange({$dataURI:e.resultImage}))},h=function(t){return function(){e(function(){i.$apply(function(e){t(e)})})}};o.on("load-start",h(function(e){e.onLoadBegin({})})).on("load-done",h(function(e){e.onLoadDone({})})).on("load-error",h(function(e){e.onLoadError({})})).on("area-move area-resize",h(function(e){e.changeOnFly&&n(e)})).on("area-move-end area-resize-end image-updated",h(function(e){n(e)})),i.$watch("image",function(){a.setNewImageSource(i.image)}),i.$watch("areaType",function(){a.setAreaType(i.areaType),n(i)}),i.$watch("areaMinSize",function(){a.setAreaMinSize(i.areaMinSize),n(i)}),i.$watch("resultImageSize",function(){a.setResultImageSize(i.resultImageSize),n(i)}),i.$watch(function(){return[s[0].clientWidth,s[0].clientHeight]},function(e){a.setMaxDimensions(e[0],e[1]),n(i)},!0),i.$on("$destroy",function(){a.destroy()})}}}])}();
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/app\\registration-login\\crop-modal\\ng-img-crop.js","/app\\registration-login\\crop-modal")

},{"_process":"E:\\angualarjslibs\\node_modules\\process\\browser.js","buffer":"E:\\angualarjslibs\\node_modules\\buffer\\index.js"}],"E:\\angualarjslibs\\app\\registration-login\\forget-password\\forgetPassword.controller.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
/* @ngInject */
module.exports = function ForgetPasswordController($uibModalInstance) {
  
    var controller = this;
   controller.cancel = function () {
     $uibModalInstance.dismiss('cancel');
    };
};
module.exports.$inject = ["$uibModalInstance"];
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/app\\registration-login\\forget-password\\forgetPassword.controller.js","/app\\registration-login\\forget-password")

},{"_process":"E:\\angualarjslibs\\node_modules\\process\\browser.js","buffer":"E:\\angualarjslibs\\node_modules\\buffer\\index.js"}],"E:\\angualarjslibs\\app\\registration-login\\goto-moreinfo-modal\\goto-moreinfo-modal.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
/* @ngInject */
module.exports = function goToMoreController($uibModal,$uibModalInstance,user, $rootScope) {
  
    var controller = this;
    controller.cancel = function () {
     $uibModalInstance.dismiss('cancel');
    };
    controller.user=user;
    controller.comunicateRegisterForm=function(type){
       
        if(type==="SKIP"){
         $rootScope.$emit('comRegViaGoMoreInfoMl',{
            type:"SKIP",
            user_id:user.user_id
        });
        }
        if(type==="ADDMOREINFO"){
         $rootScope.$emit('comRegViaGoMoreInfoMl', {
            type:"ADDMOREINFO",
            user_id:user.user_id
        });
        }
     controller.cancel();
    };
    
    

};
module.exports.$inject = ["$uibModal", "$uibModalInstance", "user", "$rootScope"];
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/app\\registration-login\\goto-moreinfo-modal\\goto-moreinfo-modal.js","/app\\registration-login\\goto-moreinfo-modal")

},{"_process":"E:\\angualarjslibs\\node_modules\\process\\browser.js","buffer":"E:\\angualarjslibs\\node_modules\\buffer\\index.js"}],"E:\\angualarjslibs\\app\\registration-login\\help-me-write\\help-me-write.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
/* @ngInject */
module.exports = function HelpMeWriteController($uibModal,$uibModalInstance) {
  
    var controller = this;
   controller.cancel = function () {
     $uibModalInstance.dismiss('cancel');
    };


};
module.exports.$inject = ["$uibModal", "$uibModalInstance"];
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/app\\registration-login\\help-me-write\\help-me-write.js","/app\\registration-login\\help-me-write")

},{"_process":"E:\\angualarjslibs\\node_modules\\process\\browser.js","buffer":"E:\\angualarjslibs\\node_modules\\buffer\\index.js"}],"E:\\angualarjslibs\\app\\registration-login\\index.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
'use strict';

var angular = require('angular');
var registercomponents = require('./components');
var regisLoginRoutes = require('./registration-login.route');
var LoginController = require('./login-modal/login.controller');
var RegistrationController = require('./registration/registration.controller');
var ForgetPasswordController = require('./forget-password/forgetPassword.controller');
var MoreInfoController = require('./more-info/moreInfo.controller');
var OtpVrController = require('./otp-verification/otp.controller');
var HelpMeWriteController = require('./help-me-write/help-me-write');
var CropModalController = require('./crop-modal/crop-modal');
var cropDirective = require('./crop-modal/ng-img-crop');
var goToMoreController=require('./goto-moreinfo-modal/goto-moreinfo-modal');
var loginCtrl = require('./login-modal/afterlogout');
//services//
var registrationLoginServices = require('./services');
module.exports = angular.module('app.ui.registration.login', [registercomponents.name,'ngImgCrop',registrationLoginServices.name])
    .run(regisLoginRoutes)
    .controller('LoginController',LoginController)
    .controller('RegistrationController', RegistrationController)
    .controller('ForgetPasswordController', ForgetPasswordController)
    .controller('MoreInfoController', MoreInfoController)
    .controller('OtpVrController', OtpVrController)
    .controller('HelpMeWriteController', HelpMeWriteController)
    .controller('CropModalController', CropModalController)
    .controller('goToMoreController', goToMoreController)
    .controller('loginCtrl', loginCtrl);
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/app\\registration-login\\index.js","/app\\registration-login")

},{"./components":"E:\\angualarjslibs\\app\\registration-login\\components\\index.js","./crop-modal/crop-modal":"E:\\angualarjslibs\\app\\registration-login\\crop-modal\\crop-modal.js","./crop-modal/ng-img-crop":"E:\\angualarjslibs\\app\\registration-login\\crop-modal\\ng-img-crop.js","./forget-password/forgetPassword.controller":"E:\\angualarjslibs\\app\\registration-login\\forget-password\\forgetPassword.controller.js","./goto-moreinfo-modal/goto-moreinfo-modal":"E:\\angualarjslibs\\app\\registration-login\\goto-moreinfo-modal\\goto-moreinfo-modal.js","./help-me-write/help-me-write":"E:\\angualarjslibs\\app\\registration-login\\help-me-write\\help-me-write.js","./login-modal/afterlogout":"E:\\angualarjslibs\\app\\registration-login\\login-modal\\afterlogout.js","./login-modal/login.controller":"E:\\angualarjslibs\\app\\registration-login\\login-modal\\login.controller.js","./more-info/moreInfo.controller":"E:\\angualarjslibs\\app\\registration-login\\more-info\\moreInfo.controller.js","./otp-verification/otp.controller":"E:\\angualarjslibs\\app\\registration-login\\otp-verification\\otp.controller.js","./registration-login.route":"E:\\angualarjslibs\\app\\registration-login\\registration-login.route.js","./registration/registration.controller":"E:\\angualarjslibs\\app\\registration-login\\registration\\registration.controller.js","./services":"E:\\angualarjslibs\\app\\registration-login\\services\\index.js","_process":"E:\\angualarjslibs\\node_modules\\process\\browser.js","angular":"angular","buffer":"E:\\angualarjslibs\\node_modules\\buffer\\index.js"}],"E:\\angualarjslibs\\app\\registration-login\\login-modal\\afterlogout.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
/* @ngInject */
module.exports = function loginCtrl($uibModal,loginservice,$location,$filter) {
  
      var controller = this;
          controller.invaliduser=false;
     
       controller.required = function (key) {
                      return $filter('translate')(key);
                  };
  controller.forgetPwdModal = function (size) {
           var modalInstance = $uibModal.open({
           animation: true,
           windowClass :"login-model",
           templateUrl: './app/registration-login/forget-password/forget-password.html',
           controller: 'ForgetPasswordController',
           controllerAs: 'ctrl',
           size: size
       
      });
    };
   controller.signin = function(formData) {
        controller.invaliduser=false;
              loginservice.signin(formData, function(res) {
                
                 if(res.success){
                    
                   
                    loginservice.saveToken(res.token);
                   
                   
                 }
                 else{
                     controller.invaliduser=true;
                 }
                
              }, function() {
                
              });
          };
  
        
  
          // controller.me = function() {
          //     loginservice.me(function(res) {
          //       console.log(res)
          //     }, function() {
               
          //     })
          // };
  
         controller.logout = function() {
              loginservice.logout(function() {
                  $location.path('/login');
              }, function() {
                  
              });
          };
  };
  module.exports.$inject = ["$uibModal", "loginservice", "$location", "$filter"];
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/app\\registration-login\\login-modal\\afterlogout.js","/app\\registration-login\\login-modal")

},{"_process":"E:\\angualarjslibs\\node_modules\\process\\browser.js","buffer":"E:\\angualarjslibs\\node_modules\\buffer\\index.js"}],"E:\\angualarjslibs\\app\\registration-login\\login-modal\\login.controller.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
/* @ngInject */
module.exports = function LoginController($uibModal,$uibModalInstance,loginservice,$location,$filter) {
  console.log()
    var controller = this;
        controller.invaliduser=false;
   controller.cancel = function () {
     $uibModalInstance.dismiss('cancel');
    };
     controller.required = function (key) {
                    return $filter('translate')(key);
                };
controller.forgetPwdModal = function (size) {
         var modalInstance = $uibModal.open({
         animation: true,
         windowClass :"login-model",
         templateUrl: './app/registration-login/forget-password/forget-password.html',
         controller: 'ForgetPasswordController',
         controllerAs: 'ctrl',
         size: size
     
    });
  };
 controller.signin = function(formData) {
      controller.invaliduser=false;
            loginservice.signin(formData, function(res) {
              
               if(res.success){
                  
                  controller.cancel();
                  console.log(res)
                  loginservice.saveToken(res.token);
                 
                 
               }
               else{
                   controller.invaliduser=true;
               }
              
            }, function() {
              
            });
        };

      

        // controller.me = function() {
        //     loginservice.me(function(res) {
        //       console.log(res)
        //     }, function() {
             
        //     })
        // };

       controller.logout = function() {
            loginservice.logout(function() {
                $location.path('/login');
            }, function() {
                
            });
        };
};
module.exports.$inject = ["$uibModal", "$uibModalInstance", "loginservice", "$location", "$filter"];
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/app\\registration-login\\login-modal\\login.controller.js","/app\\registration-login\\login-modal")

},{"_process":"E:\\angualarjslibs\\node_modules\\process\\browser.js","buffer":"E:\\angualarjslibs\\node_modules\\buffer\\index.js"}],"E:\\angualarjslibs\\app\\registration-login\\more-info\\moreInfo.controller.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
/* @ngInject */
module.exports = function MoreInfoController($rootScope,$location) {
var controller=this;
    // controller.user = $rootScope.current_user_de_all;
   
    // if( controller.user.more_info_vr){
    //     $location.path("/dashboard");
    // }
};
module.exports.$inject = ["$rootScope", "$location"];
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/app\\registration-login\\more-info\\moreInfo.controller.js","/app\\registration-login\\more-info")

},{"_process":"E:\\angualarjslibs\\node_modules\\process\\browser.js","buffer":"E:\\angualarjslibs\\node_modules\\buffer\\index.js"}],"E:\\angualarjslibs\\app\\registration-login\\otp-verification\\otp.controller.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
/* @ngInject */
module.exports = function OtpVrController($uibModal,$uibModalInstance,loginservice,$filter, $rootScope, $location) {
  
    var controller = this;
      controller.invalidOtp=false;
   controller.cancel = function () {
     $uibModalInstance.dismiss('cancel');
    };
     controller.required = function (key) {
                    return $filter('translate')(key);
                };
controller.veryFyOtp=function(OTP){

var req={
    otp:OTP
};

loginservice.verifyOtp(req, function(res) {
   
                     controller.invalidOtp=false;
                     if(res.success){
                          controller.cancel();
                          $rootScope.current_user_de_all.phone_vr=true;
                        //   if(!res.user.more_info_vr){
                        //          $location.path("/moreinfo");
                        //   }
                        //   else{
                        //        $location.path("/dashboard");
                        //   }
                          
                         loginservice.afterloginRoute(res.user.user_role,"/moreinfo");
                     }
                     else{
                         controller.invalidOtp=true;
                     }
                      
                    }, function() {

                    });

};

};
module.exports.$inject = ["$uibModal", "$uibModalInstance", "loginservice", "$filter", "$rootScope", "$location"];
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/app\\registration-login\\otp-verification\\otp.controller.js","/app\\registration-login\\otp-verification")

},{"_process":"E:\\angualarjslibs\\node_modules\\process\\browser.js","buffer":"E:\\angualarjslibs\\node_modules\\buffer\\index.js"}],"E:\\angualarjslibs\\app\\registration-login\\registration-login.route.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
/* @ngInject */
module.exports = function regisLoginRoutes(Router) {
    Router.configureRoutes([
        {
            name: "register",
            config: {
                url: '/register',
                              

                views: {
                    '@': {
                        templateUrl: "app/registration-login/registration/registration.html",
                        controller: "RegistrationController as ctrl"
                    }
                },
                 params: {
                    permisstion: "ALLUSER"
                },
                title: 'register'
            }
        },
        {
            name: 'login',
            config: {
                url: '/login',
               
                views: {
                    'header': {
                        templateUrl: 'app/layouts/login-header.html'
                        
                    },
                     'leftsidebar': {
                        templateUrl: 'app/layouts/sidebar.html',
                       
                    },
                   
                    '@': {
                        templateUrl: 'app/layouts/auth.html',
                        controller:"loginCtrl as ctrl"
                       
                        
                    },
                     'footer': {
                        templateUrl: 'app/layouts/footer.html'
                       
                    }
                }
            }
        },
          {
            name: "moreinfo",
            config: {
                url: '/moreinfo',
                views: {
                    '@': {
                        templateUrl: "app/registration-login/more-info/more-info.html",
                        controller: "MoreInfoController as ctrl"
                    }
                },
                params: {
                    permisstion: "ALLUSER"
                },
                title: 'moreinfo'
            }
        }
    ]);
};
module.exports.$inject = ["Router"];
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/app\\registration-login\\registration-login.route.js","/app\\registration-login")

},{"_process":"E:\\angualarjslibs\\node_modules\\process\\browser.js","buffer":"E:\\angualarjslibs\\node_modules\\buffer\\index.js"}],"E:\\angualarjslibs\\app\\registration-login\\registration\\registration.controller.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
/* @ngInject */
module.exports = function RegistrationController( $uibModal,loginservice,ServiceUrls) {
var controller = this;
// var socket = io.connect('http://localhost:4000');
// socket.on('connect', function(data) {
//    socket.emit('join', 'Hello World from client');
// });
// socket.on('connect', function(data) {
//    socket.emit('join', 'Hello World from client');
// });
// //socket.emit("Register_Name","i am biru");
// socket.on("r_name",function(data){
//   alert(data)
// });
// socket.on("msg",function(data){
//   alert(data)
// });
// controller.soc=function(){
//   socket.connect("BIRU");
//  // socket.emit("Send_msg","HI DHOL ");
// };
    controller.openLoginModal = function (size) {
         var modalInstance = $uibModal.open({
         animation: true,
         windowClass :"login-model",
         templateUrl: './app/registration-login/login-modal/login.html',
         controller: 'LoginController',
         controllerAs: 'ctrl',
         backdrop: 'static',
         keyboard: false,
         size: size
     
    });
  };
};
module.exports.$inject = ["$uibModal", "loginservice", "ServiceUrls"];
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/app\\registration-login\\registration\\registration.controller.js","/app\\registration-login\\registration")

},{"_process":"E:\\angualarjslibs\\node_modules\\process\\browser.js","buffer":"E:\\angualarjslibs\\node_modules\\buffer\\index.js"}],"E:\\angualarjslibs\\app\\registration-login\\services\\country.service.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
/* @ngInject */

module.exports =function($http,ServiceUrls){
       
    return {
            getCountries: function(success, error) {
                $http.get(ServiceUrls.BASEURL + ServiceUrls.COUNTRIES).success(success).error(error);
            },
            getStates: function(data, success, error) {
                $http.get(ServiceUrls.BASEURL + ServiceUrls.STATES+"/"+data).success(success).error(error);
            },
            getCities: function(data,success, error) {
                $http.get(ServiceUrls.BASEURL + ServiceUrls.CITIES+"/"+data).success(success).error(error);
            },
            getUserLoc:function(data,success,error){
                 $http.get(ServiceUrls.BASEURL + ServiceUrls.GET_USER_LOC+"/"+data.cn+"/"+data.st+"/"+data.ci).success(success).error(error);
            }
            
        };
    };
    module.exports.$inject = ["$http", "ServiceUrls"];
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/app\\registration-login\\services\\country.service.js","/app\\registration-login\\services")

},{"_process":"E:\\angualarjslibs\\node_modules\\process\\browser.js","buffer":"E:\\angualarjslibs\\node_modules\\buffer\\index.js"}],"E:\\angualarjslibs\\app\\registration-login\\services\\form-data.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
/* @ngInject */
module.exports = {
  monthsL: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],
  height: [4.00, 4.01, 4.02, 4.03, 4.04, 4.05, 4.06, 4.07, 4.08, 4.09, 4.10, 4.11, 5.00, 5.01, 5.02, 5.03, 5.04, 5.05, 5.06, 5.07, 5.08, 5.09, 5.10, 5.11, 6.00, 6.01, 6.02, 6.03, 6.04, 6.05, 6.06, 6.07, 6.08, 6.09, 6.10, 6.11],
  created_by: [{

    value: "SELF",
    name: "Self"
  },
  {

    value: "PARENTS",
    name: "Parents"
  },
  {

    value: "SIBLINGS",
    name: "Siblings"
  },
  {
    value: "OTHER",
    name: "Other"
  }

  ],
  //rhindu: ["AdiDravida", "Arunthathiyar", "Boyer", "Brahmin", "Brahmin-Grukkal", "Brahmin-Iyer", "Chettiar", "Devendra Kula Vellalar", "Goundar", "Intercaste", "Maruthuvar", "Meenavar", "Mudhaliyar", "Mukkulathor", "Caste No Bar"],
  // rmuslim: ["Ansari", "Arain", "Awan", "Bohra", "Dekkani", "Dudekula", "Hanafi", "Jat", "Khoja", "Lebbai", "Malik", "Mapila", "Maraicar", "Memon", "Mugal", "Pathan", "Qureshi", "Rajput", "Rowther", "Caste no Bar"],
  // rchristian: ["Any", "Born Again", "Bretheren", "Church of South India", "Evangelist", "Jacobite", "Knanaya", "Malankara", "Marthoma", "Pentacost", "Roman catholic", "Syrian Catholic", "Caste no Bar"],
  // hobbies: ["3D printing", "amateur radio", "scrapbook", "Acting", "Baton twirling", "Board games", "Book restoration", "Cabaret", "Calligraphy", "Candle making", "Computer programming", "Coffee roasting", "Cooking", "Coloring", "Cosplaying", "Couponing", "Creative writing", "Crocheting", "Cryptography", "Dance", "Digital arts", "Drama", "Drawing", "Do it yourself", "Electronics", "Embroidery", "Fashion", "Flower arranging", "Foreign language learning", "Gaming", "tabletop games", "role-playing games", "Gambling", "Genealogy", "Glassblowing", "Gunsmithing", "Homebrewing", "Ice skating", "Jewelry making", "Jigsaw puzzles", "Juggling", "Knapping", "Knitting", "Kabaddi", "Knife making", "Lacemaking", "Lapidary", "Leather crafting", "Lego building", "Lockpicking", "Machining", "Macrame", "Metalworking", "Magic", "Model building", "Listening to music", "Origami", "Painting", "Playing musical instruments", "Pet", "Poi", "Pottery", "Puzzles", "Quilting", "Reading", "Scrapbooking", "Sculpting", "Sewing", "Singing", "Sketching", "Soapmaking", "Sports", "Stand-up comedy", "Sudoku", "Table tennis", "Taxidermy", "Video gaming", "Watching movies", "Web surfing", "Whittling", "Wood carving", "Woodworking", "Worldbuilding", "Writing", "Yoga", "Yo-yoing", "Air sports", "Archery", "Astronomy", "Backpacking", "BASE jumping", "Baseball", "Basketball", "Beekeeping", "Bird watching", "Blacksmithing", "Board sports", "Bodybuilding", "Brazilian jiu-jitsu", "Community", "Cycling", "Dowsing", "Driving", "Fishing", "Flag Football", "Flying", "Flying disc", "Foraging", "Gardening", "Geocaching", "Ghost hunting", "Graffiti", "Handball", "Hiking", "Hooping", "Horseback riding", "Hunting", "Inline skating", "Jogging", "Kayaking", "Kite flying", "Kitesurfing", "LARPing", "Letterboxing", "Metal detecting", "Motor sports", "Mountain biking", "Mountaineering", "Mushroom hunting", "Mycology", "Netball", "Nordic skating", "Orienteering", "Paintball", "Parkour", "Photography", "Polo", "Rafting", "Rappelling", "Rock climbing", "Roller skating", "Rugby", "Running", "Sailing", "Sand art", "Scouting", "Scuba diving", "Sculling", "Rowing", "Shooting", "Shopping", "Skateboarding", "Skiing", "Skimboarding", "Skydiving", "Slacklining", "Snowboarding", "Stone skipping", "Surfing", "Swimming", "Taekwondo", "Tai chi", "Urban exploration", "Vacation", "Vehicle restoration", "Water sports"],
  rhindu: [{
    "name": "AdiDravida",
    "value": "HIN0"
  }, {
    "name": "Arunthathiyar",
    "value": "HIN1"
  }, {
    "name": "Boyer",
    "value": "HIN2"
  }, {
    "name": "Brahmin",
    "value": "HIN3"
  }, {
    "name": "Brahmin-Grukkal",
    "value": "HIN4"
  }, {
    "name": "Brahmin-Iyer",
    "value": "HIN5"
  }, {
    "name": "Chettiar",
    "value": "HIN6"
  }, {
    "name": "Devendra Kula Vellalar",
    "value": "HIN7"
  }, {
    "name": "Goundar",
    "value": "HIN8"
  }, {
    "name": "Intercaste",
    "value": "HIN9"
  }, {
    "name": "Maruthuvar",
    "value": "HIN10"
  }, {
    "name": "Meenavar",
    "value": "HIN11"
  }, {
    "name": "Mudhaliyar",
    "value": "HIN12"
  }, {
    "name": "Mukkulathor",
    "value": "HIN13"
  }, {
    "name": "Other",
    "value": "HINOTH"
  }],
  rmuslim: [{
    "name": "Ansari",
    "value": "MUS0"
  }, {
    "name": "Arain",
    "value": "MUS1"
  }, {
    "name": "Awan",
    "value": "MUS2"
  }, {
    "name": "Bohra",
    "value": "MUS3"
  }, {
    "name": "Dekkani",
    "value": "MUS4"
  }, {
    "name": "Dudekula",
    "value": "MUS5"
  }, {
    "name": "Hanafi",
    "value": "MUS6"
  }, {
    "name": "Jat",
    "value": "MUS7"
  }, {
    "name": "Khoja",
    "value": "MUS8"
  }, {
    "name": "Lebbai",
    "value": "MUS9"
  }, {
    "name": "Malik",
    "value": "MUS10"
  }, {
    "name": "Mapila",
    "value": "MUS11"
  }, {
    "name": "Maraicar",
    "value": "MUS12"
  }, {
    "name": "Memon",
    "value": "MUS13"
  }, {
    "name": "Mugal",
    "value": "MUS14"
  }, {
    "name": "Pathan",
    "value": "MUS15"
  }, {
    "name": "Qureshi",
    "value": "MUS16"
  }, {
    "name": "Rajput",
    "value": "MUS17"
  }, {
    "name": "Rowther",
    "value": "MUS18"
  }, {
    "name": "Other",
    "value": "MUSOTH"
  }],
  rchristian: [{
    "name": "Born Again",
    "value": "CH0"
  }, {
    "name": "Bretheren",
    "value": "CH1"
  }, {
    "name": "Church of South India",
    "value": "CH2"
  }, {
    "name": "Evangelist",
    "value": "CH3"
  }, {
    "name": "Jacobite",
    "value": "CH4"
  }, {
    "name": "Knanaya",
    "value": "CH5"
  }, {
    "name": "Malankara",
    "value": "CH6"
  }, {
    "name": "Marthoma",
    "value": "CH7"
  }, {
    "name": "Pentacost",
    "value": "CH8"
  }, {
    "name": "Roman catholic",
    "value": "CH9"
  }, {
    "name": "Syrian Catholic",
    "value": "CH10"
  }, {
    "name": "Other",
    "value": "CHOTH"
  }],
  hobbies: [{
    "name": "3D printing",
    "value": "3DP"
  },
  {
    "name": "Amateur radio",
    "value": "AMR"
  },
  {
    "name": "Scrapbook",
    "value": "SCR"
  },
  {
    "name": "Acting",
    "value": "ACT"
  },
  {
    "name": "Baton twirling",
    "value": "BATW"
  },
  {
    "name": "Board games",
    "value": "BOG"
  }],
  zodiac: ["Aries", "Taurus", "Gemini", "Cancer", "Leo", "Virgo", "Libra", "Scorpio", "Sagittarius", "Capricorn", "Aquarius", "Pisces"],
  countriesWithCode: {
    'Afghanistan': '+93',
    'Albania': '+355',
    'Algeria': '+213',
    'American Samoa': '+684',
    'Andorra': '+376',
    'Angola': '+244',
    'Anguilla': '+264',
    'Antarctica': '+672',
    'Antigua and Barbuda': '+268',
    'Argentina': '+54',
    'Armenia': '+374',
    'Aruba': '+297',
    'Australia': '+61',
    'Austria': '+43',
    'Azerbaijan': '+994',
    'Bahamas': '+242',
    'Bahrain': '+973',
    'Bangladesh': '+880',
    'Barbados': '+246',
    'Belarus': '+375',
    'Belgium': '+32',
    'Belize': '+501',
    'Benin': '+229',
    'Bermuda': '+441',
    'Bhutan': '+975',
    'Bolivia, Plurinational State of': '+591',
    'Bonaire, Sint Eustatius and Saba': '+599',
    'Bosnia and Herzegovina': '+387',
    'Botswana': '+267',
    'Bouvet Island': '+47',
    'Brazil': '+55',
    'British Indian Ocean Territory': '+246',
    'Brunei Darussalam': '+673',
    'Bulgaria': '+359',
    'Burkina Faso': '+226',
    'Burundi': '+257',
    'Cambodia': '+855',
    'Cameroon': '+237',
    'Canada': '+1',
    'Cape Verde': '+238',
    'Cayman Islands': '+345',
    'Central African Republic': '+236',
    'Chad': '+235',
    'Chile': '+56',
    'China': '+86',
    'Christmas Island': '+61',
    'Cocos (Keeling) Islands': '+891',
    'Colombia': '+57',
    'Comoros': '+269',
    'Congo': '+242',
    'Congo, the Democratic Republic of the': '+243',
    'Cook Islands': '+682',
    'Costa Rica': '+506',
    'Croatia': '+385',
    'Cuba': '+53',
    'Curaçao': '+599',
    'Cyprus': '+357',
    'Czech Republic': '+420',

    'Denmark': '+45',
    'Djibouti': '+253',
    'Dominica': '+767',
    'Dominican Republic': '+809',
    'Ecuador': '+593',
    'Egypt': '+20',
    'El Salvador': '+503',
    'Equatorial Guinea': '+240',
    'Eritrea': '+291',
    'Estonia': '+372',
    'Ethiopia': '+251',
    'Falkland Islands (Malvinas)': '+500',
    'Faroe Islands': '+298',
    'Fiji': '+679',
    'Finland': '+358',
    'France': '+33',
    'French Guiana': '+594',
    'French Polynesia': '+689',
    'French Southern Territories': '+689',
    'Gabon': '+241',
    'Gambia': '+220',
    'Georgia': '+995',
    'Germany': '+49',
    'Ghana': '+233',
    'Gibraltar': '+350',
    'Greece': '+30',
    'Greenland': '+299',
    'Grenada': '+473',
    'Guadeloupe': '+590',
    'Guam': '+671',
    'Guatemala': '+502',
    'Guernsey': '+1481',
    'Guinea': '+225',
    'Guinea-Bissau': '+245',
    'Guyana': '+592',
    'Haiti': '+509',
    'Heard Island and McDonald Islands': '+61',
    'Holy See (Vatican City State)': '+379',
    'Honduras': '+504',
    'Hong Kong': '+852',
    'Hungary': '+36',
    'Iceland': '+354',
    'India': '+91',
    'Indonesia': '+62',
    'Iran, Islamic Republic of': '+98',
    'Iraq': '+964',
    'Ireland': '+353',
    'Isle of Man': '+44',
    'Israel': '+972',
    'Italy': '+39',
    'Jamaica': '+876',
    'Japan': '+81',
    'Jersey': '+44',
    'Jordan': '+962',
    'Kazakhstan': '+7',
    'Kenya': '+254',
    'Kiribati': '+686',

    'Korea, Republic of': '+82',
    'Kuwait': '+965',
    'Kyrgyzstan': '+996',

    'Latvia': '+371',
    'Lebanon': '+961',
    'Lesotho': '+266',
    'Liberia': '+231',
    'Libya': '+218',
    'Liechtenstein': '+423',
    'Lithuania': '+370',
    'Luxembourg': '+352',
    'Macao': '+853',
    'Macedonia, The Former Yugoslav Republic of': '+389',
    'Madagascar': '+261',
    'Malawi': '+265',
    'Malaysia': '+60',
    'Maldives': '+960',
    'Mali': '+223',
    'Malta': '+356',
    'Marshall Islands': '+692',
    'Martinique': '+596',
    'Mauritania': '+222',
    'Mauritius': '+230',
    'Mayotte': '+262',
    'Mexico': '+52',
    'Micronesia, Federated States of': '+691',
    'Moldova, Republic of': '+373',
    'Monaco': '+355',
    'Mongolia': '+976',
    'Montenegro': '+382',
    'Montserrat': '+664',
    'Morocco': '+212',
    'Mozambique': '+258',
    'Myanmar': '+95',
    'Namibia': '+264',
    'Nauru': '+674',
    'Nepal': '+977',
    'Netherlands': '+31',
    'New Caledonia': '+687',
    'New Zealand': '+64',
    'Nicaragua': '+505',
    'Niger': '+277',
    'Nigeria': '+234',
    'Niue': '+683',
    'Norfolk Island': '+672',
    'Northern Mariana Islands': '+670',
    'Norway': '+47',
    'Oman': '+968',
    'Pakistan': '+92',
    'Palau': '+680',
    'Palestinian Territory, Occupied': '+970',
    'Panama': '+507',
    'Papua New Guinea': '+675',
    'Paraguay': '+595',
    'Peru': '+51',
    'Philippines': '+63',
    'Pitcairn': '+872',
    'Poland': '+48',
    'Portugal': '+351',
    'Puerto Rico': '+787',
    'Qatar': '+974',
    'Romania': '+40',
    'Russian Federation': '+7',
    'Rwanda': '+250',
    'Réunion': '+262',
    'Saint Barthélemy': '+590',
    'Saint Helena, Ascension and Tristan da Cunha': '+290',
    'Saint Kitts and Nevis': '+869',
    'Saint Lucia': '+758',
    'Saint Martin (French part)': '+590',
    'Saint Pierre and Miquelon': '+508',
    'Saint Vincent and the Grenadines': '+784',
    'Samoa': '+685',
    'San Marino': '+378',
    'Sao Tome and Principe': '+239',
    'Saudi Arabia': '+966',
    'Senegal': '+221',
    'Serbia': '+381',
    'Seychelles': '+248',
    'Sierra Leone': '+232',
    'Singapore': '+65',
    'Sint Maarten (Dutch part)': '+599',
    'Slovakia': '+421',
    'Slovenia': '+386',
    'Solomon Islands': '+677',
    'Somalia': '+252',
    'South Africa': '+27',
    'South Georgia and the South Sandwich Islands': '+500',
    'South Sudan': '+211',
    'Spain': '+34',
    'Sri Lanka': '+94',
    'Sudan': '+249',
    'Suriname': '+597',
    'Svalbard and Jan Mayen': '+47',
    'Swaziland': '+268',
    'Sweden': '+46',
    'Switzerland': '+41',
    'Syrian Arab Republic': '+963',
    'Taiwan, Province of China': '+886',
    'Tajikistan': '+992',
    'Tanzania, United Republic of': '+255',
    'Thailand': '+66',
    'Timor-Leste': '+670',
    'Togo': '+228',
    'Tokelau': '+690',
    'Tonga': '+676',
    'Trinidad and Tobago': '+868',
    'Tunisia': '+216',
    'Turkey': '+90',
    'Turkmenistan': '+993',
    'Turks and Caicos Islands': '+649',
    'Tuvalu': '+688',
    'Uganda': '+256',
    'Ukraine': '+380',
    'United Arab Emirates': '+971',
    'United Kingdom': '+44',
    'United States': '+1',
    // 'United States Minor Outlying Islands': '+1',
    'Uruguay': '+598',
    'Uzbekistan': '+998',
    'Vanuatu': '+678',
    'Venezuela, Bolivarian Republic of': '+58',
    'Viet Nam': '+84',
    'Virgin Islands, British': '+284',
    'Virgin Islands, U.S.': '+340',
    'Wallis and Futuna': '+681',
    'Western Sahara': '+212',
    'Yemen': '+967',
    'Zambia': '+260',
    'Zimbabwe': '+263',
    'Åland Islands': '+358',
  },
  mother_tongues: [{
    "name": "Afrikanns",
    "value": "AF"
  }, {
    "name": "Albanian",
    "value": "SQ"
  }, {
    "name": "Arabic",
    "value": "AR"
  }, {
    "name": "Armenian",
    "value": "HY"
  }, {
    "name": "Basque",
    "value": "EU"
  }, {
    "name": "Bengali",
    "value": "BN"
  }, {
    "name": "Bulgarian",
    "value": "BG"
  }, {
    "name": "Catalan",
    "value": "CA"
  }, {
    "name": "Cambodian",
    "value": "KM"
  }, {
    "name": "Chinese (Mandarin)",
    "value": "ZH"
  }, {
    "name": "Croation",
    "value": "HR"
  }, {
    "name": "Czech",
    "value": "CS"
  }, {
    "name": "Danish",
    "value": "DA"
  }, {
    "name": "Dutch",
    "value": "NL"
  }, {
    "name": "English",
    "value": "EN"
  }, {
    "name": "Estonian",
    "value": "ET"
  }, {
    "name": "Fiji",
    "value": "FJ"
  }, {
    "name": "Finnish",
    "value": "FI"
  }, {
    "name": "French",
    "value": "FR"
  }, {
    "name": "Georgian",
    "value": "KA"
  }, {
    "name": "German",
    "value": "DE"
  }, {
    "name": "Greek",
    "value": "EL"
  }, {
    "name": "Gujarati",
    "value": "GU"
  }, {
    "name": "Hebrew",
    "value": "HE"
  }, {
    "name": "Hindi",
    "value": "HI"
  }, {
    "name": "Hungarian",
    "value": "HU"
  }, {
    "name": "Icelandic",
    "value": "IS"
  }, {
    "name": "Indonesian",
    "value": "ID"
  }, {
    "name": "Irish",
    "value": "GA"
  }, {
    "name": "Italian",
    "value": "IT"
  }, {
    "name": "Japanese",
    "value": "JA"
  }, {
    "name": "Javanese",
    "value": "JW"
  }, {
    "name": "Korean",
    "value": "KO"
  }, {
    "name": "Latin",
    "value": "LA"
  }, {
    "name": "Latvian",
    "value": "LV"
  }, {
    "name": "Lithuanian",
    "value": "LT"
  }, {
    "name": "Macedonian",
    "value": "MK"
  }, {
    "name": "Malay",
    "value": "MS"
  }, {
    "name": "Malayalam",
    "value": "ML"
  }, {
    "name": "Maltese",
    "value": "MT"
  }, {
    "name": "Maori",
    "value": "MI"
  }, {
    "name": "Marathi",
    "value": "MR"
  }, {
    "name": "Mongolian",
    "value": "MN"
  }, {
    "name": "Nepali",
    "value": "NE"
  }, {
    "name": "Norwegian",
    "value": "NO"
  }, {
    "name": "Persian",
    "value": "FA"
  }, {
    "name": "Polish",
    "value": "PL"
  }, {
    "name": "Portuguese",
    "value": "PT"
  }, {
    "name": "Punjabi",
    "value": "PA"
  }, {
    "name": "Quechua",
    "value": "QU"
  }, {
    "name": "Romanian",
    "value": "RO"
  }, {
    "name": "Russian",
    "value": "RU"
  }, {
    "name": "Samoan",
    "value": "SM"
  }, {
    "name": "Serbian",
    "value": "SR"
  }, {
    "name": "Slovak",
    "value": "SK"
  }, {
    "name": "Slovenian",
    "value": "SL"
  }, {
    "name": "Spanish",
    "value": "ES"
  }, {
    "name": "Swahili",
    "value": "SW"
  }, {
    "name": "Swedish ",
    "value": "SV"
  }, {
    "name": "Tamil",
    "value": "TA"
  }, {
    "name": "Tatar",
    "value": "TT"
  }, {
    "name": "Telugu",
    "value": "TE"
  }, {
    "name": "Thai",
    "value": "TH"
  }, {
    "name": "Tibetan",
    "value": "BO"
  }, {
    "name": "Tonga",
    "value": "TO"
  }, {
    "name": "Turkish",
    "value": "TR"
  }, {
    "name": "Ukranian",
    "value": "UK"
  }, {
    "name": "Urdu",
    "value": "UR"
  }, {
    "name": "Uzbek",
    "value": "UZ"
  }, {
    "name": "Vietnamese",
    "value": "VI"
  }, {
    "name": "Welsh",
    "value": "CY"
  }, {
    "name": "Xhosa",
    "value": "XH"
  }],
  religions: [{
    "name": "African Traditional & Diasporic",
    "value": "AFT"
  }, {
    "name": "Agnostic",
    "value": "AGN"
  }, {
    "name": "Atheist",
    "value": "ATH"
  }, {
    "name": "Baha'i",
    "value": "BAHI"
  }, {
    "name": "Buddhism",
    "value": "BUDH"
  }, {
    "name": "Cao Dai",
    "value": "CAD"
  }, {
    "name": "Chinese traditional religion",
    "value": "CTR"
  }, {
    "name": "Christianity",
    "value": "CHR"
  }, {
    "name": "Hinduism",
    "value": "HINDU"
  }, {
    "name": "Islam",
    "value": "ISLAM"
  }, {
    "name": "Jainism",
    "value": "JAIN"
  }, {
    "name": "Juche",
    "value": "JUCHE"
  }, {
    "name": "Judaism",
    "value": "JUD"
  }, {
    "name": "Neo-Paganism",
    "value": "NEOP"
  }, {
    "name": "Nonreligious",
    "value": "NOR"
  }, {
    "name": "Rastafarianism",
    "value": "RASF"
  }, {
    "name": "Secular",
    "value": "SECL"
  }, {
    "name": "Shinto",
    "value": "SHIN"
  }, {
    "name": "Sikhism",
    "value": "SIKH"
  }, {
    "name": "Spiritism",
    "value": "SPIR"
  }, {
    "name": "Tenrikyo",
    "value": "TEN"
  }, {
    "name": "Unitarian-Universalism",
    "value": "UNIU"
  }, {
    "name": "Zoroastrianism",
    "value": "ZORO"
  }, {
    "name": "primal-indigenous",
    "value": "PRIN"
  }, {
    "name": "Other",
    "value": "OTH"
  }],
  educations: [{
    "name": "No formal education",
    "value": "NFE"
  }, {
    "name": "Primary education",
    "value": "PE"
  }, {
    "name": "Secondary education or high school",
    "value": "SE"
  }, {
    "name": "GED",
    "value": "GED"
  }, {
    "name": "Vocational qualification",
    "value": "VQ"
  }, {
    "name": "Bachelor's degree",
    "value": "BD"
  }, {
    "name": "Master's degree",
    "value": "MD"
  }, {
    "name": "Doctorate or higher",
    "value": "DH"
  }],
  studies: [{
    "name": "Agriculture",
    "value": "AG"
  }, {
    "name": "Automobile",
    "value": "AU"
  }, {
    "name": "Aviation",
    "value": "AV"
  }, {
    "name": "Bio-Chemistry/Bio-Technology",
    "value": "BIOC"
  }, {
    "name": "Biomedical",
    "value": "BIOD"
  }, {
    "name": "Ceramics",
    "value": "CER"
  }, {
    "name": "Chemical",
    "value": "CHEM"
  }, {
    "name": "Civil",
    "value": "CIVIL"
  }, {
    "name": "Computers",
    "value": "COM"
  }, {
    "name": "Electrical",
    "value": "ELC"
  }, {
    "name": "Electronics/Telecommunication",
    "value": "ELCT"
  }, {
    "name": "Energy",
    "value": "ENG"
  }, {
    "name": "Environmental",
    "value": "ENV"
  }, {
    "name": "Instrumentation",
    "value": "INS"
  }, {
    "name": "Marine",
    "value": "MARINE"
  }, {
    "name": "Mechanical",
    "value": "MCH"
  }, {
    "name": "Metallurgy",
    "value": "MET"
  }, {
    "name": "Mineral",
    "value": "MIN"
  }, {
    "name": "Mining",
    "value": "MINI"
  }, {
    "name": "Nuclear",
    "value": "NUC"
  }, {
    "name": "Paint/Oil",
    "value": "PAINT"
  }, {
    "name": "Petroleum",
    "value": "PETRO"
  }, {
    "name": "Plastics",
    "value": "PLASTIC"
  }, {
    "name": "Production/Industrial",
    "value": "PROUD"
  }, {
    "name": "Textile",
    "value": "TEXTILE"
  }, {
    "name": "Other Engineering",
    "value": "OTHE"
  }, {
    "name": "Other",
    "value": "OTH"
  }],
  MaritialStatus: [
    {
      "name": "Single",
      "value": "SINGLE"
    },
    {
      "name": "Divorsed",
      "value": "DIVORSED"
    }, {
      "name": "Gol Dhana Folk",
      "value": "GDF"
    }, {
      "name": "Widow",
      "value": "WIDOW"
    }, {
      "name": "Annulled",
      "value": "ANNULLED"
    }
  ],
  complexion: [
    {
      "name": "Light",
      "value": "LIGHT"
    },
    {
      "name": "Fair",
      "value": "FAIR"
    }, {
      "name": "Dark",
      "value": "FAIR"
    }, {
      "name": "Wheatish",
      "value": "WHEATISH"
    }
  ],
  BodyType: [
    {
      "name": "Slim",
      "value": "SLIM"
    },
    {
      "name": "Slender",
      "value": "SLENDER"
    }, {
      "name": "Average",
      "value": "AVERAGE"
    }, {
      "name": "Smart",
      "value": "SMART"
    }, {
      "name": "Athletic",
      "value": "ATHLETIC"
    }, {
      "name": "Muscular",
      "value": "MUSCULAR"
    }, {
      "name": "Thick",
      "value": "THICK"
    }, {
      "name": "Fatty",
      "value": "FATTY"
    }, {
      "name": "Voluptuous",
      "value": "VOLUPTUOUS"
    }, {
      "name": "Large",
      "value": "LARGE"
    }
  ],
  PhysicalStatus: [
    {
      "name": "Normal",
      "value": "NOR"
    },
    {
      "name": "Physically challenged",
      "value": "PC"
    }

  ],
  occupations: [{
    "name": "Chiropractor",
    "value": "1"
  }, {
    "name": "Dentist",
    "value": "2"
  }, {
    "name": "Dietitian or Nutritionist",
    "value": "3"
  }, {
    "name": "Optometrist",
    "value": "4"
  }, {
    "name": "Pharmacist",
    "value": "5"
  }, {
    "name": "Physician",
    "value": "6"
  }, {
    "name": "Physician Assistant",
    "value": "7"
  }, {
    "name": "Podiatrist",
    "value": "8"
  }, {
    "name": "Registered Nurse",
    "value": "9"
  }, {
    "name": "Therapist",
    "value": "10"
  }, {
    "name": "Veterinarian",
    "value": "11"
  }, {
    "name": "Health Technologist or Technician",
    "value": "12"
  }, {
    "name": "Other Healthcare Practitioners and Technical Occupation",
    "value": "13"
  }, {
    "name": "Nursing, Psychiatric, or Home Health Aide",
    "value": "14"
  }, {
    "name": "Occupational and Physical Therapist Assistant or Aide",
    "value": "15"
  }, {
    "name": "Other Healthcare Support Occupation",
    "value": "16"
  }, {
    "name": "Chief Executive",
    "value": "17"
  }, {
    "name": "General and Operations Manager",
    "value": "18"
  }, {
    "name": "Advertising, Marketing, Promotions, Public Relations, and Sales Manager",
    "value": "19"
  }, {
    "name": "Operations Specialties Manager (e.g., IT or HR Manager)",
    "value": "20"
  }, {
    "name": "Construction Manager",
    "value": "21"
  }, {
    "name": "Engineering Manager",
    "value": "22"
  }, {
    "name": "Accountant, Auditor",
    "value": "23"
  }, {
    "name": "Business Operations or Financial Specialist",
    "value": "24"
  }, {
    "name": "Business Owner",
    "value": "25"
  }, {
    "name": "Other Business, Executive, Management, Financial Occupation",
    "value": "26"
  }, {
    "name": "Architect, Surveyor, or Cartographer",
    "value": "27"
  }, {
    "name": "Engineer",
    "value": "28"
  }, {
    "name": "Other Architecture and Engineering Occupation",
    "value": "29"
  }, {
    "name": "Postsecondary Teacher (e.g., College Professor)",
    "value": "30"
  }, {
    "name": "Primary, Secondary, or Special Education School Teacher",
    "value": "31"
  }, {
    "name": "Other Teacher or Instructor",
    "value": "32"
  }, {
    "name": "Other Education, Training, and Library Occupation",
    "value": "33"
  }, {
    "name": "Arts, Design, Entertainment, Sports, and Media Occupations",
    "value": "34"
  }, {
    "name": "Computer Specialist, Mathematical Science",
    "value": "35"
  }, {
    "name": "Counselor, Social Worker, or Other Community and Social Service Specialist",
    "value": "36"
  }, {
    "name": "Lawyer, Judge",
    "value": "37"
  }, {
    "name": "Life Scientist (e.g., Animal, Food, Soil, or Biological Scientist, Zoologist)",
    "value": "38"
  }, {
    "name": "Physical Scientist (e.g., Astronomer, Physicist, Chemist, Hydrologist)",
    "value": "39"
  }, {
    "name": "Religious Worker (e.g., Clergy, Director of Religious Activities or Education)",
    "value": "40"
  }, {
    "name": "Social Scientist and Related Worker",
    "value": "41"
  }, {
    "name": "Other Professional Occupation",
    "value": "42"
  }, {
    "name": "Supervisor of Administrative Support Workers",
    "value": "43"
  }, {
    "name": "Financial Clerk",
    "value": "44"
  }, {
    "name": "Secretary or Administrative Assistant",
    "value": "45"
  }, {
    "name": "Material Recording, Scheduling, and Dispatching Worker",
    "value": "46"
  }, {
    "name": "Other Office and Administrative Support Occupation",
    "value": "47"
  }, {
    "name": "Protective Service (e.g., Fire Fighting, Police Officer, Correctional Officer)",
    "value": "48"
  }, {
    "name": "Chef or Head Cook",
    "value": "49"
  }, {
    "name": "Cook or Food Preparation Worker",
    "value": "50"
  }, {
    "name": "Food and Beverage Serving Worker (e.g., Bartender, Waiter, Waitress)",
    "value": "51"
  }, {
    "name": "Building and Grounds Cleaning and Maintenance",
    "value": "52"
  }, {
    "name": "Personal Care and Service (e.g., Hairdresser, Flight Attendant, Concierge)",
    "value": "53"
  }, {
    "name": "Sales Supervisor, Retail Sales",
    "value": "54"
  }, {
    "name": "Retail Sales Worker",
    "value": "55"
  }, {
    "name": "Insurance Sales Agent",
    "value": "56"
  }, {
    "name": "Sales Representative",
    "value": "57"
  }, {
    "name": "Real Estate Sales Agent",
    "value": "58"
  }, {
    "name": "Other Services Occupation",
    "value": "59"
  }, {
    "name": "Construction and Extraction (e.g., Construction Laborer, Electrician)",
    "value": "60"
  }, {
    "name": "Farming, Fishing, and Forestry",
    "value": "61"
  }, {
    "name": "Installation, Maintenance, and Repair",
    "value": "62"
  }, {
    "name": "Production Occupations",
    "value": "63"
  }, {
    "name": "Other Agriculture, Maintenance, Repair, and Skilled Crafts Occupation",
    "value": "64"
  }, {
    "name": "Aircraft Pilot or Flight Engineer",
    "value": "65"
  }, {
    "name": "Motor Vehicle Operator (e.g., Ambulance, Bus, Taxi, or Truck Driver)",
    "value": "66"
  }, {
    "name": "Other Transportation Occupation",
    "value": "67"
  }, {
    "name": "Military",
    "value": "68"
  }, {
    "name": "Homemaker",
    "value": "69"
  }, {
    "name": "Other Occupation",
    "value": "70"
  }, {
    "name": "Don't Know",
    "value": "71"
  }, {
    "name": "Not Applicable",
    "value": "72"
  }],
  Expectation: [
    {
      "name": "Only Mumbai",
      "value": "ONM"
    },
    {
      "name": "Ready to relocate of India",
      "value": "RTRI"
    },
    {
      "name": "No criteria for place",
      "value": "NCFP"
    }
  ],
  Horoscope: [
    {
      "name": "Claire",
      "value": "CL"
    },
    {
      "name": "Light Mangal",
      "value": "LM"
    }
  ],
  aincome: [
    {
      "name": "0-2 Lakhs",
      "value": "0T2L"
    },
    {
      "name": "3-5 Lakhs",
      "value": "3T5L"
    },
    {
      "name": "5-8 Lakhs",
      "value": "5T8L"
    },
    {
      "name": "8-10 Lakhs",
      "value": "8T10L"
    },
    {
      "name": "Above 10 Lakhs",
      "value": "A10L"
    }
  ]

};
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/app\\registration-login\\services\\form-data.js","/app\\registration-login\\services")

},{"_process":"E:\\angualarjslibs\\node_modules\\process\\browser.js","buffer":"E:\\angualarjslibs\\node_modules\\buffer\\index.js"}],"E:\\angualarjslibs\\app\\registration-login\\services\\index.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
'use strict';
var angular = require('angular');

//services//
var login=require('./login.service');
var countryService=require('./country.service');
//var toaster=require('./toaster.config');
module.exports = angular.module('app.ui.registration.login.services', [])
//.config(toaster)
.factory("loginservice",login)
.factory("countryService",countryService);
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/app\\registration-login\\services\\index.js","/app\\registration-login\\services")

},{"./country.service":"E:\\angualarjslibs\\app\\registration-login\\services\\country.service.js","./login.service":"E:\\angualarjslibs\\app\\registration-login\\services\\login.service.js","_process":"E:\\angualarjslibs\\node_modules\\process\\browser.js","angular":"angular","buffer":"E:\\angualarjslibs\\node_modules\\buffer\\index.js"}],"E:\\angualarjslibs\\app\\registration-login\\services\\login.service.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
/* @ngInject */
module.exports = function ($http,$q, $viewusers,socket, $state, $timeout, $sessionStorage, $localStorage, ServiceUrls, $location, $uibModal, $rootScope) {

    function changeUser(user) {
        angular.extend(currentUser, user);
    }
   
    function urlBase64Decode(str) {
        var output = str.replace('-', '+').replace('_', '/');
        switch (output.length % 4) {
            case 0:
                break;
            case 2:
                output += '==';
                break;
            case 3:
                output += '=';
                break;
            default:
                throw 'Illegal base64url string!';
        }
        return window.atob(output);
    }

    function getUserFromToken() {
        var token = $sessionStorage.token;
        var user = {};
        if (typeof token !== 'undefined') {
            var encoded = token.split('.')[1];

            var obj = JSON.parse(urlBase64Decode(encoded));
            user = obj._doc;
            $rootScope.fname = user.first_name;
            $rootScope.login_user_role = user.user_role;
            $rootScope.login_user_id = user.user_id;
            $rootScope.login_user_gender = user.gender;

        }
        return user;
    }




    var service = {
        signup: function (data, success, error) {
            $http.post(ServiceUrls.BASEURL + ServiceUrls.SINGUP, data).success(success).error(error);
        },
        updateUser: function (data, success, error) {
            $http.post(ServiceUrls.BASEURL + ServiceUrls.UPDATEUSER, data).success(success).error(error);
        },
        savemoreinfo: function (data, success, error) {

            $http.post(ServiceUrls.BASEURL + ServiceUrls.SAVEMOREINFO, data).success(success).error(error);
        },
        signin: function (data, success, error) {
            $http.post(ServiceUrls.BASEURL + ServiceUrls.SIGNIN, data).success(success).error(error);
        },
        checkemail: function (data, success, error) {
            $http.post(ServiceUrls.BASEURL + ServiceUrls.CHECKEMAILID, data).success(success).error(error);
        },
        verifyOtp: function (data, success, error) {
            var user = getUserFromToken();
           // data.user_id = user.user_id;
           var req= {
            user_id:user.user_id,
              otp:data.otp
            }
            $http.post(ServiceUrls.BASEURL + ServiceUrls.OTPVERIFY, req).success(success).error(error);
        },

        afterloginRoute: function (role) {

            if (!$sessionStorage.token) {

                $location.path("/login");
               }
           var user = $rootScope.current_user_de_all;
         
          //  var pic = this.getProfilePic();
            if (role === "ADMIN") {
                $location.path('/admin');
                // if (state === "HOME" || state === "/register" || state === "/login") {
                //     $location.path('/admin');
                    
                // }
                // else {
                //   //  $location.path(state);
                //     return;
                // }
               
            }
           if (role === "FREEUSER") {

                if (!user.phone_vr) {
                    this.openotpPopup();
                   
                    return;
                }
                if (!user.more_info_vr) {
                    $location.path('/moreinfo');
                   
                    return;
                }
                $location.path('/dashboard');
                // if (!pic.profile) {
                //     var config = {
                //         user_id: user.user_id,
                //         from_sec: 'userEntry',
                //         photo_type: 'PROFILE'
                //     };

                //     this.openCropPopup(config);
                //     return;

                // }
                // if (state === "HOME" || state === "/register" || state === "/login") {
                //     console.log("hh")
                //     $location.path('/dashboard');
                //     success();
                //     //return;
                // }
                // else {
                   
                //   //  $location.path(state);
                   
                // }

               
            }

          

        },
        openCropPopup: function (user) {
            var modalInstance = $uibModal.open({
                animation: true,
                windowClass: "",
                templateUrl: './app/registration-login/crop-modal/crop-modal.html',
                controller: 'CropModalController',
                controllerAs: 'ctrl',
                size: "lg",
                backdrop: 'static',
                keyboard: false,
                resolve: {
                    user: function () {
                        return user;
                    }
                }

            });
        },
        openotpPopup: function () {
            var modalInstance = $uibModal.open({
                animation: true,
                windowClass: "login-model",
                templateUrl: './app/registration-login/otp-verification/otp.html',
                controller: 'OtpVrController',
                controllerAs: 'ctrl',
                size: "lg",
                backdrop: 'static',
                keyboard: false

            });
        },
        openMoreInfoModal: function (user) {
            var modalInstance = $uibModal.open({
                animation: true,
                windowClass: "login-model",
                templateUrl: './app/registration-login/goto-moreinfo-modal/goto-moreinfo.html',
                controller: 'goToMoreController',
                controllerAs: 'ctrl',
                size: "lg",
                backdrop: 'static',
                keyboard: false,
                resolve: {
                    user: function () {
                        return user;
                    }
                }

            });
        },
        saveToken: function (token) {

            $sessionStorage.token = token;
           
            var d = getUserFromToken();
            var self = this;
            
            self.getCureentUser(d.user_id, function (rs) {

                if (rs) {
                    self.afterloginRoute(d.user_role);
                }
            });


        },

        getUserShrotInfo: function (data) {

        },
        getCurrentUserRole: function (success) {


            if ($sessionStorage.token) {
                var cUser = getUserFromToken();
                if ($rootScope.current_user_de_all) {

                    success(cUser.user_role);
                    ///return;
                }
                else {
                    this.getCureentUser(cUser.user_id, function (result) {

                        success(cUser.user_role);
                      //  return;
                    });
                }

            }
            else {
                $location.path("/register");
            }

        },
        getCurrentUserSession: function (success) {
            var cUser = getUserFromToken();

            if ($sessionStorage.token) {




                success(cUser);
            }
            else {
                $location.path("/register");
            }
        },
        getCureentUser: function (userId, success) {
            $viewusers.getUser({ "user_id": userId }, function (result) {


                $rootScope.current_user_de_all = result.user;

                success(true);

            }, function () { });
        },
        getFiledsData: function () {
            var formdata = require('./form-data');
            return formdata;
        },
        getProfilePic: function () {
            var pics = {
                profile: null,
                album: []
            };
            if ($rootScope.current_user_de_all.pic.length > 0) {

                for (var key = 0; key < $rootScope.current_user_de_all.pic.length; key++) {
                    if ($rootScope.current_user_de_all.pic[key].photo_type === "PROFILE") {
                        pics.profile = $rootScope.current_user_de_all.pic[key];
                        //return $rootScope.current_user_de_all.pic[key];
                    }
                    else {
                        var imgUrl = ServiceUrls.BASEURL + ServiceUrls.USER_PROFILE_PHOTO_DISPLAY_PATH + $rootScope.current_user_de_all.pic[key].photo_path;

                        var alb = {
                            id: $rootScope.current_user_de_all.pic[key]._id,
                            url: imgUrl
                        };
                        pics.album.push(alb);
                    }

                }
            }
            return pics;
        },
        
        getAlbumPics: function (data, success) {

            $http.post(ServiceUrls.BASEURL + ServiceUrls.GET_ALBUM, data).success(function (res) {
                var imgs = [];
                angular.forEach(res, function (v, i) {

                    var imgUrl = ServiceUrls.BASEURL + ServiceUrls.USER_PROFILE_PHOTO_DISPLAY_PATH + v.photo_path;
                    var img = {
                        id: v._id,
                        url: imgUrl

                    };
                    imgs.push(img);



                });

                success(imgs);
            });

        },
        setProfilePic: function (pic) {
            if ($rootScope.current_user_de_all.pic.length > 0) {

                for (var key = 0; key < $rootScope.current_user_de_all.pic.length; key++) {
                    if ($rootScope.current_user_de_all.pic[key].photo_type === "PROFILE") {

                        $rootScope.current_user_de_all.pic[key] = pic;
                    }

                }
            }
            else {
                $rootScope.current_user_de_all.pic.push(pic);
            }

        }, getAuthObject: function () {
            var deferred = $q.defer();
           //var loginuser=$rootScope.current_user_de_all;
            // later we can use this quick way -
            // - once user is already loaded
            if ($sessionStorage.token) {
                var cUser = getUserFromToken();
               

            }
            else {
                $location.path("/register");
            }
            if ($rootScope.current_user_de_all) {
                return $q.when($rootScope.current_user_de_all);
            }

            // server fake call, in action would be $http
            $timeout(function () {
                // server returned UN authenticated user
               // loginuser = {isAuthenticated: false };
                // $http.get("./albums.ms")
                // .success(function(data) {
                //     deferred.resolve(loginuser)
                //     def.resolve(data);
                // })
                // .error(function() {
                //     def.reject("Failed to get albums");
                // });
                $viewusers.getUser({ "user_id": cUser.user_id }, function (result) {
                    
                    
                                    $rootScope.current_user_de_all = result.user;
                                    deferred.resolve(result.user)
                                   
                    
                                }, function () { });
               
            }, 500)

            return deferred.promise;
        },

        // sync, quick way how to check IS authenticated...
        isAuthenticated: function () {
             if($sessionStorage.token){

                if ($rootScope.current_user_de_all){

                    return{
                        role:$rootScope.current_user_de_all.user_role,
                        isAuth:true
                    }
                }
                else{
                    return{
                        role:null,
                        isAuth:true
                    }
                }
                

            }
            else{
                
               
                return{
                    role:null,
                    isAuth:false
                }
            }
        },
        calculate_age: function (birth_month, birth_day, birth_year) {
            var today_date = new Date();
            var today_year = today_date.getFullYear();
            var today_month = today_date.getMonth();
            var today_day = today_date.getDate();
            var age = today_year - birth_year;

            if (today_month < (birth_month - 1)) {
                age--;
            }
            if (((birth_month - 1) === today_month) && (today_day < birth_day)) {
                age--;
            }

            return age;
        },
        logout: function (success) {
            var user = getUserFromToken();
            var data = {
                user_id:user.user_id
            };
            $rootScope.current_user_de_all = {};
           
            socket.emit('logout',{user_id:user.user_id});
            changeUser({});
            delete $sessionStorage.token;
            success(true)
           // $http.post(ServiceUrls.BASEURL + ServiceUrls.LOGOUT, data).success(success).error(error);
        }
    };

    var currentUser = getUserFromToken();
    return service;
};
module.exports.$inject = ["$http", "$q", "$viewusers", "socket", "$state", "$timeout", "$sessionStorage", "$localStorage", "ServiceUrls", "$location", "$uibModal", "$rootScope"];
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/app\\registration-login\\services\\login.service.js","/app\\registration-login\\services")

},{"./form-data":"E:\\angualarjslibs\\app\\registration-login\\services\\form-data.js","_process":"E:\\angualarjslibs\\node_modules\\process\\browser.js","buffer":"E:\\angualarjslibs\\node_modules\\buffer\\index.js"}],"E:\\angualarjslibs\\app\\router\\http.config.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
/* @ngInject */
module.exports = function ($httpProvider) {
     $httpProvider.interceptors.push(['$q', '$location', '$sessionStorage', function($q, $location, $sessionStorage) {
      
            return {
                'request': function (config) {
                    
                    config.headers = config.headers || {};
                    if ($sessionStorage.token) {
                       
                        config.headers.Authorization = 'Bearer ' + $sessionStorage.token;
                    }
                   
                    return config;
                },
                'responseError': function(response) {
                    console.log(response.status)
                    if(response.status === 401 || response.status === 403) {
                     
                     
                        $location.path('/404');
                    }
                    return $q.reject(response);
                }
            };
        }]);
  
};
module.exports.$inject = ["$httpProvider"];
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/app\\router\\http.config.js","/app\\router")

},{"_process":"E:\\angualarjslibs\\node_modules\\process\\browser.js","buffer":"E:\\angualarjslibs\\node_modules\\buffer\\index.js"}],"E:\\angualarjslibs\\app\\router\\http.urls.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
/* @ngInject */
module.exports =  function(){
  //"BASEURL":"http://192.169.136.224:4000",

var url="http://192.169.136.224:4000";
//var url="http://localhost:4000";
return {
    "BASEURL":url,
    "LOGIN":"/login",
    "AUTHENTICATE":"/authenticate",
    "LOGOUT":"/logout",
    "SIGNIN":"/signin",
    "SINGUP":"/singup",
    "COUNTRIES":"/countries",
    "STATES":"/states",
    "CITIES":"/cities",
    "GET_USER_LOC":"/getuserloc",
    "CHECKEMAILID":"/checkemailid",
    "OTPVERIFY":"/otpverify",
    "SAVEMOREINFO":"/savemoreinfo",
    "GET_USERS":"/getusers",
    "GET_USER":"/getuser",
    "ADMIN_ACCEPT":"/admin_accept",
    "USER_PROFILE_PHOTO_UPLOAD":"/user_profile_photo_upload",
    "ADMIN_ACCEPT_PHOTO":"/admin_accept_photo",
    "USER_PROFILE_PHOTO_DISPLAY_PATH":"/userphoto/",
    "GETALLUSERS_GROUPBY_PHOTO_STATUS":"/getall_users_groupby_photo_status",
    "GETALLUSERS_GROUPBY_PHOTO_STATUS_COUNT":"/getall_users_groupby_photo_status_count",
    "GETALLUSERS_GROUPBY_PENDING_EMAIL_VR":"/getallusers_groupby_pending_email_vr",
    "GETALLUSERS_GROUPBY_PENDING_EMAIL_VR_COUNT":"/getallusers_groupby_pending_email_vr_count",
    "PENDING_PROFILES_COUNT":"/pending_profiles_count",
    "GET_ALL_USERS_STATUS_COUNT":"/get_all_users_status_count",
    "GET_ALBUM":"/getalbum",
    "GET_PRE_MATCHES":"/get_pre_matches",
    "SEND_MESSAGE":"/send_message",
    "GET_MESSAGES":"/get_messages",
    "CHANGE_MESSAGE_STATUS":"/change_message_status",
    "GET_MESSAGES_COUNT":"/get_messages_count",
    "CHECK_USER_CURRENTUSER":"/check_user_currentuser",
    "SEND_REQUEST":"/send_request",
    "UPDATE_REQUEST":"/update_request",
    "CREATE_USER_BLOCK":"/create_user_block",
    "UPDATE_USER_BLOCK":"/update_user_block",
    "GET_REQUESTS_COUNT":"/get_requests_count",
    "GET_REQUESTS":"/get_requests",
    "UPDATE_REQUESTS":"/update_requests",
    "GET_NOTIFICATIONS":"/get_notifications",
    "UPDATE_NOTIFICATIONS":"/update_notifications",
    "SET_SEARCH":"/set_search",
    "GET_SEARCH":"/get_search",
    "GET_SEARCH_RESULT":"/get_search_result",
    "SAVE_SEARCH_RESULT":"/save_search_result",
    "GET_SAVED_SEARCH_RESULT":"/get_saved_search_result",
    "SAVE_PARTNER_PRE":"/save_partner_pre",
    "GET_PARTNER_PRE":"/get_partner_pre",
    "GET_CONTACTNO":"/get_contactno",
    "SAVE_SETTINGS":"/save_settings",
    "GET_SETTINGS":"/get_settings",
    "UPDATEUSER":"/updateUser"
      };
    

};
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/app\\router\\http.urls.js","/app\\router")

},{"_process":"E:\\angualarjslibs\\node_modules\\process\\browser.js","buffer":"E:\\angualarjslibs\\node_modules\\buffer\\index.js"}],"E:\\angualarjslibs\\app\\router\\index.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
var angular = require('angular');
var uiRouter = require('angular-ui-router');
var ServiceUrls = require('./http.urls');
var routerConfig = require('./router.config');
var Router = require('./router.service');
var httpConfig= require('./http.config');
module.exports = angular.module('app.ui.router', [uiRouter])
    .config(httpConfig)
    .provider('routerConfig', routerConfig)
    .factory('Router', Router)
    .factory('ServiceUrls', ServiceUrls);
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/app\\router\\index.js","/app\\router")

},{"./http.config":"E:\\angualarjslibs\\app\\router\\http.config.js","./http.urls":"E:\\angualarjslibs\\app\\router\\http.urls.js","./router.config":"E:\\angualarjslibs\\app\\router\\router.config.js","./router.service":"E:\\angualarjslibs\\app\\router\\router.service.js","_process":"E:\\angualarjslibs\\node_modules\\process\\browser.js","angular":"angular","angular-ui-router":"angular-ui-router","buffer":"E:\\angualarjslibs\\node_modules\\buffer\\index.js"}],"E:\\angualarjslibs\\app\\router\\router.config.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
/* @ngInject */
module.exports = function ($stateProvider, $urlRouterProvider,$locationProvider,$httpProvider) {
    var config = {
        $stateProvider: $stateProvider,
        $urlRouterProvider: $urlRouterProvider
    };
    $locationProvider.html5Mode(true);
//    $httpProvider.interceptors.push(['$q', '$location', '$localStorage', function($q, $location, $localStorage) {
       
//             return {
//                 'request': function (config) {
//                     config.headers = config.headers || {};
//                     if ($localStorage.token) {
//                         config.headers.Authorization = 'Bearer ' + $localStorage.token;
//                     }
//                      console.log("fine with header token")
//                     return config;
//                 },
//                 'responseError': function(response) {
//                     console.log("error");
//                     if(response.status === 401 || response.status === 403) {
//                         $location.path('/signin');
//                     }
//                     return $q.reject(response);
//                 }
//             };
//         }]);
    this.$get = function () {
        return {
            config: config
        };
    };
};
module.exports.$inject = ["$stateProvider", "$urlRouterProvider", "$locationProvider", "$httpProvider"];
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/app\\router\\router.config.js","/app\\router")

},{"_process":"E:\\angualarjslibs\\node_modules\\process\\browser.js","buffer":"E:\\angualarjslibs\\node_modules\\buffer\\index.js"}],"E:\\angualarjslibs\\app\\router\\router.service.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
var _ = require('lodash');

/* @ngInject */
module.exports = function ($location, $rootScope, $state,$sessionStorage, routerConfig, loginservice) {
    var stateProvider = routerConfig.config.$stateProvider,
        urlRouterProvider = routerConfig.config.$urlRouterProvider,
        handlingRouteChangeError = false;

    var service = {
        configureRoutes: configureRoutes,
        getRoutes: getRoutes
    };

    init();

    return service;

    // Private methods

    /**
     * Initializes route helper
     */
    function init() {
       
        handleRoutingTransition();
        handleRoutingErrors();
        handleRoutingSuccess();
    }

    /**
     * Configures each route with provided route provider
     *
     * @param routes - list of routes
     */
    function configureRoutes(routes) {
        _.each(routes, function (route) {
            route.config.resolve = route.config.resolve || {};
            stateProvider.state(route.name, route.config);
        });

        urlRouterProvider.otherwise('/404');
    }

    /**
     * Gets all routes. It also lazy loads the routes from $route.routes if not already in routes.
     * @returns {Array}
     */
    function getRoutes() {
        var routes = [];
        _.each($state.get(), function (route) {
            if (!!route.title) {
                routes.push(route);
            }
        });

        return routes;
    }

    /**
     * Handles routing errors
     */
    function handleRoutingErrors() {
        $rootScope.$on('$routeChangeError', function (event, current, previous, rejection) {
            if (handlingRouteChangeError) {
                return;
            }

            $rootScope.showGlobalLoader = false;
            handlingRouteChangeError = true;

            //var destination = (current && (current.title || current.name || current.loadedTemplateUrl)) || 'unknown target';
            //var msg = 'Error routing to ' + destination + '. ' + (rejection.msg || '');
            //logger.error(msg, [current]);
            $location.path('/404');
        }
        );
    }

    /**
     * Updates the page title when route has successfully changed
     *
     * binds to <title> in <head> block
     */
    function handleRoutingSuccess() {
        $rootScope.$on('$stateChangeSuccess', function (event, toState, toParams, fromState, fromParams) {
            $rootScope.showGlobalLoader = false;
            handlingRouteChangeError = false;
            // $rootScope.title = config.appTitle + ' | ' + (toState.title || '');
            // config.previousState = config.loopCheck;
            // config.previousState = fromState;
            // config.previousParams = fromParams;
        });
    }

    /**
     * On start of transition, activates the loader.
     *
     * Note: There is also logic in here for when the app starts up. Also, cannot test this because we're intercepting
     * the route for redirect which does not play nicely with ui-router-extras during testing.
     */
    /* istanbul ignore next */
    function handleRoutingTransition() {
        //      $rootScope.$on('$routeChangeStart', function(event, currRoute, prevRoute){
        // 	$rootScope.animation = currRoute.animation;
        //   });
        var stateChangeStarted = false;
        $rootScope.$on('$stateChangeStart', function (event, toState, toParams) {

//if(toParams.permisstion === "NOACTION")

if(toState.name==="login"){
    console.log("hh")
   // $location.path("/kk");
    return;
}

            if(!$sessionStorage.token){
               // event.preventDefault();
                $location.path("/");
                return;

            }
            // if already authenticated...
          
        //  callR();
         //  event.preventDefault();
        //  if(!stateChangeStarted) {
        //     stateChangeStarted = true;
        //    // callR();
        //    callR()
        // }
       
        $rootScope.$broadcast("loadhedermenu", toState);
        var isAuthenticated = loginservice.isAuthenticated();
        
         var role;

         if (isAuthenticated.isAuth && isAuthenticated.role) {

             role=isAuthenticated.role;
           
            if (role === "FREEUSER" && toParams.permisstion === "ALLUSER") {
                return;

            }
            if (role === "FREEUSER" && toParams.permisstion === "NOACTION") {
                return;

            }
            
            if (role === "ADMIN" && toParams.permisstion === "ADMIN") {
               
                   return;
              }
              if (role === "ADMIN" && toParams.permisstion === "NOACTION") {
                
                   return;
              }
              if (role === "ADMIN" && toParams.permisstion === "ALLUSER") {
                
                event.preventDefault();
                return;
              }
             
            if (role === "ADMIN" && toParams.permisstion !== "ADMIN") {
                $location.path("/404");
                 return;
                
              }
            
         }
          if(!isAuthenticated.isAuth && !isAuthenticated.role){
           // console.log("no login and no role")
          
            $location.path("/register");
            return;
        }
        event.preventDefault();

       
         if (isAuthenticated.isAuth && !isAuthenticated.role) {
             
            loginservice
            .getAuthObject()
            .then(function (user) {
                if (user.user_role) {
                  
                    if (user.user_role === "FREEUSER" && toParams.permisstion === "ALLUSER") {
                        $state.go(toState, toParams);
                        return;
        
                    }
                    if (user.user_role === "FREEUSER" && toParams.permisstion === "ADMIN") {
                       
                        $state.go("root.404");
                          return;
                      }
                    if (user.user_role === "FREEUSER" && toParams.permisstion === "NOACTION") {
                        $state.go(toState, toParams);
                           return;
                      }
                      if (user.user_role === "ADMIN" && toParams.permisstion === "ADMIN") {
                        
                        $state.go(toState, toParams);
                           return;
                      }
                    if (user.user_role === "ADMIN" && toParams.permisstion === "ALLUSER") {
                      
                      $state.go("root.404");
                         return;
                    }
                    if (user.user_role === "ADMIN" && toParams.permisstion === "NOACTION") {
                        $state.go(toState, toParams);
                           return;
                      }
                    if (user.user_role === "ADMIN" && toParams.permisstion !== "ALLUSER") {
                        $state.go(toState, toParams);
                     
                           return;
                      }
                    
                }
            });
             

         }
          

        });
    }
};
module.exports.$inject = ["$location", "$rootScope", "$state", "$sessionStorage", "routerConfig", "loginservice"];
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/app\\router\\router.service.js","/app\\router")

},{"_process":"E:\\angualarjslibs\\node_modules\\process\\browser.js","buffer":"E:\\angualarjslibs\\node_modules\\buffer\\index.js","lodash":"lodash"}],"E:\\angualarjslibs\\app\\search\\index.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
'use strict';
var angular = require('angular');
// var registercomponents = require('./components');
 var searchRoutes = require('./search.route');
 var searchByController = require('./searchby/searchby.controller');
 var searchHistoryController = require('./search_history/search.history.controller');
var searchResultController = require('./search_result/search.result');
// var MoreInfoController = require('./more-info/moreInfo.controller');
// var OtpVrController = require('./otp-verification/otp.controller');
// var HelpMeWriteController = require('./help-me-write/help-me-write');
// var CropModalController = require('./crop-modal/crop-modal');
// var cropDirective = require('./crop-modal/ng-img-crop');
// var goToMoreController=require('./goto-moreinfo-modal/goto-moreinfo-modal');
//services//
var searchService = require('./search.service');
module.exports = angular.module('app.ui.srarch', [])
    .run(searchRoutes)
    .factory("searchService",searchService)
    .controller('searchByController', searchByController)
    .controller('searchResultController', searchResultController)
    .controller('searchHistoryController', searchHistoryController).
    filter('height', function () {
      return function (item) {
       
       if(!item){
         return;
       }
      item=item.toFixed(2);
      
        var ht=item.toString().split(".");
        var ht1=ht[0]+" ft ";
     
        var ht2=(parseInt(ht[1])===0  ? '' :parseInt(ht[1]) +" in");
          return ht1+ht2;
      };
    }).filter('propsFilter', function() {
        return function(items, props) {
          var out = [];
      
          if (angular.isArray(items)) {
            var keys = Object.keys(props);
      
            items.forEach(function(item) {
              var itemMatches = false;
      
              for (var i = 0; i < keys.length; i++) {
                var prop = keys[i];
                var text = props[prop].toLowerCase();
                if (item[prop].toString().toLowerCase().indexOf(text) !== -1) {
                  itemMatches = true;
                  break;
                }
              }
      
              if (itemMatches) {
                out.push(item);
              }
            });
          } else {
            // Let the output be the input untouched
            out = items;
          }
      
          return out;
        };
      });
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/app\\search\\index.js","/app\\search")

},{"./search.route":"E:\\angualarjslibs\\app\\search\\search.route.js","./search.service":"E:\\angualarjslibs\\app\\search\\search.service.js","./search_history/search.history.controller":"E:\\angualarjslibs\\app\\search\\search_history\\search.history.controller.js","./search_result/search.result":"E:\\angualarjslibs\\app\\search\\search_result\\search.result.js","./searchby/searchby.controller":"E:\\angualarjslibs\\app\\search\\searchby\\searchby.controller.js","_process":"E:\\angualarjslibs\\node_modules\\process\\browser.js","angular":"angular","buffer":"E:\\angualarjslibs\\node_modules\\buffer\\index.js"}],"E:\\angualarjslibs\\app\\search\\search.route.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
/* @ngInject */
module.exports = function searchRoutes(Router) {
    Router.configureRoutes([
        {
            name: "root.searchby",
            config: {
                url: '/searchby',
                              

                views: {
                    '@': {
                        templateUrl: "app/search/searchby/searchby.html",
                        controller: "searchByController as $ctrl"
                    }
                },
                 params: {
                    permisstion: "ALLUSER"
                },
                title: 'searchby'
            }
        },
          {
            name: "root.search_history",
            config: {
                url: '/search_history',
                views: {
                    '@': {
                        templateUrl: "app/search/search_history/search_history.html",
                        controller: "searchHistoryController as $ctrl"
                    }
                },
                params: {
                    permisstion: "ALLUSER"
                },
                title: 'search_history'
            }
        },
        {
            name: "root.search_result",
            config: {
                url: '/search_result',
                views: {
                    '@': {
                        templateUrl: "app/search/search_result/search_result.html",
                        controller: "searchResultController as $ctrl"
                    }
                },
                params: {
                    permisstion: "ALLUSER",
                    fields:null
                },
                title: 'search_result'
            }
        }
    ]);
};
module.exports.$inject = ["Router"];
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/app\\search\\search.route.js","/app\\search")

},{"_process":"E:\\angualarjslibs\\node_modules\\process\\browser.js","buffer":"E:\\angualarjslibs\\node_modules\\buffer\\index.js"}],"E:\\angualarjslibs\\app\\search\\search.service.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
/* @ngInject */

module.exports =function($http,ServiceUrls){
    
 return {
         saveSearch: function(data,success, error) {
             $http.post(ServiceUrls.BASEURL + ServiceUrls.SET_SEARCH,data).success(success).error(error);
         },
         getSearch: function(data,success, error) {
            $http.post(ServiceUrls.BASEURL + ServiceUrls.GET_SEARCH,data).success(success).error(error);
        },
        getSearchResult: function(data,success, error) {
            $http.post(ServiceUrls.BASEURL + ServiceUrls.GET_SEARCH_RESULT,data).success(success).error(error);
        },
       saveSearchResult: function(data,success, error) {
            $http.post(ServiceUrls.BASEURL + ServiceUrls.SAVE_SEARCH_RESULT,data).success(success).error(error);
        },
        getSearchResults: function(data,success, error) {
            $http.post(ServiceUrls.BASEURL + ServiceUrls.GET_SAVED_SEARCH_RESULT,data).success(success).error(error);
        }
        
         
     };
 };
 module.exports.$inject = ["$http", "ServiceUrls"];
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/app\\search\\search.service.js","/app\\search")

},{"_process":"E:\\angualarjslibs\\node_modules\\process\\browser.js","buffer":"E:\\angualarjslibs\\node_modules\\buffer\\index.js"}],"E:\\angualarjslibs\\app\\search\\search_history\\search.history.controller.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
/* @ngInject */
module.exports = function searchResultController($rootScope, $state,searchService) {
    var controller = this;
    controller.limit = 10;
    controller.total = 0;
    controller.page = 1;
    controller.pages = 0;
    controller.maxSize = 5;
    controller.resultsds = [];
    controller.start = 0;
    controller.end = 0;
    var req = {
        page: controller.page,
        limit: controller.limit,
        user_id: $rootScope.login_user_id
    };

    controller.pageChanged = function () {

        controller.selectedAll = false;

        controller.page = controller.page;

        req.page = controller.page;
        controller.loadViewType();

    };
    function serachResults() {

        searchService.getSearchResults(req, function (result) {

            setUserData(result)
        }, function (error) { });
    }
    controller.loadViewType = function () {
        controller.resultsds = [];
        controller.selectedAll = false;
        serachResults();



    };


    function setUserData(result) {
        controller.searchResults = [];
        controller.pages = result.pages;
        controller.total = result.total;
        controller.searchResults = result.searchResults;

        controller.start = (controller.page - 1) * controller.limit + 1;
        controller.end = controller.start + result.searchResults.length - 1;
    }

    controller.loadViewType();

    controller.goToSearch = function () {

    };
    controller.checkAll = function () {
        controller.resultsds = [];
        if (controller.selectedAll) {
            controller.selectedAll = true;
        } else {
            controller.selectedAll = false;
        }
        angular.forEach(controller.searchResults, function (sr) {
            sr.Selected = controller.selectedAll;
            if (sr.Selected) {
                controller.resultsds.push(sr._id);
            }

        });

    };
    controller.checkBoxSelect = function () {
        controller.resultsds = [];
        angular.forEach(controller.searchResults, function (sr) {
            if (sr.Selected) {
                controller.resultsds.push(sr._id);
            }


        });

    };
    controller.loadSearchResult=function(fields){
        $state.go('root.search_result', {fields:fields});
    };
    searchService.getSearch({ user_id: $rootScope.login_user_id }, function (result) {
        
                if (result) {
        
                    controller.fields = result;
                  
        
        
        
                }
                else {
                    controller.fields = "FIRST";
        
                }
            }, function (error) { });
};
module.exports.$inject = ["$rootScope", "$state", "searchService"];
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/app\\search\\search_history\\search.history.controller.js","/app\\search\\search_history")

},{"_process":"E:\\angualarjslibs\\node_modules\\process\\browser.js","buffer":"E:\\angualarjslibs\\node_modules\\buffer\\index.js"}],"E:\\angualarjslibs\\app\\search\\search_result\\search.result.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
/* @ngInject */
module.exports = function searchResultController($rootScope,$state, countryService, loginservice,messagesservice, searchService) {
    var controller = this;
    controller.fields=$state.params.fields;
     controller.limit = 10;
    controller.total = 0;
    controller.page = 1;
    controller.pages = 0;
    controller.maxSize = 5;
    controller.userIds = [];
    controller.start = 0;
    controller.end = 0;
    var req = {
        page: controller.page,
        limit: controller.limit,
        gender:$rootScope.login_user_gender,
        fields:controller.fields
        };
    controller.searchFields=function(fields){
        controller.fields=fields;
        req.fields=fields;
        req.gender=$rootScope.login_user_gender;
        serachResult();
    };
    controller.pageChanged = function () {
        
                controller.selectedAll = false;
        
                controller.page = controller.page;
        
                req.page = controller.page;
                controller.loadViewType();
        
            };
function serachResult(){

    searchService.getSearchResult(req,function(result){
        
         setUserData(result)
                 },function(error){});
}
            controller.loadViewType = function () {

                if(controller.fields){
                    serachResult();
                }
               
               
               else{
                searchService.getSearch({ user_id: $rootScope.login_user_id }, function (result) {
                    if (result) {
                        req.fields=result;
                        controller.fields=result;
                        req.gender=$rootScope.login_user_gender;
                        serachResult();
                    }
                        
                        },function(error){});
               }
        
            };

            
    function setUserData(result) {
        controller.users = [];
        controller.pages = result.pages;
        controller.total = result.total;
        controller.users = result.users;

        controller.start = (controller.page - 1) * controller.limit + 1;
        controller.end = controller.start + result.users.length - 1;
    }

    controller.loadViewType();
    controller.saveResult={
            user_id: $rootScope.login_user_id,
            name:"",
            fields:controller.fields
    };
    controller.saveNameDisbaled=function(){

if(!controller.saveResult.name){
return true;
}
    };
    controller.saveSearchResult=function(){
        controller.saveResult.fields=controller.fields;
        searchService.saveSearchResult(controller.saveResult,function(result){
            controller.saveResult.name="";
            messagesservice.toaster_msg("Successfully saved");


                     },function(error){});
    };

    };
    module.exports.$inject = ["$rootScope", "$state", "countryService", "loginservice", "messagesservice", "searchService"];
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/app\\search\\search_result\\search.result.js","/app\\search\\search_result")

},{"_process":"E:\\angualarjslibs\\node_modules\\process\\browser.js","buffer":"E:\\angualarjslibs\\node_modules\\buffer\\index.js"}],"E:\\angualarjslibs\\app\\search\\searchby\\searchby.controller.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
/* @ngInject */
module.exports = function searchByController($rootScope, $state,countryService, loginservice, searchService) {
    var controller = this;
   
    searchService.getSearch({ user_id: $rootScope.login_user_id }, function (result) {
        
                if (result) {
        
                    controller.fields = result;
                  
        
        
        
                }
                else {
                    controller.fields = "FIRST";
        
                }
            }, function (error) { });
    
    };
    module.exports.$inject = ["$rootScope", "$state", "countryService", "loginservice", "searchService"];
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/app\\search\\searchby\\searchby.controller.js","/app\\search\\searchby")

},{"_process":"E:\\angualarjslibs\\node_modules\\process\\browser.js","buffer":"E:\\angualarjslibs\\node_modules\\buffer\\index.js"}],"E:\\angualarjslibs\\app\\translate\\index.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
var angular = require('angular');
var translate = require('angular-translate');
var translateFiles = require('angular-translate-loader-static-files');

var translateConfig = require('./translate.config');


module.exports = angular.module('app.ui.translate', [translate,translateFiles])
    .provider('translateConfig', translateConfig);
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/app\\translate\\index.js","/app\\translate")

},{"./translate.config":"E:\\angualarjslibs\\app\\translate\\translate.config.js","_process":"E:\\angualarjslibs\\node_modules\\process\\browser.js","angular":"angular","angular-translate":"angular-translate","angular-translate-loader-static-files":"angular-translate-loader-static-files","buffer":"E:\\angualarjslibs\\node_modules\\buffer\\index.js"}],"E:\\angualarjslibs\\app\\translate\\translate.config.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
/* @ngInject */
module.exports = function ($translateProvider) {
$translateProvider.useSanitizeValueStrategy(null);
$translateProvider
  .useStaticFilesLoader({
    prefix: './app/translate/languages/db-',
    suffix: '.json'
  })
  .preferredLanguage('english');
     this.$get = function () {
        return ;
    };
};
module.exports.$inject = ["$translateProvider"];
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/app\\translate\\translate.config.js","/app\\translate")

},{"_process":"E:\\angualarjslibs\\node_modules\\process\\browser.js","buffer":"E:\\angualarjslibs\\node_modules\\buffer\\index.js"}],"E:\\angualarjslibs\\node_modules\\@iamadamjowett\\angular-click-outside\\clickoutside.directive.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
/*global angular, navigator*/

(function() {
    'use strict';

    angular
        .module('angular-click-outside', [])
        .directive('clickOutside', [
            '$document', '$parse', '$timeout',
            clickOutside
        ]);
    
    /**
     * @ngdoc directive
     * @name angular-click-outside.directive:clickOutside
     * @description Directive to add click outside capabilities to DOM elements
     * @requires $document
     * @requires $parse
     * @requires $timeout
     **/
    function clickOutside($document, $parse, $timeout) {
        return {
            restrict: 'A',
            link: function($scope, elem, attr) {

                // postpone linking to next digest to allow for unique id generation
                $timeout(function() {
                    var classList = (attr.outsideIfNot !== undefined) ? attr.outsideIfNot.split(/[ ,]+/) : [],
                        fn;

                    function eventHandler(e) {
                        var i,
                            element,
                            r,
                            id,
                            classNames,
                            l;

                        // check if our element already hidden and abort if so
                        if (angular.element(elem).hasClass("ng-hide")) {
                            return;
                        }

                        // if there is no click target, no point going on
                        if (!e || !e.target) {
                            return;
                        }

                        // loop through the available elements, looking for classes in the class list that might match and so will eat
                        for (element = e.target; element; element = element.parentNode) {
                            // check if the element is the same element the directive is attached to and exit if so (props @CosticaPuntaru)
                            if (element === elem[0]) {
                                return;
                            }
                            
                            // now we have done the initial checks, start gathering id's and classes
                            id = element.id,
                            classNames = element.className,
                            l = classList.length;

                            // Unwrap SVGAnimatedString classes
                            if (classNames && classNames.baseVal !== undefined) {
                                classNames = classNames.baseVal;
                            }

                            // if there are no class names on the element clicked, skip the check
                            if (classNames || id) {

                                // loop through the elements id's and classnames looking for exceptions
                                for (i = 0; i < l; i++) {
                                    //prepare regex for class word matching
                                    r = new RegExp('\\b' + classList[i] + '\\b');

                                    // check for exact matches on id's or classes, but only if they exist in the first place
                                    if ((id !== undefined && id === classList[i]) || (classNames && r.test(classNames))) {
                                        // now let's exit out as it is an element that has been defined as being ignored for clicking outside
                                        return;
                                    }
                                }
                            }
                        }

                        // if we have got this far, then we are good to go with processing the command passed in via the click-outside attribute
                        $timeout(function() {
                            fn = $parse(attr['clickOutside']);
                            fn($scope, { event: e });
                        });
                    }

                    // if the devices has a touchscreen, listen for this event
                    if (_hasTouch()) {
                        $document.on('touchstart', eventHandler);
                    }

                    // still listen for the click event even if there is touch to cater for touchscreen laptops
                    $document.on('click', eventHandler);

                    // when the scope is destroyed, clean up the documents event handlers as we don't want it hanging around
                    $scope.$on('$destroy', function() {
                        if (_hasTouch()) {
                            $document.off('touchstart', eventHandler);
                        }

                        $document.off('click', eventHandler);
                    });

                    /**
                     * @description Private function to attempt to figure out if we are on a touch device
                     * @private
                     **/
                    function _hasTouch() {
                        // works on most browsers, IE10/11 and Surface
                        return 'ontouchstart' in window || navigator.maxTouchPoints;
                    };
                });
            }
        };
    }
})();

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/node_modules\\@iamadamjowett\\angular-click-outside\\clickoutside.directive.js","/node_modules\\@iamadamjowett\\angular-click-outside")

},{"_process":"E:\\angualarjslibs\\node_modules\\process\\browser.js","buffer":"E:\\angualarjslibs\\node_modules\\buffer\\index.js"}],"E:\\angualarjslibs\\node_modules\\base64-js\\index.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
'use strict'

exports.byteLength = byteLength
exports.toByteArray = toByteArray
exports.fromByteArray = fromByteArray

var lookup = []
var revLookup = []
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i]
  revLookup[code.charCodeAt(i)] = i
}

revLookup['-'.charCodeAt(0)] = 62
revLookup['_'.charCodeAt(0)] = 63

function placeHoldersCount (b64) {
  var len = b64.length
  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4')
  }

  // the number of equal signs (place holders)
  // if there are two placeholders, than the two characters before it
  // represent one byte
  // if there is only one, then the three characters before it represent 2 bytes
  // this is just a cheap hack to not do indexOf twice
  return b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0
}

function byteLength (b64) {
  // base64 is 4/3 + up to two characters of the original data
  return (b64.length * 3 / 4) - placeHoldersCount(b64)
}

function toByteArray (b64) {
  var i, l, tmp, placeHolders, arr
  var len = b64.length
  placeHolders = placeHoldersCount(b64)

  arr = new Arr((len * 3 / 4) - placeHolders)

  // if there are placeholders, only get up to the last complete 4 chars
  l = placeHolders > 0 ? len - 4 : len

  var L = 0

  for (i = 0; i < l; i += 4) {
    tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)]
    arr[L++] = (tmp >> 16) & 0xFF
    arr[L++] = (tmp >> 8) & 0xFF
    arr[L++] = tmp & 0xFF
  }

  if (placeHolders === 2) {
    tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4)
    arr[L++] = tmp & 0xFF
  } else if (placeHolders === 1) {
    tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2)
    arr[L++] = (tmp >> 8) & 0xFF
    arr[L++] = tmp & 0xFF
  }

  return arr
}

function tripletToBase64 (num) {
  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F]
}

function encodeChunk (uint8, start, end) {
  var tmp
  var output = []
  for (var i = start; i < end; i += 3) {
    tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])
    output.push(tripletToBase64(tmp))
  }
  return output.join('')
}

function fromByteArray (uint8) {
  var tmp
  var len = uint8.length
  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
  var output = ''
  var parts = []
  var maxChunkLength = 16383 // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1]
    output += lookup[tmp >> 2]
    output += lookup[(tmp << 4) & 0x3F]
    output += '=='
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + (uint8[len - 1])
    output += lookup[tmp >> 10]
    output += lookup[(tmp >> 4) & 0x3F]
    output += lookup[(tmp << 2) & 0x3F]
    output += '='
  }

  parts.push(output)

  return parts.join('')
}

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/node_modules\\base64-js\\index.js","/node_modules\\base64-js")

},{"_process":"E:\\angualarjslibs\\node_modules\\process\\browser.js","buffer":"E:\\angualarjslibs\\node_modules\\buffer\\index.js"}],"E:\\angualarjslibs\\node_modules\\buffer\\index.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */

'use strict'

var base64 = require('base64-js')
var ieee754 = require('ieee754')
var isArray = require('isarray')

exports.Buffer = Buffer
exports.SlowBuffer = SlowBuffer
exports.INSPECT_MAX_BYTES = 50

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Use Object implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * Due to various browser bugs, sometimes the Object implementation will be used even
 * when the browser supports typed arrays.
 *
 * Note:
 *
 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
 *
 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
 *
 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
 *     incorrect length in some situations.

 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
 * get the Object implementation, which is slower but behaves correctly.
 */
Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined
  ? global.TYPED_ARRAY_SUPPORT
  : typedArraySupport()

/*
 * Export kMaxLength after typed array support is determined.
 */
exports.kMaxLength = kMaxLength()

function typedArraySupport () {
  try {
    var arr = new Uint8Array(1)
    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}
    return arr.foo() === 42 && // typed array instances can be augmented
        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
  } catch (e) {
    return false
  }
}

function kMaxLength () {
  return Buffer.TYPED_ARRAY_SUPPORT
    ? 0x7fffffff
    : 0x3fffffff
}

function createBuffer (that, length) {
  if (kMaxLength() < length) {
    throw new RangeError('Invalid typed array length')
  }
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = new Uint8Array(length)
    that.__proto__ = Buffer.prototype
  } else {
    // Fallback: Return an object instance of the Buffer class
    if (that === null) {
      that = new Buffer(length)
    }
    that.length = length
  }

  return that
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

function Buffer (arg, encodingOrOffset, length) {
  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
    return new Buffer(arg, encodingOrOffset, length)
  }

  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new Error(
        'If encoding is specified then the first argument must be a string'
      )
    }
    return allocUnsafe(this, arg)
  }
  return from(this, arg, encodingOrOffset, length)
}

Buffer.poolSize = 8192 // not used by this implementation

// TODO: Legacy, not needed anymore. Remove in next major version.
Buffer._augment = function (arr) {
  arr.__proto__ = Buffer.prototype
  return arr
}

function from (that, value, encodingOrOffset, length) {
  if (typeof value === 'number') {
    throw new TypeError('"value" argument must not be a number')
  }

  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
    return fromArrayBuffer(that, value, encodingOrOffset, length)
  }

  if (typeof value === 'string') {
    return fromString(that, value, encodingOrOffset)
  }

  return fromObject(that, value)
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from(null, value, encodingOrOffset, length)
}

if (Buffer.TYPED_ARRAY_SUPPORT) {
  Buffer.prototype.__proto__ = Uint8Array.prototype
  Buffer.__proto__ = Uint8Array
  if (typeof Symbol !== 'undefined' && Symbol.species &&
      Buffer[Symbol.species] === Buffer) {
    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
    Object.defineProperty(Buffer, Symbol.species, {
      value: null,
      configurable: true
    })
  }
}

function assertSize (size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be a number')
  } else if (size < 0) {
    throw new RangeError('"size" argument must not be negative')
  }
}

function alloc (that, size, fill, encoding) {
  assertSize(size)
  if (size <= 0) {
    return createBuffer(that, size)
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === 'string'
      ? createBuffer(that, size).fill(fill, encoding)
      : createBuffer(that, size).fill(fill)
  }
  return createBuffer(that, size)
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(null, size, fill, encoding)
}

function allocUnsafe (that, size) {
  assertSize(size)
  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) {
    for (var i = 0; i < size; ++i) {
      that[i] = 0
    }
  }
  return that
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(null, size)
}
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(null, size)
}

function fromString (that, string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8'
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('"encoding" must be a valid string encoding')
  }

  var length = byteLength(string, encoding) | 0
  that = createBuffer(that, length)

  var actual = that.write(string, encoding)

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    that = that.slice(0, actual)
  }

  return that
}

function fromArrayLike (that, array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0
  that = createBuffer(that, length)
  for (var i = 0; i < length; i += 1) {
    that[i] = array[i] & 255
  }
  return that
}

function fromArrayBuffer (that, array, byteOffset, length) {
  array.byteLength // this throws if `array` is not a valid ArrayBuffer

  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('\'offset\' is out of bounds')
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('\'length\' is out of bounds')
  }

  if (byteOffset === undefined && length === undefined) {
    array = new Uint8Array(array)
  } else if (length === undefined) {
    array = new Uint8Array(array, byteOffset)
  } else {
    array = new Uint8Array(array, byteOffset, length)
  }

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = array
    that.__proto__ = Buffer.prototype
  } else {
    // Fallback: Return an object instance of the Buffer class
    that = fromArrayLike(that, array)
  }
  return that
}

function fromObject (that, obj) {
  if (Buffer.isBuffer(obj)) {
    var len = checked(obj.length) | 0
    that = createBuffer(that, len)

    if (that.length === 0) {
      return that
    }

    obj.copy(that, 0, 0, len)
    return that
  }

  if (obj) {
    if ((typeof ArrayBuffer !== 'undefined' &&
        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {
      if (typeof obj.length !== 'number' || isnan(obj.length)) {
        return createBuffer(that, 0)
      }
      return fromArrayLike(that, obj)
    }

    if (obj.type === 'Buffer' && isArray(obj.data)) {
      return fromArrayLike(that, obj.data)
    }
  }

  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
}

function checked (length) {
  // Note: cannot use `length < kMaxLength()` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= kMaxLength()) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + kMaxLength().toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (length) {
  if (+length != length) { // eslint-disable-line eqeqeq
    length = 0
  }
  return Buffer.alloc(+length)
}

Buffer.isBuffer = function isBuffer (b) {
  return !!(b != null && b._isBuffer)
}

Buffer.compare = function compare (a, b) {
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError('Arguments must be Buffers')
  }

  if (a === b) return 0

  var x = a.length
  var y = b.length

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i]
      y = b[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function concat (list, length) {
  if (!isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers')
  }

  if (list.length === 0) {
    return Buffer.alloc(0)
  }

  var i
  if (length === undefined) {
    length = 0
    for (i = 0; i < list.length; ++i) {
      length += list[i].length
    }
  }

  var buffer = Buffer.allocUnsafe(length)
  var pos = 0
  for (i = 0; i < list.length; ++i) {
    var buf = list[i]
    if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    }
    buf.copy(buffer, pos)
    pos += buf.length
  }
  return buffer
}

function byteLength (string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length
  }
  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&
      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
    return string.byteLength
  }
  if (typeof string !== 'string') {
    string = '' + string
  }

  var len = string.length
  if (len === 0) return 0

  // Use a for loop to avoid recursion
  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len
      case 'utf8':
      case 'utf-8':
      case undefined:
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) return utf8ToBytes(string).length // assume utf8
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}
Buffer.byteLength = byteLength

function slowToString (encoding, start, end) {
  var loweredCase = false

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return ''
  }

  if (end === undefined || end > this.length) {
    end = this.length
  }

  if (end <= 0) {
    return ''
  }

  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0
  start >>>= 0

  if (end <= start) {
    return ''
  }

  if (!encoding) encoding = 'utf8'

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
// Buffer instances.
Buffer.prototype._isBuffer = true

function swap (b, n, m) {
  var i = b[n]
  b[n] = b[m]
  b[m] = i
}

Buffer.prototype.swap16 = function swap16 () {
  var len = this.length
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits')
  }
  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1)
  }
  return this
}

Buffer.prototype.swap32 = function swap32 () {
  var len = this.length
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits')
  }
  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3)
    swap(this, i + 1, i + 2)
  }
  return this
}

Buffer.prototype.swap64 = function swap64 () {
  var len = this.length
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits')
  }
  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7)
    swap(this, i + 1, i + 6)
    swap(this, i + 2, i + 5)
    swap(this, i + 3, i + 4)
  }
  return this
}

Buffer.prototype.toString = function toString () {
  var length = this.length | 0
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
}

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function inspect () {
  var str = ''
  var max = exports.INSPECT_MAX_BYTES
  if (this.length > 0) {
    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
    if (this.length > max) str += ' ... '
  }
  return '<Buffer ' + str + '>'
}

Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
  if (!Buffer.isBuffer(target)) {
    throw new TypeError('Argument must be a Buffer')
  }

  if (start === undefined) {
    start = 0
  }
  if (end === undefined) {
    end = target ? target.length : 0
  }
  if (thisStart === undefined) {
    thisStart = 0
  }
  if (thisEnd === undefined) {
    thisEnd = this.length
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index')
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0
  }
  if (thisStart >= thisEnd) {
    return -1
  }
  if (start >= end) {
    return 1
  }

  start >>>= 0
  end >>>= 0
  thisStart >>>= 0
  thisEnd >>>= 0

  if (this === target) return 0

  var x = thisEnd - thisStart
  var y = end - start
  var len = Math.min(x, y)

  var thisCopy = this.slice(thisStart, thisEnd)
  var targetCopy = target.slice(start, end)

  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i]
      y = targetCopy[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1

  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset
    byteOffset = 0
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000
  }
  byteOffset = +byteOffset  // Coerce to Number.
  if (isNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : (buffer.length - 1)
  }

  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
  if (byteOffset >= buffer.length) {
    if (dir) return -1
    else byteOffset = buffer.length - 1
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0
    else return -1
  }

  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding)
  }

  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
  } else if (typeof val === 'number') {
    val = val & 0xFF // Search for a byte value [0-255]
    if (Buffer.TYPED_ARRAY_SUPPORT &&
        typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
      }
    }
    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
  }

  throw new TypeError('val must be string, number or Buffer')
}

function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
  var indexSize = 1
  var arrLength = arr.length
  var valLength = val.length

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase()
    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
        encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1
      }
      indexSize = 2
      arrLength /= 2
      valLength /= 2
      byteOffset /= 2
    }
  }

  function read (buf, i) {
    if (indexSize === 1) {
      return buf[i]
    } else {
      return buf.readUInt16BE(i * indexSize)
    }
  }

  var i
  if (dir) {
    var foundIndex = -1
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
      } else {
        if (foundIndex !== -1) i -= i - foundIndex
        foundIndex = -1
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
    for (i = byteOffset; i >= 0; i--) {
      var found = true
      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false
          break
        }
      }
      if (found) return i
    }
  }

  return -1
}

Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1
}

Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
}

Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  // must be an even number of digits
  var strLen = string.length
  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16)
    if (isNaN(parsed)) return i
    buf[offset + i] = parsed
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function latin1Write (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8'
    length = this.length
    offset = 0
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset
    length = this.length
    offset = 0
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset | 0
    if (isFinite(length)) {
      length = length | 0
      if (encoding === undefined) encoding = 'utf8'
    } else {
      encoding = length
      length = undefined
    }
  // legacy write(string, encoding, offset, length) - remove in v0.13
  } else {
    throw new Error(
      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
    )
  }

  var remaining = this.length - offset
  if (length === undefined || length > remaining) length = remaining

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8'

  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
        return asciiWrite(this, string, offset, length)

      case 'latin1':
      case 'binary':
        return latin1Write(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end)
  var res = []

  var i = start
  while (i < end) {
    var firstByte = buf[i]
    var codePoint = null
    var bytesPerSequence = (firstByte > 0xEF) ? 4
      : (firstByte > 0xDF) ? 3
      : (firstByte > 0xBF) ? 2
      : 1

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte
          }
          break
        case 2:
          secondByte = buf[i + 1]
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint
            }
          }
          break
        case 3:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint
            }
          }
          break
        case 4:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          fourthByte = buf[i + 3]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD
      bytesPerSequence = 1
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000
      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
      codePoint = 0xDC00 | codePoint & 0x3FF
    }

    res.push(codePoint)
    i += bytesPerSequence
  }

  return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000

function decodeCodePointsArray (codePoints) {
  var len = codePoints.length
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = ''
  var i = 0
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    )
  }
  return res
}

function asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function latin1Slice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; ++i) {
    out += toHex(buf[i])
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  var len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len
    if (start < 0) start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0) end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start) end = start

  var newBuf
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    newBuf = this.subarray(start, end)
    newBuf.__proto__ = Buffer.prototype
  } else {
    var sliceLen = end - start
    newBuf = new Buffer(sliceLen, undefined)
    for (var i = 0; i < sliceLen; ++i) {
      newBuf[i] = this[i + start]
    }
  }

  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }

  return val
}

Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length)
  }

  var val = this[offset + --byteLength]
  var mul = 1
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul
  }

  return val
}

Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
}

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var i = byteLength
  var mul = 1
  var val = this[offset + --i]
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
}

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
}

Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var mul = 1
  var i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var i = byteLength - 1
  var mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  this[offset] = (value & 0xff)
  return offset + 1
}

function objectWriteUInt16 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
      (littleEndian ? i : 1 - i) * 8
  }
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

function objectWriteUInt32 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffffffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
  }
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset + 3] = (value >>> 24)
    this[offset + 2] = (value >>> 16)
    this[offset + 1] = (value >>> 8)
    this[offset] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = 0
  var mul = 1
  var sub = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = byteLength - 1
  var mul = 1
  var sub = 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  if (value < 0) value = 0xff + value + 1
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
    this[offset + 2] = (value >>> 16)
    this[offset + 3] = (value >>> 24)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
  if (offset < 0) throw new RangeError('Index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (targetStart >= target.length) targetStart = target.length
  if (!targetStart) targetStart = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start
  }

  var len = end - start
  var i

  if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start]
    }
  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
    // ascending copy from start
    for (i = 0; i < len; ++i) {
      target[i + targetStart] = this[i + start]
    }
  } else {
    Uint8Array.prototype.set.call(
      target,
      this.subarray(start, start + len),
      targetStart
    )
  }

  return len
}

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill (val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start
      start = 0
      end = this.length
    } else if (typeof end === 'string') {
      encoding = end
      end = this.length
    }
    if (val.length === 1) {
      var code = val.charCodeAt(0)
      if (code < 256) {
        val = code
      }
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string')
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding)
    }
  } else if (typeof val === 'number') {
    val = val & 255
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index')
  }

  if (end <= start) {
    return this
  }

  start = start >>> 0
  end = end === undefined ? this.length : end >>> 0

  if (!val) val = 0

  var i
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val
    }
  } else {
    var bytes = Buffer.isBuffer(val)
      ? val
      : utf8ToBytes(new Buffer(val, encoding).toString())
    var len = bytes.length
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len]
    }
  }

  return this
}

// HELPER FUNCTIONS
// ================

var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g

function base64clean (str) {
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = stringtrim(str).replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function stringtrim (str) {
  if (str.trim) return str.trim()
  return str.replace(/^\s+|\s+$/g, '')
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (string, units) {
  units = units || Infinity
  var codePoint
  var length = string.length
  var leadSurrogate = null
  var bytes = []

  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        }

        // valid lead
        leadSurrogate = codePoint

        continue
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
        leadSurrogate = codePoint
        continue
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
    }

    leadSurrogate = null

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i]
  }
  return i
}

function isnan (val) {
  return val !== val // eslint-disable-line no-self-compare
}

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/node_modules\\buffer\\index.js","/node_modules\\buffer")

},{"_process":"E:\\angualarjslibs\\node_modules\\process\\browser.js","base64-js":"E:\\angualarjslibs\\node_modules\\base64-js\\index.js","buffer":"E:\\angualarjslibs\\node_modules\\buffer\\index.js","ieee754":"E:\\angualarjslibs\\node_modules\\ieee754\\index.js","isarray":"E:\\angualarjslibs\\node_modules\\isarray\\index.js"}],"E:\\angualarjslibs\\node_modules\\ieee754\\index.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = nBytes * 8 - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = nBytes * 8 - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = (value * c - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/node_modules\\ieee754\\index.js","/node_modules\\ieee754")

},{"_process":"E:\\angualarjslibs\\node_modules\\process\\browser.js","buffer":"E:\\angualarjslibs\\node_modules\\buffer\\index.js"}],"E:\\angualarjslibs\\node_modules\\isarray\\index.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
var toString = {}.toString;

module.exports = Array.isArray || function (arr) {
  return toString.call(arr) == '[object Array]';
};

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/node_modules\\isarray\\index.js","/node_modules\\isarray")

},{"_process":"E:\\angualarjslibs\\node_modules\\process\\browser.js","buffer":"E:\\angualarjslibs\\node_modules\\buffer\\index.js"}],"E:\\angualarjslibs\\node_modules\\process\\browser.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/node_modules\\process\\browser.js","/node_modules\\process")

},{"_process":"E:\\angualarjslibs\\node_modules\\process\\browser.js","buffer":"E:\\angualarjslibs\\node_modules\\buffer\\index.js"}]},{},["E:\\angualarjslibs\\app\\app.module.js"])


//# sourceMappingURL=app.min.js.map
